(CurryInfo (ModuleInfo "Time" "Michael Hanus" "Library for handling date and time information.\n\n") [(FunctionInfo "ctYear" (FuncType (TCons ("Time","CalendarTime") []) (TCons ("Prelude","Int") [])) "Time" "The year of a calendar time.\n" False KnownFlex),(FunctionInfo "ctMonth" (FuncType (TCons ("Time","CalendarTime") []) (TCons ("Prelude","Int") [])) "Time" "The month of a calendar time.\n" False KnownFlex),(FunctionInfo "ctDay" (FuncType (TCons ("Time","CalendarTime") []) (TCons ("Prelude","Int") [])) "Time" "The day of a calendar time.\n" False KnownFlex),(FunctionInfo "ctHour" (FuncType (TCons ("Time","CalendarTime") []) (TCons ("Prelude","Int") [])) "Time" "The hour of a calendar time.\n" False KnownFlex),(FunctionInfo "ctMin" (FuncType (TCons ("Time","CalendarTime") []) (TCons ("Prelude","Int") [])) "Time" "The minute of a calendar time.\n" False KnownFlex),(FunctionInfo "ctSec" (FuncType (TCons ("Time","CalendarTime") []) (TCons ("Prelude","Int") [])) "Time" "The second of a calendar time.\n" False KnownFlex),(FunctionInfo "ctTZ" (FuncType (TCons ("Time","CalendarTime") []) (TCons ("Prelude","Int") [])) "Time" "The time zone of a calendar time. The value of the\ntime zone is the difference to UTC time in seconds.\n" False KnownFlex),(FunctionInfo "getClockTime" (TCons ("Prelude","IO") [(TCons ("Time","ClockTime") [])]) "Time" "Returns the current clock time.\n" False UnknownFR),(FunctionInfo "getLocalTime" (TCons ("Prelude","IO") [(TCons ("Time","CalendarTime") [])]) "Time" "Returns the local calendar time.\n" False UnknownFR),(FunctionInfo "clockTimeToInt" (FuncType (TCons ("Time","ClockTime") []) (TCons ("Prelude","Int") [])) "Time" "Transforms a clock time into a unique integer.\nIt is ensured that clock times that differs in at least one second\nare mapped into different integers.\n" False KnownFlex),(FunctionInfo "toCalendarTime" (FuncType (TCons ("Time","ClockTime") []) (TCons ("Prelude","IO") [(TCons ("Time","CalendarTime") [])])) "Time" "Transforms a clock time into a calendar time according to the local time\n(if possible). Since the result depends on the local environment,\nit is an I/O operation.\n" False UnknownFR),(FunctionInfo "toUTCTime" (FuncType (TCons ("Time","ClockTime") []) (TCons ("Time","CalendarTime") [])) "Time" "Transforms a clock time into a standard UTC calendar time.\nThus, this operationa is independent on the local time.\n" False UnknownFR),(FunctionInfo "toClockTime" (FuncType (TCons ("Time","CalendarTime") []) (TCons ("Time","ClockTime") [])) "Time" "Transforms a calendar time (interpreted as UTC time) into a clock time.\n" False UnknownFR),(FunctionInfo "calendarTimeToString" (FuncType (TCons ("Time","CalendarTime") []) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])) "Time" "Transforms a calendar time into a readable form.\n" False KnownFlex),(FunctionInfo "toDayString" (FuncType (TCons ("Time","CalendarTime") []) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])) "Time" "Transforms a calendar time into a string containing the day, e.g.,\n\"September 23, 2006\".\n" False KnownFlex),(FunctionInfo "toTimeString" (FuncType (TCons ("Time","CalendarTime") []) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])) "Time" "Transforms a calendar time into a string containing the time.\n" False KnownFlex),(FunctionInfo "addSeconds" (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Time","ClockTime") []) (TCons ("Time","ClockTime") []))) "Time" "Adds seconds to a given time.\n" False KnownFlex),(FunctionInfo "addMinutes" (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Time","ClockTime") []) (TCons ("Time","ClockTime") []))) "Time" "Adds minutes to a given time.\n" False KnownFlex),(FunctionInfo "addHours" (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Time","ClockTime") []) (TCons ("Time","ClockTime") []))) "Time" "Adds hours to a given time.\n" False KnownFlex),(FunctionInfo "addDays" (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Time","ClockTime") []) (TCons ("Time","ClockTime") []))) "Time" "Adds days to a given time.\n" False KnownFlex),(FunctionInfo "addMonths" (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Time","ClockTime") []) (TCons ("Time","ClockTime") []))) "Time" "Adds months to a given time.\n" False KnownRigid),(FunctionInfo "addYears" (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Time","ClockTime") []) (TCons ("Time","ClockTime") []))) "Time" "Adds years to a given time.\n" False KnownRigid),(FunctionInfo "daysOfMonth" (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) "Time" "Gets the days of a month in a year.\n" False KnownRigid),(FunctionInfo "validDate" (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Bool") [])))) "Time" "Is a date consisting of year/month/day valid?\n" False UnknownFR),(FunctionInfo "compareDate" (FuncType (TCons ("Time","CalendarTime") []) (FuncType (TCons ("Time","CalendarTime") []) (TCons ("Prelude","Ordering") []))) "Time" "Compares two dates (don't use it, just for backward compatibility!).\n" False UnknownFR),(FunctionInfo "compareCalendarTime" (FuncType (TCons ("Time","CalendarTime") []) (FuncType (TCons ("Time","CalendarTime") []) (TCons ("Prelude","Ordering") []))) "Time" "Compares two calendar times.\n" False UnknownFR),(FunctionInfo "compareClockTime" (FuncType (TCons ("Time","ClockTime") []) (FuncType (TCons ("Time","ClockTime") []) (TCons ("Prelude","Ordering") []))) "Time" "Compares two clock times.\n" False ConflictFR)] [(TypeInfo "ClockTime" [] [] "Time" "ClockTime represents a clock time in some internal representation.\n"),(TypeInfo "CalendarTime" [(("Time","CalendarTime"),[(TCons ("Prelude","Int") []),(TCons ("Prelude","Int") []),(TCons ("Prelude","Int") []),(TCons ("Prelude","Int") []),(TCons ("Prelude","Int") []),(TCons ("Prelude","Int") []),(TCons ("Prelude","Int") [])])] [] "Time" "A calendar time is presented in the following form:\n(CalendarTime year month day hour minute second timezone)\nwhere timezone is an integer representing the timezone as a difference\nto UTC time in seconds.\n")])