Prog "CurryDoc" ["AnaCompleteness","AnaIndeterminism","AnaOpComplete","AnaOverlapping","CurryDocCDoc","CurryDocHtml","CurryDocParams","CurryDocRead","CurryDocTeX","Directory","Distribution","FileGoodies","FlatCurry","Prelude","System","Time","List","ReadShowTerm"] [] [Func ("CurryDoc","currydocVersion") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (Rule [] (Comb ConsCall ("Prelude",":") [Lit (Charc  'V'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '0'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  '5'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  '0'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'N'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'v'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'b'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '8'),Comb ConsCall ("Prelude",":") [Lit (Charc  ','),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '2'),Comb ConsCall ("Prelude",":") [Lit (Charc  '0'),Comb ConsCall ("Prelude",":") [Lit (Charc  '1'),Comb ConsCall ("Prelude",":") [Lit (Charc  '1'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])),Func ("CurryDoc","includeDir") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (Rule [] (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Distribution","installDir") [],Comb ConsCall ("Prelude",":") [Lit (Charc  '/'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]])),Func ("CurryDoc","main") 0 Public (TCons ("Prelude","IO") [TCons ("Prelude","()") []]) (Rule [] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("System","getArgs") [],Comb (FuncPartCall 1) ("CurryDoc","main._#lambda1") []])),Func ("CurryDoc","main._#lambda1") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [1] (Comb FuncCall ("CurryDoc","processArgs") [Comb FuncCall ("CurryDocParams","defaultCurryDocParams") [],Var 1])),Func ("CurryDoc","processArgs") 2 Public (FuncType (TCons ("CurryDocParams","DocParams") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [1,2] (Case  Rigid (Var 2) [Branch (Pattern ("Prelude",":") [3,4]) (Case  Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 5,Lit (Charc  '-')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 7,Lit (Charc  '-')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 9,Lit (Charc  'n')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 11,Lit (Charc  'o')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 13,Lit (Charc  'm')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 15,Lit (Charc  'a')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 17,Lit (Charc  'r')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 19,Lit (Charc  'k')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 20) [Branch (Pattern ("Prelude",":") [21,22]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 21,Lit (Charc  'd')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 22) [Branch (Pattern ("Prelude",":") [23,24]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 23,Lit (Charc  'o')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 24) [Branch (Pattern ("Prelude",":") [25,26]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 25,Lit (Charc  'w')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 26) [Branch (Pattern ("Prelude",":") [27,28]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 27,Lit (Charc  'n')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 28) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CurryDoc","processArgs") [Comb FuncCall ("CurryDocParams","setMarkDown") [Comb ConsCall ("Prelude","False") [],Var 1],Var 4]),Branch (Pattern ("Prelude",":") [29,30]) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 13,Lit (Charc  'i')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 14) [Branch (Pattern ("Prelude",":") [31,32]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 31,Lit (Charc  'n')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 32) [Branch (Pattern ("Prelude",":") [33,34]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 33,Lit (Charc  'd')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 34) [Branch (Pattern ("Prelude",":") [35,36]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 35,Lit (Charc  'e')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 36) [Branch (Pattern ("Prelude",":") [37,38]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 37,Lit (Charc  'x')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 38) [Branch (Pattern ("Prelude",":") [39,40]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 39,Lit (Charc  'h')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 40) [Branch (Pattern ("Prelude",":") [41,42]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 41,Lit (Charc  't')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 42) [Branch (Pattern ("Prelude",":") [43,44]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 43,Lit (Charc  'm')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 44) [Branch (Pattern ("Prelude",":") [45,46]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 45,Lit (Charc  'l')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 46) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Var 4) [Branch (Pattern ("Prelude",":") [47,48]) (Case  Rigid (Var 48) [Branch (Pattern ("Prelude",":") [49,50]) (Case  Rigid (Var 50) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CurryDoc","makeCompleteDoc") [Comb FuncCall ("CurryDocParams","setIndex") [Comb ConsCall ("Prelude","False") [],Comb FuncCall ("CurryDocParams","setDocType") [Comb ConsCall ("CurryDocParams","HtmlDoc") [],Var 1]],Comb ConsCall ("Prelude","True") [],Var 47,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FileGoodies","stripSuffix") [],Var 49]]),Branch (Pattern ("Prelude",":") [51,52]) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude",":") [53,54]) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])])]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 9,Lit (Charc  'h')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 10) [Branch (Pattern ("Prelude",":") [55,56]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 55,Lit (Charc  't')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 56) [Branch (Pattern ("Prelude",":") [57,58]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 57,Lit (Charc  'm')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 58) [Branch (Pattern ("Prelude",":") [59,60]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 59,Lit (Charc  'l')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 60) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CurryDoc","processArgs") [Comb FuncCall ("CurryDocParams","setDocType") [Comb ConsCall ("CurryDocParams","HtmlDoc") [],Var 1],Var 4]),Branch (Pattern ("Prelude",":") [61,62]) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 9,Lit (Charc  't')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 10) [Branch (Pattern ("Prelude",":") [63,64]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 63,Lit (Charc  'e')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 64) [Branch (Pattern ("Prelude",":") [65,66]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 65,Lit (Charc  'x')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 66) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CurryDoc","processArgs") [Comb FuncCall ("CurryDocParams","setDocType") [Comb ConsCall ("CurryDocParams","TexDoc") [],Var 1],Var 4]),Branch (Pattern ("Prelude",":") [67,68]) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 9,Lit (Charc  'c')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 10) [Branch (Pattern ("Prelude",":") [69,70]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 69,Lit (Charc  'd')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 70) [Branch (Pattern ("Prelude",":") [71,72]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 71,Lit (Charc  'o')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 72) [Branch (Pattern ("Prelude",":") [73,74]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 73,Lit (Charc  'c')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 74) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CurryDoc","processArgs") [Comb FuncCall ("CurryDocParams","setDocType") [Comb ConsCall ("CurryDocParams","CDoc") [],Comb ConsCall ("CurryDocParams","DocParams") [Comb ConsCall ("CurryDocParams","CDoc") [],Comb ConsCall ("Prelude","False") [],Comb ConsCall ("Prelude","False") []]],Var 4]),Branch (Pattern ("Prelude",":") [75,76]) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 9,Lit (Charc  'o')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 10) [Branch (Pattern ("Prelude",":") [77,78]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 77,Lit (Charc  'n')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 78) [Branch (Pattern ("Prelude",":") [79,80]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 79,Lit (Charc  'l')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 80) [Branch (Pattern ("Prelude",":") [81,82]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 81,Lit (Charc  'y')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 82) [Branch (Pattern ("Prelude",":") [83,84]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 83,Lit (Charc  'i')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 84) [Branch (Pattern ("Prelude",":") [85,86]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 85,Lit (Charc  'n')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 86) [Branch (Pattern ("Prelude",":") [87,88]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 87,Lit (Charc  'd')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 88) [Branch (Pattern ("Prelude",":") [89,90]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 89,Lit (Charc  'e')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 90) [Branch (Pattern ("Prelude",":") [91,92]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 91,Lit (Charc  'x')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 92) [Branch (Pattern ("Prelude",":") [93,94]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 93,Lit (Charc  'h')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 94) [Branch (Pattern ("Prelude",":") [95,96]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 95,Lit (Charc  't')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 96) [Branch (Pattern ("Prelude",":") [97,98]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 97,Lit (Charc  'm')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 98) [Branch (Pattern ("Prelude",":") [99,100]) (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 99,Lit (Charc  'l')]) [Branch (Pattern ("Prelude","True") []) (Case  Rigid (Var 100) [Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Var 4) [Branch (Pattern ("Prelude",":") [101,102]) (Comb FuncCall ("CurryDoc","makeIndexPages") [Var 101,Comb FuncCall ("Prelude","map") [Comb FuncCall ("FileGoodies","stripSuffix") [],Var 102]]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude",":") [103,104]) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])])])])])]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Var 4) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CurryDoc","makeCompleteDoc") [Var 1,Comb FuncCall ("Prelude","==") [Comb FuncCall ("CurryDocParams","docType") [Var 1],Comb ConsCall ("CurryDocParams","HtmlDoc") []],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'D'),Comb ConsCall ("Prelude",":") [Lit (Charc  'O'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FileGoodies","stripSuffix") [],Var 3]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FileGoodies","stripSuffix") [],Var 3]]),Branch (Pattern ("Prelude",":") [105,106]) (Case  Rigid (Var 106) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CurryDoc","makeCompleteDoc") [Var 1,Comb FuncCall ("Prelude","==") [Comb FuncCall ("CurryDocParams","docType") [Var 1],Comb ConsCall ("CurryDocParams","HtmlDoc") []],Var 3,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FileGoodies","stripSuffix") [],Var 105]]),Branch (Pattern ("Prelude",":") [107,108]) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])])])]),Branch (Pattern ("Prelude","[]") []) (Case  Rigid (Var 4) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CurryDoc","makeCompleteDoc") [Var 1,Comb FuncCall ("Prelude","==") [Comb FuncCall ("CurryDocParams","docType") [Var 1],Comb ConsCall ("CurryDocParams","HtmlDoc") []],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'D'),Comb ConsCall ("Prelude",":") [Lit (Charc  'O'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FileGoodies","stripSuffix") [],Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FileGoodies","stripSuffix") [],Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude",":") [109,110]) (Case  Rigid (Var 110) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("CurryDoc","makeCompleteDoc") [Var 1,Comb FuncCall ("Prelude","==") [Comb FuncCall ("CurryDocParams","docType") [Var 1],Comb ConsCall ("CurryDocParams","HtmlDoc") []],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("FileGoodies","stripSuffix") [],Var 109]]),Branch (Pattern ("Prelude",":") [111,112]) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])])])]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("CurryDoc","usageMessage") []])])),Func ("CurryDoc","usageMessage") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (Rule [] (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'E'),Comb ConsCall ("Prelude",":") [Lit (Charc  'R'),Comb ConsCall ("Prelude",":") [Lit (Charc  'R'),Comb ConsCall ("Prelude",":") [Lit (Charc  'O'),Comb ConsCall ("Prelude",":") [Lit (Charc  'R'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'I'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\n'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'U'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ':'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '['),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'k'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ']'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '['),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  '|'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  ']'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '<'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  '>'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\n'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '['),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'k'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ']'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '['),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  '|'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  ']'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '<'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  '>'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '<'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  '>'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\n'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '['),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'k'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ']'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '<'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  '>'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '<'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  '>'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\n'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '<'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  '>'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '<'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  '>'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\n'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])),Func ("CurryDoc","createDir") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [1] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Directory","doesDirectoryExist") [Var 1],Comb (FuncPartCall 1) ("CurryDoc","createDir._#lambda3") [Var 1]])),Func ("CurryDoc","createDir._#lambda3") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [1,2] (Case  Rigid (Var 2) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","done") []),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("System","system") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'k'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]],Var 1]],Comb FuncCall ("Prelude","done") []])])),Func ("CurryDoc","makeCompleteDoc") 4 Public (FuncType (TCons ("CurryDocParams","DocParams") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))))) (Rule [1,2,3,4] (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'D'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("CurryDoc","currydocVersion") [],Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'D'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\n'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude",">>") [Comb FuncCall ("CurryDoc","prepareDocDir") [Comb FuncCall ("CurryDocParams","docType") [Var 1],Var 3],Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Distribution","callFrontend") [Comb ConsCall ("Distribution","FCY") []],Var 4],Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("CurryDoc","makeCompleteDoc.getProg.39") [Var 4],Comb FuncCall ("CurryDocParams","docType") [Var 1]],Comb (FuncPartCall 1) ("CurryDoc","makeCompleteDoc._#lambda5") [Var 3,Var 1,Var 4,Var 2]]]]])),Func ("CurryDoc","makeCompleteDoc.getProg.39") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("CurryDocParams","DocType") []) (TCons ("Prelude","IO") [TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("FlatCurry","TypeDecl") []],TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []],TCons ("Prelude","[]") [TCons ("FlatCurry","OpDecl") []]]]))) (Rule [1,2] (Case  Flex (Var 2) [Branch (Pattern ("CurryDocParams","HtmlDoc") []) (Comb FuncCall ("CurryDoc","readFlatCurryWithImports") [Comb ConsCall ("Prelude",":") [Var 1,Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("CurryDocParams","TexDoc") []) (Comb FuncCall ("CurryDoc","readFlatCurryWithImports") [Comb ConsCall ("Prelude",":") [Var 1,Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("CurryDocParams","CDoc") []) (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("FlatCurry","readFlatCurry") [Var 1],Comb (FuncPartCall 1) ("CurryDoc","makeCompleteDoc.getProg.39._#lambda4") []])])),Func ("CurryDoc","makeCompleteDoc.getProg.39._#lambda4") 1 Private (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("Prelude","IO") [TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("FlatCurry","TypeDecl") []],TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []],TCons ("Prelude","[]") [TCons ("FlatCurry","OpDecl") []]]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Prog") [2,3,4,5,6]) (Comb FuncCall ("Prelude","return") [Comb ConsCall ("Prelude","(,,)") [Var 4,Var 5,Var 6]])])),Func ("CurryDoc","makeCompleteDoc._#lambda5") 5 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("CurryDocParams","DocParams") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("FlatCurry","TypeDecl") []],TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []],TCons ("Prelude","[]") [TCons ("FlatCurry","OpDecl") []]]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])))))) (Rule [1,2,3,4,5] (Case  Flex (Var 5) [Branch (Pattern ("Prelude","(,,)") [6,7,8]) (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("CurryDoc","findSourceFileInLoadPath") [Var 3],Comb (FuncPartCall 1) ("CurryDoc","makeCompleteDoc._#lambda5._#lambda6") [Var 7,Var 8,Var 6,Var 1,Var 2,Var 3,Var 4]])])),Func ("CurryDoc","makeCompleteDoc._#lambda5._#lambda6") 8 Private (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","OpDecl") []]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","TypeDecl") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("CurryDocParams","DocParams") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))))))))) (Rule [1,2,3,4,5,6,7,8] (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("CurryDoc","makeDocIfNecessary") [Var 5,Var 7,Var 4,Comb FuncCall ("CurryDoc","genAnaInfo") [Comb ConsCall ("FlatCurry","Prog") [Var 6,Comb ConsCall ("Prelude","[]") [],Var 3,Var 1,Var 2]],Var 8],Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Time","getLocalTime") [],Comb (FuncPartCall 1) ("CurryDoc","makeCompleteDoc._#lambda5._#lambda6._#lambda7") [Var 1,Var 3,Var 4,Var 5,Var 6]]])),Func ("CurryDoc","makeCompleteDoc._#lambda5._#lambda6._#lambda7") 6 Private (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","TypeDecl") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("CurryDocParams","DocParams") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Time","CalendarTime") []) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))))))) (Rule [1,2,3,4,5,6] (Comb FuncCall ("Prelude",">>") [Case  Rigid (Comb FuncCall ("CurryDocParams","withIndex") [Var 4]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("CurryDocHtml","genMainIndexPage") [Comb FuncCall ("CurryDoc","currydocVersion") [],Var 6,Var 3,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",">>") [Comb FuncCall ("CurryDocHtml","genFunctionIndexPage") [Comb FuncCall ("CurryDoc","currydocVersion") [],Var 6,Var 3,Var 1],Comb FuncCall ("CurryDocHtml","genConsIndexPage") [Comb FuncCall ("CurryDoc","currydocVersion") [],Var 6,Var 3,Var 2]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","done") [])],Comb FuncCall ("Prelude",">>") [Comb FuncCall ("System","system") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  'R'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  '+'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'X'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]],Var 3]],Comb FuncCall ("Prelude","done") []]])),Func ("CurryDoc","makeIndexPages") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [1,2] (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'D'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '('),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("CurryDoc","currydocVersion") [],Comb ConsCall ("Prelude",":") [Lit (Charc  ')'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'D'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'T'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  '\n'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude",">>") [Comb FuncCall ("CurryDoc","prepareDocDir") [Comb ConsCall ("CurryDocParams","HtmlDoc") [],Var 1],Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("CurryDoc","readFlatCurryWithImports") [Var 2],Comb (FuncPartCall 1) ("CurryDoc","makeIndexPages._#lambda8") [Var 1,Var 2]]]])),Func ("CurryDoc","makeIndexPages._#lambda8") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("FlatCurry","TypeDecl") []],TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []],TCons ("Prelude","[]") [TCons ("FlatCurry","OpDecl") []]]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])))) (Rule [1,2,3] (Case  Flex (Var 3) [Branch (Pattern ("Prelude","(,,)") [4,5,6]) (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Time","getLocalTime") [],Comb (FuncPartCall 1) ("CurryDoc","makeIndexPages._#lambda8._#lambda9") [Var 5,Var 4,Var 1,Var 2]])])),Func ("CurryDoc","makeIndexPages._#lambda8._#lambda9") 5 Private (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","TypeDecl") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Time","CalendarTime") []) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])))))) (Rule [1,2,3,4,5] (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("CurryDocHtml","genMainIndexPage") [Comb FuncCall ("CurryDoc","currydocVersion") [],Var 5,Var 3,Var 4],Comb FuncCall ("Prelude",">>") [Comb FuncCall ("CurryDocHtml","genFunctionIndexPage") [Comb FuncCall ("CurryDoc","currydocVersion") [],Var 5,Var 3,Var 1],Comb FuncCall ("Prelude",">>") [Comb FuncCall ("CurryDocHtml","genConsIndexPage") [Comb FuncCall ("CurryDoc","currydocVersion") [],Var 5,Var 3,Var 2],Comb FuncCall ("Prelude",">>") [Comb FuncCall ("System","system") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '-'),Comb ConsCall ("Prelude",":") [Lit (Charc  'R'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  '+'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'X'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]],Var 3]],Comb FuncCall ("Prelude","done") []]]]])),Func ("CurryDoc","prepareDocDir") 2 Public (FuncType (TCons ("CurryDocParams","DocType") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("CurryDocParams","HtmlDoc") []) (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("CurryDoc","createDir") [Var 2],Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb FuncCall ("Prelude",">>") [Comb FuncCall ("CurryDoc","copyIncludeIfPresent") [Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  '/'),Comb ConsCall ("Prelude",":") [Lit (Charc  '*'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("CurryDoc","copyIncludeIfPresent") [Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]),Branch (Pattern ("CurryDocParams","TexDoc") []) (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("CurryDoc","createDir") [Var 2],Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","putStrLn") [],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb FuncCall ("CurryDoc","copyIncludeIfPresent") [Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]),Branch (Pattern ("CurryDocParams","CDoc") []) (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("CurryDoc","createDir") [Var 2],Comb FuncCall ("Prelude","putStrLn") [Comb ConsCall ("Prelude",":") [Lit (Charc  'D'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'w'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])])),Func ("CurryDoc","copyIncludeIfPresent") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [1,2] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Directory","doesDirectoryExist") [Comb FuncCall ("CurryDoc","includeDir") []],Comb (FuncPartCall 1) ("CurryDoc","copyIncludeIfPresent._#lambda10") [Var 1,Var 2]])),Func ("CurryDoc","copyIncludeIfPresent._#lambda10") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])))) (Rule [1,2,3] (Case  Rigid (Var 3) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("System","system") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Prelude","++") [Comb FuncCall ("CurryDoc","includeDir") [],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '/'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Var 2,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []],Var 1]]]]]],Comb FuncCall ("Prelude","done") []]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","done") [])])),Func ("CurryDoc","genAnaInfo") 1 Public (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("CurryDocRead","AnaInfo") [])) (Rule [1] (Comb ConsCall ("CurryDocRead","AnaInfo") [Comb (FuncPartCall 1) ("CurryDocRead","getFunctionInfo") [Comb FuncCall ("AnaOverlapping","analyseOverlappings") [Var 1]],Comb (FuncPartCall 1) ("CurryDocRead","getFunctionInfo") [Comb FuncCall ("AnaCompleteness","analyseCompleteness") [Var 1]],Comb (FuncPartCall 1) ("CurryDocRead","getFunctionInfo") [Comb FuncCall ("AnaIndeterminism","analyseIndeterminism") [Var 1]],Comb (FuncPartCall 1) ("CurryDocRead","getFunctionInfo") [Comb FuncCall ("AnaOpComplete","analyseOpCompleteness") [Var 1]]])),Func ("CurryDoc","makeDoc") 5 Public (FuncType (TCons ("CurryDocParams","DocParams") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("CurryDocRead","AnaInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])))))) (Rule [1,2,3,4,5] (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'R'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  's'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Var 5,Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]],Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("CurryDocRead","readComments") [Comb FuncCall ("Prelude","++") [Var 5,Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb (FuncPartCall 1) ("CurryDoc","makeDoc._#lambda11") [Var 4,Var 3,Var 1,Var 5,Var 2]]])),Func ("CurryDoc","makeDoc._#lambda11") 6 Private (FuncType (TCons ("CurryDocRead","AnaInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("CurryDocParams","DocParams") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("CurryDocRead","SourceLine") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))))))) (Rule [1,2,3,4,5,6] (Case  Flex (Var 6) [Branch (Pattern ("Prelude","(,)") [7,8]) (Comb FuncCall ("CurryDoc","makeDocWithComments") [Comb FuncCall ("CurryDocParams","docType") [Var 3],Var 3,Var 5,Var 2,Var 1,Var 4,Var 7,Var 8])])),Func ("CurryDoc","makeDocWithComments") 8 Public (FuncType (TCons ("CurryDocParams","DocType") []) (FuncType (TCons ("CurryDocParams","DocParams") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("CurryDocRead","AnaInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("CurryDocRead","SourceLine") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))))))))) (Rule [1,2,3,4,5,6,7,8] (Case  Flex (Var 1) [Branch (Pattern ("CurryDocParams","HtmlDoc") []) (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Time","getLocalTime") [],Comb (FuncPartCall 1) ("CurryDoc","makeDocWithComments._#lambda12") [Var 5,Var 4,Var 2,Var 7,Var 8,Var 6,Var 3]]),Branch (Pattern ("CurryDocParams","TexDoc") []) (Comb FuncCall ("CurryDoc","writeOutfile") [Var 2,Var 3,Var 4,Var 5,Var 6,Comb FuncCall ("CurryDocTeX","generateTexDocs") [Var 2,Var 5,Var 6,Var 7,Var 8]]),Branch (Pattern ("CurryDocParams","CDoc") []) (Comb FuncCall ("CurryDoc","writeOutfile") [Var 2,Var 3,Var 4,Var 5,Var 6,Comb FuncCall ("CurryDocCDoc","generateCDoc") [Var 6,Var 7,Var 8,Var 5]])])),Func ("CurryDoc","makeDocWithComments._#lambda12") 8 Private (FuncType (TCons ("CurryDocRead","AnaInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("CurryDocParams","DocParams") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("CurryDocRead","SourceLine") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Time","CalendarTime") []) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))))))))) (Rule [1,2,3,4,5,6,7,8] (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("CurryDoc","writeOutfile") [Var 3,Var 7,Var 2,Var 1,Var 6,Comb FuncCall ("CurryDocHtml","generateHtmlDocs") [Comb FuncCall ("CurryDoc","currydocVersion") [],Var 8,Var 3,Var 1,Var 6,Var 4,Var 5]],Comb FuncCall ("CurryDocHtml","translateSource2ColoredHtml") [Var 2,Var 6]])),Func ("CurryDoc","makeDocIfNecessary") 5 Public (FuncType (TCons ("CurryDocParams","DocParams") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("CurryDocRead","AnaInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])))))) (Rule [1,2,3,4,5] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("CurryDoc","findSourceFileInLoadPath") [Var 5],Comb (FuncPartCall 1) ("CurryDoc","makeDocIfNecessary._#lambda13") [Var 4,Var 3,Var 1,Var 2]])),Func ("CurryDoc","makeDocIfNecessary._#lambda13") 5 Private (FuncType (TCons ("CurryDocRead","AnaInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("CurryDocParams","DocParams") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])))))) (Rule [1,2,3,4,5] (Let [(6,Comb FuncCall ("Prelude","++") [Var 2,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '/'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("CurryDocRead","getLastName") [],Var 5],Case  Rigid (Comb FuncCall ("Prelude","==") [Comb FuncCall ("CurryDocParams","docType") [Var 3],Comb ConsCall ("CurryDocParams","HtmlDoc") []]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude","[]") []]]]]]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude","[]") []]]]])]]]])] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Directory","doesFileExist") [Var 6],Comb (FuncPartCall 1) ("CurryDoc","makeDocIfNecessary._#lambda13._#lambda14") [Var 1,Var 2,Var 6,Var 3,Var 5,Var 4]]))),Func ("CurryDoc","makeDocIfNecessary._#lambda13._#lambda14") 7 Private (FuncType (TCons ("CurryDocRead","AnaInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("CurryDocParams","DocParams") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])))))))) (Rule [1,2,3,4,5,6,7] (Case  Rigid (Comb FuncCall ("Prelude","not") [Var 7]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CurryDoc","copyOrMakeDoc") [Var 4,Var 6,Var 2,Var 1,Var 5]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Directory","getModificationTime") [Comb FuncCall ("FlatCurry","flatCurryFileName") [Var 5]],Comb (FuncPartCall 1) ("CurryDoc","makeDocIfNecessary._#lambda13._#lambda14._#lambda15") [Var 1,Var 2,Var 3,Var 4,Var 5,Var 6]])])),Func ("CurryDoc","makeDocIfNecessary._#lambda13._#lambda14._#lambda15") 7 Private (FuncType (TCons ("CurryDocRead","AnaInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("CurryDocParams","DocParams") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Time","ClockTime") []) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])))))))) (Rule [1,2,3,4,5,6,7] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Directory","getModificationTime") [Var 3],Comb (FuncPartCall 1) ("CurryDoc","makeDocIfNecessary._#lambda13._#lambda14._#lambda15._#lambda16") [Var 1,Var 7,Var 2,Var 4,Var 5,Var 6]])),Func ("CurryDoc","makeDocIfNecessary._#lambda13._#lambda14._#lambda15._#lambda16") 7 Private (FuncType (TCons ("CurryDocRead","AnaInfo") []) (FuncType (TCons ("Time","ClockTime") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("CurryDocParams","DocParams") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Time","ClockTime") []) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])))))))) (Rule [1,2,3,4,5,6,7] (Case  Rigid (Comb FuncCall ("Prelude","==") [Comb FuncCall ("Time","compareClockTime") [Var 2,Var 7],Comb ConsCall ("Prelude","GT") []]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CurryDoc","copyOrMakeDoc") [Var 4,Var 6,Var 3,Var 1,Var 5]),Branch (Pattern ("Prelude","False") []) (Case  Rigid (Var 6) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("CurryDoc","getImports") [Var 5],Comb (FuncPartCall 1) ("CurryDoc","makeDocIfNecessary._#lambda13._#lambda14._#lambda15._#lambda16._#lambda17") [Var 1,Var 3,Var 4,Var 6]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","done") [])])])),Func ("CurryDoc","makeDocIfNecessary._#lambda13._#lambda14._#lambda15._#lambda16._#lambda17") 5 Private (FuncType (TCons ("CurryDocRead","AnaInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("CurryDocParams","DocParams") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])))))) (Rule [1,2,3,4,5] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","mapIO_") [Comb (FuncPartCall 1) ("CurryDoc","makeDocIfNecessary") [Var 3,Var 4,Var 2,Var 1]],Var 5])),Func ("CurryDoc","getImports") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Let [(2,Comb FuncCall ("FlatCurry","flatCurryIntName") [Var 1])] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Directory","doesFileExist") [Var 2],Comb (FuncPartCall 1) ("CurryDoc","getImports._#lambda18") [Var 2,Var 1]]))),Func ("CurryDoc","getImports._#lambda18") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Comb FuncCall ("Prelude",">>=") [Case  Rigid (Var 3) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("FlatCurry","readFlatCurryFile") [Var 1]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("FlatCurry","readFlatCurryFile") [Comb FuncCall ("FlatCurry","flatCurryFileName") [Var 2]])],Comb (FuncPartCall 1) ("CurryDoc","getImports._#lambda18._#lambda19") []])),Func ("CurryDoc","getImports._#lambda18._#lambda19") 1 Private (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("FlatCurry","Prog") [2,3,4,5,6]) (Comb FuncCall ("Prelude","return") [Var 3])])),Func ("CurryDoc","copyOrMakeDoc") 5 Public (FuncType (TCons ("CurryDocParams","DocParams") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("CurryDocRead","AnaInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])))))) (Rule [1,2,3,4,5] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("CurryDoc","copyDocIfPossible") [Var 1,Var 3,Var 5],Comb (FuncPartCall 1) ("CurryDoc","copyOrMakeDoc._#lambda20") [Var 4,Var 3,Var 1,Var 5,Var 2]])),Func ("CurryDoc","copyOrMakeDoc._#lambda20") 6 Private (FuncType (TCons ("CurryDocRead","AnaInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("CurryDocParams","DocParams") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))))))) (Rule [1,2,3,4,5,6] (Case  Rigid (Var 6) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","done") []),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("CurryDoc","makeDoc") [Var 3,Var 5,Var 2,Var 1,Var 4])])),Func ("CurryDoc","copyDocIfPossible") 3 Public (FuncType (TCons ("CurryDocParams","DocParams") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","Bool") []])))) (Rule [1,2,3] (Case  Rigid (Comb FuncCall ("Prelude","==") [Comb FuncCall ("CurryDocParams","docType") [Var 1],Comb ConsCall ("CurryDocParams","TexDoc") []]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","return") [Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("Prelude","False") []) (Let [(4,Comb FuncCall ("Prelude","++") [Comb FuncCall ("CurryDoc","getDirName") [Var 3],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '/'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'D'),Comb ConsCall ("Prelude",":") [Lit (Charc  'O'),Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  '/'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("CurryDocRead","getLastName") [],Var 3]]])] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Directory","doesFileExist") [Comb FuncCall ("Prelude","++") [Var 4,Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb (FuncPartCall 1) ("CurryDoc","copyDocIfPossible._#lambda21") [Var 2,Var 4,Var 3]]))])),Func ("CurryDoc","copyDocIfPossible._#lambda21") 4 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","IO") [TCons ("Prelude","Bool") []]))))) (Rule [1,2,3,4] (Case  Rigid (Comb FuncCall ("Prelude","not") [Var 4]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","return") [Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Directory","getModificationTime") [Comb FuncCall ("FlatCurry","flatCurryFileName") [Var 3]],Comb (FuncPartCall 1) ("CurryDoc","copyDocIfPossible._#lambda21._#lambda22") [Var 1,Var 2]])])),Func ("CurryDoc","copyDocIfPossible._#lambda21._#lambda22") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Time","ClockTime") []) (TCons ("Prelude","IO") [TCons ("Prelude","Bool") []])))) (Rule [1,2,3] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Directory","getModificationTime") [Comb FuncCall ("Prelude","++") [Var 2,Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb (FuncPartCall 1) ("CurryDoc","copyDocIfPossible._#lambda21._#lambda22._#lambda23") [Var 3,Var 1,Var 2]])),Func ("CurryDoc","copyDocIfPossible._#lambda21._#lambda22._#lambda23") 4 Private (FuncType (TCons ("Time","ClockTime") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Time","ClockTime") []) (TCons ("Prelude","IO") [TCons ("Prelude","Bool") []]))))) (Rule [1,2,3,4] (Case  Rigid (Comb FuncCall ("Prelude","==") [Comb FuncCall ("Time","compareClockTime") [Var 1,Var 4],Comb ConsCall ("Prelude","GT") []]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","return") [Comb ConsCall ("Prelude","False") []]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Var 3,Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb FuncCall ("Prelude",">>") [Comb FuncCall ("System","system") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Prelude","++") [Var 3,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]],Var 2]]]],Comb FuncCall ("Prelude",">>") [Comb FuncCall ("System","system") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'p'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Prelude","++") [Var 3,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '_'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]],Var 2]]]],Comb FuncCall ("Prelude","return") [Comb ConsCall ("Prelude","True") []]]]])])),Func ("CurryDoc","getDirName") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Let [(2,Comb FuncCall ("Prelude","dropWhile") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","/=") [],Lit (Charc  '/')],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","reverse") [],Var 1]])] (Case  Rigid (Comb FuncCall ("Prelude","==") [Var 2,Comb ConsCall ("Prelude","[]") []]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","reverse") [],Comb FuncCall ("Prelude","tail") [Var 2]])]))),Func ("CurryDoc","readFlatCurryWithImports") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","IO") [TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("FlatCurry","TypeDecl") []],TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []],TCons ("Prelude","[]") [TCons ("FlatCurry","OpDecl") []]]])) (Rule [1] (Comb FuncCall ("CurryDoc","readFlatCurryWithImports.collectMods.112") [Var 1,Comb ConsCall ("Prelude","[]") []])),Func ("CurryDoc","readFlatCurryWithImports.collectMods.112") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","IO") [TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("FlatCurry","TypeDecl") []],TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []],TCons ("Prelude","[]") [TCons ("FlatCurry","OpDecl") []]]]))) (Rule [1,2] (Case  Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","return") [Comb ConsCall ("Prelude","(,,)") [Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude",":") [3,4]) (Case  Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Var 3],Var 2]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("CurryDoc","readFlatCurryWithImports.collectMods.112") [Var 4,Var 2]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Distribution","findFileInLoadPath") [Comb FuncCall ("Prelude","++") [Var 3,Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb (FuncPartCall 1) ("CurryDoc","readFlatCurryWithImports.collectMods.112._#lambda24") [Var 2,Var 3,Var 4]])])])),Func ("CurryDoc","readFlatCurryWithImports.collectMods.112._#lambda24") 4 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("FlatCurry","TypeDecl") []],TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []],TCons ("Prelude","[]") [TCons ("FlatCurry","OpDecl") []]]]))))) (Rule [1,2,3,4] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("FlatCurry","readFlatCurryFile") [Var 4],Comb (FuncPartCall 1) ("CurryDoc","readFlatCurryWithImports.collectMods.112._#lambda24._#lambda25") [Var 1,Var 2,Var 3]])),Func ("CurryDoc","readFlatCurryWithImports.collectMods.112._#lambda24._#lambda25") 4 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("Prelude","IO") [TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("FlatCurry","TypeDecl") []],TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []],TCons ("Prelude","[]") [TCons ("FlatCurry","OpDecl") []]]]))))) (Rule [1,2,3,4] (Case  Flex (Var 4) [Branch (Pattern ("FlatCurry","Prog") [5,6,7,8,9]) (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("CurryDoc","readFlatCurryWithImports.collectMods.112") [Comb FuncCall ("Prelude","++") [Var 3,Var 6],Comb ConsCall ("Prelude",":") [Var 2,Var 1]],Comb (FuncPartCall 1) ("CurryDoc","readFlatCurryWithImports.collectMods.112._#lambda24._#lambda25._#lambda26") [Var 8,Var 9,Var 7]])])),Func ("CurryDoc","readFlatCurryWithImports.collectMods.112._#lambda24._#lambda25._#lambda26") 4 Private (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","OpDecl") []]) (FuncType (TCons ("Prelude","[]") [TCons ("FlatCurry","TypeDecl") []]) (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("FlatCurry","TypeDecl") []],TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []],TCons ("Prelude","[]") [TCons ("FlatCurry","OpDecl") []]]) (TCons ("Prelude","IO") [TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TCons ("FlatCurry","TypeDecl") []],TCons ("Prelude","[]") [TCons ("FlatCurry","FuncDecl") []],TCons ("Prelude","[]") [TCons ("FlatCurry","OpDecl") []]]]))))) (Rule [1,2,3,4] (Case  Flex (Var 4) [Branch (Pattern ("Prelude","(,,)") [5,6,7]) (Comb FuncCall ("Prelude","return") [Comb ConsCall ("Prelude","(,,)") [Comb FuncCall ("Prelude","++") [Var 3,Var 5],Comb FuncCall ("Prelude","++") [Var 1,Var 6],Comb FuncCall ("Prelude","++") [Var 2,Var 7]]])])),Func ("CurryDoc","findSourceFileInLoadPath") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("Distribution","getLoadPathForFile") [Var 1],Comb (FuncPartCall 1) ("CurryDoc","findSourceFileInLoadPath._#lambda27") [Var 1]])),Func ("CurryDoc","findSourceFileInLoadPath._#lambda27") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))) (Rule [1,2] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("FileGoodies","lookupFileInPath") [Comb FuncCall ("FileGoodies","baseName") [Var 1],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude","[]") []]],Var 2],Comb (FuncPartCall 1) ("CurryDoc","findSourceFileInLoadPath._#lambda27._#lambda28") [Var 1]])),Func ("CurryDoc","findSourceFileInLoadPath._#lambda27._#lambda28") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))) (Rule [1,2] (Comb FuncCall ("Prelude","maybe") [Comb FuncCall ("Prelude","error") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'C'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'y'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'f'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  '!'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","return") [],Comb FuncCall ("FileGoodies","stripSuffix") []],Var 2])),Func ("CurryDoc","fileExtension") 1 Public (FuncType (TCons ("CurryDocParams","DocType") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case  Flex (Var 1) [Branch (Pattern ("CurryDocParams","HtmlDoc") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  'h'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'l'),Comb ConsCall ("Prelude","[]") []]]]]),Branch (Pattern ("CurryDocParams","TexDoc") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'x'),Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("CurryDocParams","CDoc") []) (Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude","[]") []]]]])])),Func ("CurryDoc","writeOutfile") 6 Public (FuncType (TCons ("CurryDocParams","DocParams") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("CurryDocRead","AnaInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))))))) (Rule [1,2,3,4,5,6] (Comb FuncCall ("Prelude",">>=") [Var 6,Comb (FuncPartCall 1) ("CurryDoc","writeOutfile._#lambda29") [Var 4,Var 3,Var 1,Var 5,Var 2]])),Func ("CurryDoc","writeOutfile._#lambda29") 6 Private (FuncType (TCons ("CurryDocRead","AnaInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("CurryDocParams","DocParams") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))))))) (Rule [1,2,3,4,5,6] (Comb FuncCall ("Prelude",">>=") [Comb FuncCall ("CurryDoc","getImports") [Var 4],Comb (FuncPartCall 1) ("CurryDoc","writeOutfile._#lambda29._#lambda30") [Var 1,Var 6,Var 2,Var 3,Var 4,Var 5]])),Func ("CurryDoc","writeOutfile._#lambda29._#lambda30") 7 Private (FuncType (TCons ("CurryDocRead","AnaInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("CurryDocParams","DocParams") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])))))))) (Rule [1,2,3,4,5,6,7] (Let [(8,Comb FuncCall ("Prelude","++") [Var 3,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '/'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("CurryDocRead","getLastName") [],Var 5],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("CurryDoc","fileExtension") [Comb FuncCall ("CurryDocParams","docType") [Var 4]]]]]])] (Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc  'W'),Comb ConsCall ("Prelude",":") [Lit (Charc  'r'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  'g'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  'd'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'c'),Comb ConsCall ("Prelude",":") [Lit (Charc  'u'),Comb ConsCall ("Prelude",":") [Lit (Charc  'm'),Comb ConsCall ("Prelude",":") [Lit (Charc  'e'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'a'),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'i'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  'n'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  't'),Comb ConsCall ("Prelude",":") [Lit (Charc  'o'),Comb ConsCall ("Prelude",":") [Lit (Charc  ' '),Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude","++") [Var 8,Comb ConsCall ("Prelude",":") [Lit (Charc  '"'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude",":") [Lit (Charc  '.'),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb FuncCall ("Prelude",">>") [Comb FuncCall ("Prelude","writeFile") [Var 8,Var 2],Case  Rigid (Var 6) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","mapIO_") [Comb (FuncPartCall 1) ("CurryDoc","makeDocIfNecessary") [Var 4,Var 6,Var 3,Var 1]],Var 7]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","done") [])]]])))] []