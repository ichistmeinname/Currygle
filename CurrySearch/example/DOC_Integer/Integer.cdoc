(CurryInfo (ModuleInfo "Integer" "Sergio Antoy" "A collection of common operations on integer numbers.\nMost operations make no assumption on the precision of integers.\nOperation <EM>bitNot</EM> is necessarily an exception.\n\n") [(FunctionInfo "pow" (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) "Integer" "The value of <EM>pow a b</EM> is <EM>a</EM>\nraised to the power of <EM>b</EM>.\nFails if <EM>b &lt; 0</EM>.\nExecutes in <EM>O(log b)</EM> steps.\n\n" False KnownRigid),(FunctionInfo "ilog" (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) "Integer" "The value of <EM>ilog n</EM> is the floor of the logarithm\nin the base 10 of <EM>n</EM>.\nFails if <EM>n &lt;= 0</EM>.\nFor positive integers, the returned value is\n1 less the number of digits in the decimal representation of <EM>n</EM>.\n\n" False KnownRigid),(FunctionInfo "isqrt" (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) "Integer" "The value of <EM>isqrt n</EM> is the floor\nof the square root of <EM>n</EM>.\nFails if <EM>n &lt; 0</EM>.\nExecutes in <EM>O(log n)</EM> steps, but there must be a better way.\n\n" False KnownRigid),(FunctionInfo "factorial" (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) "Integer" "The value of <EM>factorial n</EM> is the factorial of <EM>n</EM>.\nFails if <EM>n &lt; 0</EM>.\n\n" False KnownRigid),(FunctionInfo "binomial" (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) "Integer" "The value of <EM>binomial n m</EM> is \nn*(n-1)*...*(n-m+1)/m*(m-1)*...1\nFails if <EM>m &lt;= 0</EM> or <EM>n &lt; m</EM>.\n\n" False KnownRigid),(FunctionInfo "abs" (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) "Integer" "The value of <EM>abs n</EM> is the absolute value of <EM>n</EM>.\n\n" False KnownRigid),(FunctionInfo "max3" (FuncType (TVar 0) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) "Integer" "Returns the maximum of the three arguments.\n\n" False UnknownFR),(FunctionInfo "min3" (FuncType (TVar 0) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) "Integer" "Returns the minimum of the three arguments.\n\n" False UnknownFR),(FunctionInfo "maxlist" (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TVar 0)) "Integer" "Returns the maximum of a list of integer values.\nFails if the list is empty.\n\n" False KnownFlex),(FunctionInfo "minlist" (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TVar 0)) "Integer" "Returns the minimum of a list of integer values.\nFails if the list is empty.\n\n" False KnownFlex),(FunctionInfo "bitTrunc" (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) "Integer" "The value of <EM>bitTrunc n m</EM> is the value of the <EM>n</EM>\nleast significant bits of <EM>m</EM>.\n\n" False UnknownFR),(FunctionInfo "bitAnd" (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) "Integer" "Returns the bitwise AND of the two arguments.\n\n" False KnownRigid),(FunctionInfo "bitOr" (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) "Integer" "Returns the bitwise inclusive OR of the two arguments.\n\n" False KnownRigid),(FunctionInfo "bitNot" (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) "Integer" "Returns the bitwise NOT of the argument.\nSince integers have unlimited precision,\nonly the 32 least significant bits are computed.\n\n" False UnknownFR),(FunctionInfo "bitXor" (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) "Integer" "Returns the bitwise exclusive OR of the two arguments.\n\n" False KnownRigid),(FunctionInfo "even" (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Bool") [])) "Integer" "Returns whether an integer is even\n\n" False UnknownFR),(FunctionInfo "odd" (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Bool") [])) "Integer" "Returns whether an integer is odd\n\n" False UnknownFR)] [])