(CurryInfo (ModuleInfo "Unsafe" "Michael Hanus" "Library containing unsafe operations.\nThese operations should be carefully used (e.g., for testing or debugging).\nThese operations should not be used in application programs!\n\n") [(FunctionInfo "unsafePerformIO" (("Unsafe","unsafePerformIO"),(FuncType (TCons ("Prelude","IO") [(TVar 0)]) (TVar 0))) "Unsafe" "Performs and hides an I/O action in a computation (use with care!).\n" False UnknownFR),(FunctionInfo "trace" (("Unsafe","trace"),(FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (FuncType (TVar 0) (TVar 0)))) "Unsafe" "Prints the first argument as a side effect and behaves as identity on the\nsecond argument.\n" False UnknownFR),(FunctionInfo "spawnConstraint" (("Unsafe","spawnConstraint"),(FuncType (TCons ("Prelude","Success") []) (FuncType (TVar 0) (TVar 0)))) "Unsafe" "Spawns a constraint and returns the second argument.\nThis function can be considered as defined by\n\"<code>spawnConstraint c x | c = x</code>\".\nHowever, the evaluation of the constraint and the right-hand side\nare performed concurrently, i.e., a suspension of the constraint\ndoes not imply a blocking of the right-hand side and the\nright-hand side might be evaluated before the constraint is successfully\nsolved.\nThus, a computation might return a result even if some of the\nspawned constraints are suspended (use the PAKCS/Curry2Prolog option\n\"<code>+suspend</code>\" to show such suspended goals).\n" False UnknownFR),(FunctionInfo "isVar" (("Unsafe","isVar"),(FuncType (TVar 0) (TCons ("Prelude","Bool") []))) "Unsafe" "Tests whether the first argument evaluates to a currently unbound\nvariable (use with care!).\n" False UnknownFR),(FunctionInfo "identicalVar" (("Unsafe","identicalVar"),(FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])))) "Unsafe" "Tests whether both arguments evaluate to the identical currently unbound\nvariable (use with care!).\nFor instance, <code>identicalVar (id x) (fst (x,1))</code> evaluates to\n<code>True</code> whereas <code>identicalVar x y</code> and\n<code>let x=1 in identicalVar x x</code> evaluate to <code>False</code>\n" False UnknownFR),(FunctionInfo "showAnyTerm" (("Unsafe","showAnyTerm"),(FuncType (TVar 0) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]))) "Unsafe" "Transforms the normal form of a term into a string representation\nin standard prefix notation.\nThus, showAnyTerm evaluates its argument to normal form.\nThis function is similar to the function <code>ReadShowTerm.showTerm</code>\nbut it also transforms logic variables into a string representation\nthat can be read back by <code>Unsafe.read(s)AnyUnqualifiedTerm</code>.\nThus, the result depends on the evaluation and binding status of\nlogic variables so that it should be used with care!\n" False UnknownFR),(FunctionInfo "showAnyQTerm" (("Unsafe","showAnyQTerm"),(FuncType (TVar 0) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]))) "Unsafe" "Transforms the normal form of a term into a string representation\nin standard prefix notation.\nThus, showAnyQTerm evaluates its argument to normal form.\nThis function is similar to the function <code>ReadShowTerm.showQTerm</code>\nbut it also transforms logic variables into a string representation\nthat can be read back by <code>Unsafe.read(s)AnyQTerm</code>.\nThus, the result depends on the evaluation and binding status of\nlogic variables so that it should be used with care!\n" False UnknownFR),(FunctionInfo "readsAnyUnqualifiedTerm" (("Unsafe","readsAnyUnqualifiedTerm"),(FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TVar 0),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])))) "Unsafe" "Transform a string containing a term in standard prefix notation\nwithout module qualifiers into the corresponding data term.\nThe string might contain logical variable encodings produced by showAnyTerm.\nIn case of a successful parse, the result is a one element list\ncontaining a pair of the data term and the remaining unparsed string.\n" False KnownFlex),(FunctionInfo "readAnyUnqualifiedTerm" (("Unsafe","readAnyUnqualifiedTerm"),(FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TVar 0)))) "Unsafe" "Transforms a string containing a term in standard prefix notation\nwithout module qualifiers into the corresponding data term.\nThe string might contain logical variable encodings produced by showAnyTerm.\n" False KnownRigid),(FunctionInfo "readsAnyQTerm" (("Unsafe","readsAnyQTerm"),(FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TVar 0),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]))) "Unsafe" "Transforms a string containing a term in standard prefix notation\nwith qualified constructor names into the corresponding data term.\nThe string might contain logical variable encodings produced by showAnyQTerm.\nIn case of a successful parse, the result is a one element list\ncontaining a pair of the data term and the remaining unparsed string.\n" False UnknownFR),(FunctionInfo "readAnyQTerm" (("Unsafe","readAnyQTerm"),(FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TVar 0))) "Unsafe" "Transforms a string containing a term in standard prefix notation\nwith qualified constructor names into the corresponding data term.\nThe string might contain logical variable encodings produced by showAnyQTerm.\n" False KnownRigid),(FunctionInfo "showAnyExpression" (("Unsafe","showAnyExpression"),(FuncType (TVar 0) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]))) "Unsafe" "Transforms any expression (even not in normal form) into a string representation\nin standard prefix notation without module qualifiers.\nThe result depends on the evaluation and binding status of\nlogic variables so that it should be used with care!\n" False UnknownFR),(FunctionInfo "showAnyQExpression" (("Unsafe","showAnyQExpression"),(FuncType (TVar 0) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]))) "Unsafe" "Transforms any expression (even not in normal form) into a string representation\nin standard prefix notation with module qualifiers.\nThe result depends on the evaluation and binding status of\nlogic variables so that it should be used with care!\n" False UnknownFR),(FunctionInfo "readsAnyQExpression" (("Unsafe","readsAnyQExpression"),(FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TVar 0),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]))) "Unsafe" "Transforms a string containing an expression in standard prefix notation\nwith qualified constructor names into the corresponding expression.\nThe string might contain logical variable and defined function\nencodings produced by showAnyQExpression.\nIn case of a successful parse, the result is a one element list\ncontaining a pair of the expression and the remaining unparsed string.\n" False UnknownFR),(FunctionInfo "readAnyQExpression" (("Unsafe","readAnyQExpression"),(FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TVar 0))) "Unsafe" "Transforms a string containing an expression in standard prefix notation\nwith qualified constructor names into the corresponding expression.\nThe string might contain logical variable and defined function\nencodings produced by showAnyQExpression.\n" False KnownRigid)] [])