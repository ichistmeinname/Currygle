(CurryInfo (ModuleInfo "ReadShowTerm" "April 2005" "Michael Hanus" ["Char","Prelude"] "Library for converting ground terms to strings and vice versa.\n\n") [(FunctionInfo "showTerm" (("ReadShowTerm","showTerm"),(FuncType (TVar 0) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]))) "ReadShowTerm" "Transforms a ground(!) term into a string representation\nin standard prefix notation.\nThus, showTerm suspends until its argument is ground.\nThis function is similar to the prelude function <code>show</code>\nbut can read the string back with <code>readUnqualifiedTerm</code>\n(provided that the constructor names are unique without the module\nqualifier).\n" False UnknownFR),(FunctionInfo "showQTerm" (("ReadShowTerm","showQTerm"),(FuncType (TVar 0) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]))) "ReadShowTerm" "Transforms a ground(!) term into a string representation\nin standard prefix notation.\nThus, showTerm suspends until its argument is ground.\nNote that this function differs from the prelude function <code>show</code>\nsince it prefixes constructors with their module name\nin order to read them back with <code>readQTerm</code>.\n" False UnknownFR),(FunctionInfo "readsUnqualifiedTerm" (("ReadShowTerm","readsUnqualifiedTerm"),(FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TVar 0),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])))) "ReadShowTerm" "Transform a string containing a term in standard prefix notation\nwithout module qualifiers into the corresponding data term.\nThe first argument is a non-empty list of module qualifiers that are tried to\nprefix the constructor in the string in order to get the qualified constructors\n(that must be defined in the current program!).\nIn case of a successful parse, the result is a one element list\ncontaining a pair of the data term and the remaining unparsed string.\n" False KnownFlex),(FunctionInfo "readUnqualifiedTerm" (("ReadShowTerm","readUnqualifiedTerm"),(FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TVar 0)))) "ReadShowTerm" "Transforms a string containing a term in standard prefix notation\nwithout module qualifiers into the corresponding data term.\nThe first argument is a non-empty list of module qualifiers that are tried to\nprefix the constructor in the string in order to get the qualified constructors\n(that must be defined in the current program!).\n\nExample: <code>readUnqualifiedTerm [\"Prelude\"] \"Just 3\"</code>\nevaluates to <code>(Just 3)</code>\n" False KnownRigid),(FunctionInfo "readsTerm" (("ReadShowTerm","readsTerm"),(FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TVar 0),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]))) "ReadShowTerm" "For backward compatibility. Should not be used since their use can be problematic\nin case of constructors with identical names in different modules.\n" False UnknownFR),(FunctionInfo "readTerm" (("ReadShowTerm","readTerm"),(FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TVar 0))) "ReadShowTerm" "For backward compatibility. Should not be used since their use can be problematic\nin case of constructors with identical names in different modules.\n" False KnownRigid),(FunctionInfo "readsQTerm" (("ReadShowTerm","readsQTerm"),(FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TVar 0),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]))) "ReadShowTerm" "Transforms a string containing a term in standard prefix notation\nwith qualified constructor names into the corresponding data term.\nIn case of a successful parse, the result is a one element list\ncontaining a pair of the data term and the remaining unparsed string.\n" False UnknownFR),(FunctionInfo "readQTerm" (("ReadShowTerm","readQTerm"),(FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TVar 0))) "ReadShowTerm" "Transforms a string containing a term in standard prefix notation\nwith qualified constructor names into the corresponding data term.\n" False KnownRigid),(FunctionInfo "readQTermFile" (("ReadShowTerm","readQTermFile"),(FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","IO") [(TVar 0)]))) "ReadShowTerm" "Reads a file containing a string representation of a term\nin standard prefix notation and returns the corresponding data term.\n" False UnknownFR),(FunctionInfo "readQTermListFile" (("ReadShowTerm","readQTermListFile"),(FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","IO") [(TCons ("Prelude","[]") [(TVar 0)])]))) "ReadShowTerm" "Reads a file containing lines with string representations of terms\nof the same type and returns the corresponding list of data terms.\n" False UnknownFR),(FunctionInfo "writeQTermFile" (("ReadShowTerm","writeQTermFile"),(FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (FuncType (TVar 0) (TCons ("Prelude","IO") [(TCons ("Prelude","()") [])])))) "ReadShowTerm" "Writes a ground term into a file in standard prefix notation.\n" False UnknownFR),(FunctionInfo "writeQTermListFile" (("ReadShowTerm","writeQTermListFile"),(FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","IO") [(TCons ("Prelude","()") [])])))) "ReadShowTerm" "Writes a list of ground terms into a file.\nEach term is written into a separate line which might be useful\nto modify the file with a standard text editor.\n" False UnknownFR)] [])