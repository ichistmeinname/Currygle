(CurryInfo (ModuleInfo "Distribution" "Bernd Brassel, Michael Hanus" "This module contains functions to obtain information concerning the current\ndistribution of the Curry implementation.\nMost of the information is based on the external constants \n<b>curryCompiler...</b>.\n\n") [(FunctionInfo "curryCompiler" (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) "Distribution" "The name of the Curry compiler (e.g., \"pakcs\" or \"kics\").\n" False UnknownFR),(FunctionInfo "curryCompilerMajorVersion" (TCons ("Prelude","Int") []) "Distribution" "The major version number of the Curry compiler.\n" False UnknownFR),(FunctionInfo "curryCompilerMinorVersion" (TCons ("Prelude","Int") []) "Distribution" "The minor version number of the Curry compiler.\n" False UnknownFR),(FunctionInfo "curryRuntime" (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) "Distribution" "The name of the run-time environment (e.g., \"sicstus\", \"swi\", or \"ghc\")\n" False UnknownFR),(FunctionInfo "curryRuntimeMajorVersion" (TCons ("Prelude","Int") []) "Distribution" "The major version number of the Curry run-time environment.\n" False UnknownFR),(FunctionInfo "curryRuntimeMinorVersion" (TCons ("Prelude","Int") []) "Distribution" "The minor version number of the Curry run-time environment.\n" False UnknownFR),(FunctionInfo "rcFileName" (TCons ("Prelude","IO") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) "Distribution" "The name of the file specifying configuration parameters of the\ncurrent distribution. This file must have the usual format of\nproperty files (see description in module PropertyFile).\n" False UnknownFR),(FunctionInfo "rcFileContents" (TCons ("Prelude","IO") [(TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])]) "Distribution" "Returns the current configuration parameters of the distribution.\nThis action yields the list of pairs (var,val).\n" False UnknownFR),(FunctionInfo "getRcVar" (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","IO") [(TCons ("Prelude","Maybe") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])) "Distribution" "Look up a specific configuration variable as specified by user in his rc file.\nUppercase/lowercase is ignored for the variable names.\n" False UnknownFR),(FunctionInfo "getRcVars" (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (TCons ("Prelude","IO") [(TCons ("Prelude","[]") [(TCons ("Prelude","Maybe") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])])) "Distribution" "Look up configuration variables as specified by user in his rc file.\nUppercase/lowercase is ignored for the variable names.\n" False UnknownFR),(FunctionInfo "installDir" (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) "Distribution" "finding files in correspondence to compiler load path\nName of the main installation directory of the Curry compiler.\n" False UnknownFR),(FunctionInfo "currySubdir" (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) "Distribution" "Name of the sub directory where auxiliary files (.fint, .fcy, etc)\nare stored.\n" False UnknownFR),(FunctionInfo "inCurrySubdir" (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])) "Distribution" "Transforms a file name by adding the currySubDir to the file name.\n" False UnknownFR),(FunctionInfo "addCurrySubdir" (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])) "Distribution" "Transforms a directory name into the name of the corresponding\nsub directory containing auxiliary files.\n" False UnknownFR),(FunctionInfo "lookupFileInLoadPath" (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","IO") [(TCons ("Prelude","Maybe") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])) "Distribution" "Adds a directory name to a file by looking up the current load path.\nAn error message is delivered if there is no such file.\n" False UnknownFR),(FunctionInfo "findFileInLoadPath" (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","IO") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])) "Distribution" "Adds a directory name to a file by looking up the current load path.\nAn error message is delivered if there is no such file.\n" False UnknownFR),(FunctionInfo "readFirstFileInLoadPath" (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","IO") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])) "Distribution" "Returns the contents of the file found first in the current load path.\nAn error message is delivered if there is no such file.\n" False UnknownFR),(FunctionInfo "getLoadPath" (TCons ("Prelude","IO") [(TCons ("Prelude","[]") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]) "Distribution" "Returns the current path (list of directory names) that is\nused for loading modules.\n" False UnknownFR),(FunctionInfo "getLoadPathForFile" (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","IO") [(TCons ("Prelude","[]") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])) "Distribution" "Returns the current path (list of directory names) that is\nused for loading modules w.r.t. a given main module file.\nThe directory prefix of the module file (or \".\" if there is\nno such prefix) is the first element of the load path and the\nremaining elements are determined by the environment variables\nCURRYRPATH and PAKCSLIBPATH when using pakcs and\nthe entry of kicsrc when using kics, respectively.\n" False UnknownFR),(FunctionInfo "defaultParams" (TCons ("Distribution","FrontendParams") []) "Distribution" "The default parameters of the front end.\n" False UnknownFR),(FunctionInfo "setQuiet" (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Distribution","FrontendParams") []) (TCons ("Distribution","FrontendParams") []))) "Distribution" "Set quiet mode of the front end.\n" False KnownFlex),(FunctionInfo "setFullPath" (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (FuncType (TCons ("Distribution","FrontendParams") []) (TCons ("Distribution","FrontendParams") []))) "Distribution" "Set the full path of the front end.\nIf this parameter is set, the front end searches all modules\nin this path (instead of using the default path).\n" False KnownFlex),(FunctionInfo "setOutfile" (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (FuncType (TCons ("Distribution","FrontendParams") []) (TCons ("Distribution","FrontendParams") []))) "Distribution" "Set the outfile parameter of the front end.\nRelevant for HTML generation.\n" False KnownFlex),(FunctionInfo "setLogfile" (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (FuncType (TCons ("Distribution","FrontendParams") []) (TCons ("Distribution","FrontendParams") []))) "Distribution" "Set the logfile parameter of the front end.\nIf this parameter is set, all messages produced by the front end\nare stored in this file.\n" False KnownFlex),(FunctionInfo "quiet" (FuncType (TCons ("Distribution","FrontendParams") []) (TCons ("Prelude","Bool") [])) "Distribution" "Returns the value of the \"quiet\" parameter.\n" False KnownFlex),(FunctionInfo "fullPath" (FuncType (TCons ("Distribution","FrontendParams") []) (TCons ("Prelude","Maybe") [(TCons ("Prelude","[]") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])])) "Distribution" "Returns the full path parameter of the front end.\n" False KnownFlex),(FunctionInfo "outfile" (FuncType (TCons ("Distribution","FrontendParams") []) (TCons ("Prelude","Maybe") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])) "Distribution" "Returns the outfile parameter of the front end.\n" False KnownFlex),(FunctionInfo "logfile" (FuncType (TCons ("Distribution","FrontendParams") []) (TCons ("Prelude","Maybe") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])) "Distribution" "Returns the logfile parameter of the front end.\n" False KnownFlex),(FunctionInfo "callFrontend" (FuncType (TCons ("Distribution","FrontendTarget") []) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","IO") [(TCons ("Prelude","()") [])]))) "Distribution" "In order to make sure that compiler generated files (like .fcy, .fint, .acy)\nare up to date, one can call the front end of the Curry compiler with this action.\n" False UnknownFR),(FunctionInfo "callFrontendWithParams" (FuncType (TCons ("Distribution","FrontendTarget") []) (FuncType (TCons ("Distribution","FrontendParams") []) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","IO") [(TCons ("Prelude","()") [])])))) "Distribution" "In order to make sure that compiler generated files (like .fcy, .fint, .acy)\nare up to date, one can call the front end of the Curry compiler\nwith this action where various parameters can be set.\n" False UnknownFR)] [(TypeInfo "FrontendTarget" [(("Distribution","FCY"),[]),(("Distribution","FINT"),[]),(("Distribution","ACY"),[]),(("Distribution","UACY"),[]),(("Distribution","HTML"),[]),(("Distribution","CY"),[])] [] "Distribution" "Data type for representing the different target files that can be produced\nby the front end of the Curry compiler.\n" False),(TypeInfo "FrontendParams" [] [] "Distribution" "Abstract data type for representing parameters supported by the front end\nof the Curry compiler.\n" False)])