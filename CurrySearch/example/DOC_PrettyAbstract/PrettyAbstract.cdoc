(CurryInfo (ModuleInfo "PrettyAbstract" "Stefan Junge" "Library for pretty printing AbstractCurry programs.\nIn contrast to the library AbstractCurryPrinter,\nthis library implements a better human-readable pretty printing\nof AbstractCurry programs.\n\n") [(FunctionInfo "preludePrecs" (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]),(TCons ("Prelude","(,)") [(TCons ("AbstractCurry","CFixity") []),(TCons ("Prelude","Int") [])])])]) "PrettyAbstract" "the precedences of the operators in the <code>Prelude</code> module\n" False UnknownFR),(FunctionInfo "prettyCProg" (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("AbstractCurry","CurryProg") []) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]))) "PrettyAbstract" "(prettyCProg w prog) pretty prints the curry prog <code>prog</code> and\nfits it to a page width of <code>w</code> characters. \n" False UnknownFR),(FunctionInfo "prettyCTypeExpr" (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (FuncType (TCons ("AbstractCurry","CTypeExpr") []) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]))) "PrettyAbstract" "(prettyCTypeExpr mod typeExpr) pretty prints the type expression \n<code>typeExpr</code> of the module <code>mod</code> and fits it to a page\nwidth of 78 characters. \n" False UnknownFR),(FunctionInfo "prettyCTypes" (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (FuncType (TCons ("Prelude","[]") [(TCons ("AbstractCurry","CTypeDecl") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]))) "PrettyAbstract" "(prettyCTypes mod typeDecls) pretty prints the type declarations\n<code>typeDecls</code> of the module <code>mod</code> and fits it to a page\nwidth of 78 characters. \n" False UnknownFR),(FunctionInfo "prettyCOps" (FuncType (TCons ("Prelude","[]") [(TCons ("AbstractCurry","COpDecl") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])) "PrettyAbstract" "(prettyCOps opDecls) pretty prints the operators\n<code>opDecls</code> and fits it to a page width of 78 characters.\n" False UnknownFR),(FunctionInfo "showCProg" (FuncType (TCons ("AbstractCurry","CurryProg") []) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])) "PrettyAbstract" "(showCProg prog) pretty prints the curry prog\n<code>prog</code> and fits it to a page width of 78 characters.\n" False UnknownFR),(FunctionInfo "printCProg" (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","IO") [(TCons ("Prelude","()") [])])) "PrettyAbstract" "(printCProg modulname) pretty prints the typed Abstract Curry program of\n<code>modulname</code> produced by <code>AbstractCurry.readCurry</code> and \nfits it to a page width of 78 characters.\nThe output is standard io.\n" False UnknownFR),(FunctionInfo "printUCProg" (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","IO") [(TCons ("Prelude","()") [])])) "PrettyAbstract" "(printUCProg modulname) pretty prints the untyped Abstract Curry program of\n<code>modulname</code> produced by <code>AbstractCurry.readUntypedCurry</code> \nand fits it to a page width of 78 characters.\nThe output ist standard io.\n" False UnknownFR),(FunctionInfo "cprogDoc" (FuncType (TCons ("AbstractCurry","CurryProg") []) (TCons ("Pretty","Doc") [])) "PrettyAbstract" "(cprogDoc prog) creates a document of the Curry program\n<code>prog</code> and fits it to a page width of 78 characters.\n" False UnknownFR),(FunctionInfo "cprogDocWithPrecedences" (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]),(TCons ("Prelude","(,)") [(TCons ("AbstractCurry","CFixity") []),(TCons ("Prelude","Int") [])])])]) (FuncType (TCons ("AbstractCurry","CurryProg") []) (TCons ("Pretty","Doc") []))) "PrettyAbstract" "(cprogDocWithPrecedences precs prog) creates a document of the curry prog\n<code>prog</code> and fits it to a page width of 78 characters, \nthe precedences <code>precs</code> ensure a correct bracketing \nof infix operators\n" False KnownFlex),(FunctionInfo "precs" (FuncType (TCons ("Prelude","[]") [(TCons ("AbstractCurry","COpDecl") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]),(TCons ("Prelude","(,)") [(TCons ("AbstractCurry","CFixity") []),(TCons ("Prelude","Int") [])])])])) "PrettyAbstract" "generates a list of precedences\n" False UnknownFR)] [])