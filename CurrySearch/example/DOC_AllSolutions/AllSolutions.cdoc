(CurryInfo (ModuleInfo "AllSolutions" [] "This module contains a collection of functions for\nobtaining lists of solutions to constraints.\nThese operations are useful to encapsulate\nnon-deterministic operations between I/O actions in\norder to connects the worlds of logic and functional programming\nand to avoid non-determinism failures on the I/O level.\n\nIn contrast the \"old\" concept of encapsulated search\n(which could be applied to any subexpression in a computation),\nthe operations to encapsulate search in this module\nare I/O actions in order to avoid some anomalities\nin the old concept.\n") [(FunctionInfo "getAllSolutions" (FuncType (FuncType (TVar 0) (TCons ("Prelude","Success") [])) (TCons ("Prelude","IO") [(TCons ("Prelude","[]") [(TVar 0)])])) "AllSolutions" "Gets all solutions to a constraint (currently, via an incomplete\ndepth-first left-to-right strategy). Conceptually, all solutions\nare computed on a copy of the constraint, i.e., the evaluation\nof the constraint does not share any results. Moreover, this\nevaluation suspends if the constraints contain unbound variables.\nSimilar to Prolog's findall.\n" False UnknownFR),(FunctionInfo "getOneSolution" (FuncType (FuncType (TVar 0) (TCons ("Prelude","Success") [])) (TCons ("Prelude","IO") [(TCons ("Prelude","Maybe") [(TVar 0)])])) "AllSolutions" "Gets one solution to a constraint (currently, via an incomplete\nleft-to-right strategy). Returns Nothing if the search space\nis finitely failed.\n" False UnknownFR),(FunctionInfo "getOneValue" (FuncType (TVar 0) (TCons ("Prelude","IO") [(TCons ("Prelude","Maybe") [(TVar 0)])])) "AllSolutions" "Gets one value of an expression (currently, via an incomplete\nleft-to-right strategy). Returns Nothing if the search space\nis finitely failed.\n" False UnknownFR),(FunctionInfo "getAllFailures" (FuncType (TVar 0) (FuncType (FuncType (TVar 0) (TCons ("Prelude","Success") [])) (TCons ("Prelude","IO") [(TCons ("Prelude","[]") [(TVar 0)])]))) "AllSolutions" "Returns a list of values that do not satisfy a given constraint.\n" False UnknownFR),(FunctionInfo "getSearchTree" (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (FuncType (FuncType (TVar 1) (TCons ("Prelude","Success") [])) (TCons ("Prelude","IO") [(TCons ("AllSolutions","SearchTree") [(TVar 1),(TVar 0)])]))) "AllSolutions" "Computes a tree of solutions where the first argument determines\nthe branching level of the tree.\nFor each element in the list of the first argument,\nthe search tree contains a branch node with a child tree\nfor each value of this element. Moreover, evaluations of\nelements in the branch list are shared within corresponding subtrees.\n" False UnknownFR)] [(TypeInfo "SearchTree" [(("AllSolutions","SearchBranch"),[(TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TVar 1),(TCons ("AllSolutions","SearchTree") [(TVar 0),(TVar 1)])])])]),(("AllSolutions","Solutions"),[(TCons ("Prelude","[]") [(TVar 0)])])] [0,1] "AllSolutions" "A search tree for representing search structures.\n" False)])