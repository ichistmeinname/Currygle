(CurryInfo (ModuleInfo "Dynamic" "Michael Hanus" "Library for dynamic predicates.\n<a href=\"http://www.informatik.uni-kiel.de/~mh/papers/JFLP04_dyn.html\">\nThis paper</a> contains a description of the basic ideas\nbehind this library.\n\nCurrently, it is still experimental so that its interface might\nbe slightly changed in the future.\n\nA dynamic predicate <code>p</code> with arguments of type\n<code>t1,...,tn</code> must be declared by:\n\n<code>p :: t1 -> ... -> tn -> Dynamic</code><br/>\n<code>p = dynamic</code>\n\n\nA dynamic predicate where all facts should be persistently stored\nin the directory <code>DIR</code> must be declared by:\n\n<code>p :: t1 -> ... -> tn -> Dynamic</code><br/>\n<code>p = persistent \"file:DIR\"</code>\n\nRemark:\nThis library has been revised to the library <code>Database</code>.\nThus, it might not be further supported in the future.\n\n") [(FunctionInfo "dynamic" (TVar 0) "Dynamic" "<code>dynamic</code> is only used for the declaration of\na dynamic predicate and should not be used elsewhere.\n" False UnknownFR),(FunctionInfo "persistent" (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TVar 0)) "Dynamic" "<code>persistent</code> is only used for the declaration of\na persistent dynamic predicate and should not be used elsewhere.\n" False UnknownFR),(FunctionInfo "<>" (FuncType (TCons ("Dynamic","Dynamic") []) (FuncType (TCons ("Dynamic","Dynamic") []) (TCons ("Dynamic","Dynamic") []))) "Dynamic" "Combine two dynamics.\n" False UnknownFR),(FunctionInfo "|>" (FuncType (TCons ("Dynamic","Dynamic") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Dynamic","Dynamic") []))) "Dynamic" "Restrict a dynamic with a condition.\n" False UnknownFR),(FunctionInfo "|&>" (FuncType (TCons ("Dynamic","Dynamic") []) (FuncType (TCons ("Prelude","Success") []) (TCons ("Dynamic","Dynamic") []))) "Dynamic" "Restrict a dynamic with a constraint.\n" False UnknownFR),(FunctionInfo "assert" (FuncType (TCons ("Dynamic","Dynamic") []) (TCons ("Prelude","IO") [(TCons ("Prelude","()") [])])) "Dynamic" "Asserts new facts (without free variables!) about dynamic predicates.\nConditional dynamics are asserted only if the condition holds.\n" False ConflictFR),(FunctionInfo "retract" (FuncType (TCons ("Dynamic","Dynamic") []) (TCons ("Prelude","IO") [(TCons ("Prelude","Bool") [])])) "Dynamic" "Deletes facts (without free variables!) about dynamic predicates.\nConditional dynamics are retracted only if the condition holds.\nReturns True if all facts to be retracted exist,\notherwise False is returned.\n" False ConflictFR),(FunctionInfo "getKnowledge" (TCons ("Prelude","IO") [(FuncType (TCons ("Dynamic","Dynamic") []) (TCons ("Prelude","Success") []))]) "Dynamic" "Returns the knowledge at a particular point of time about dynamic\npredicates. If other processes made changes to persistent predicates,\nthese changes are read and made visible to the currently running program.\n" False UnknownFR),(FunctionInfo "getDynamicSolutions" (FuncType (FuncType (TVar 0) (TCons ("Dynamic","Dynamic") [])) (TCons ("Prelude","IO") [(TCons ("Prelude","[]") [(TVar 0)])])) "Dynamic" "Returns all answers to an abstraction on a dynamic expression.\nIf other processes made changes to persistent predicates,\nthese changes are read and made visible to the currently running program.\n" False UnknownFR),(FunctionInfo "getDynamicSolution" (FuncType (FuncType (TVar 0) (TCons ("Dynamic","Dynamic") [])) (TCons ("Prelude","IO") [(TCons ("Prelude","Maybe") [(TVar 0)])])) "Dynamic" "Returns an answer to an abstraction on a dynamic expression.\nReturns Nothing if no answer exists.\nIf other processes made changes to persistent predicates,\nthese changes are read and made visible to the currently running program.\n" False UnknownFR),(FunctionInfo "isKnown" (FuncType (TCons ("Dynamic","Dynamic") []) (TCons ("Prelude","IO") [(TCons ("Prelude","Bool") [])])) "Dynamic" "Returns True if there exists the argument facts (without free variables!)\nand False, otherwise.\n" False KnownFlex),(FunctionInfo "transaction" (FuncType (TCons ("Prelude","IO") [(TVar 0)]) (TCons ("Prelude","IO") [(TCons ("Prelude","Maybe") [(TVar 0)])])) "Dynamic" "Perform an action (usually containing updates of various\ndynamic predicates) as a single transaction.\nThis is the preferred way to execute any changes to persistent\ndynamic predicates if there might be more than one process\nthat may modify the definition of such predicates in parallel.\n\nBefore the transaction is executed, the access to all persistent\npredicates is locked (i.e., no other process can perform a\ntransaction in parallel).\nAfter the successful transaction, the access is unlocked so that\nthe updates performed in this transaction become persistent and\nvisible to other processes.\nOtherwise (i.e., in case of a failure or abort of the transaction),\nthe changes of the transaction to persistent predicates are\nignored and Nothing is returned.\n\nIn general, a transaction should terminate and all failures inside\na transaction should be handled (execept for abortTransaction).\nIf a transaction is externally interrupted (e.g., by killing the process),\nsome locks might never be removed. However, they\ncan be explicitly removed by deleting the corresponding lock files\nreported at startup time.\n\nNested transactions are not supported and lead to a failure.\n" False UnknownFR),(FunctionInfo "transactionWithErrorCatch" (FuncType (TCons ("Prelude","IO") [(TVar 0)]) (TCons ("Prelude","IO") [(TCons ("Prelude","Either") [(TVar 0),(TCons ("Prelude","IOError") [])])])) "Dynamic" "Perform an action (usually containing updates of various\ndynamic predicates) as a single transaction.\nThis is similar to <code>transaction</code> but an execution\nerror is caught and returned instead of printing it.\n" False UnknownFR),(FunctionInfo "abortTransaction" (TCons ("Prelude","IO") [(TVar 0)]) "Dynamic" "Aborts the current transaction. If a transaction is aborted,\nthe remaining actions of the transaction are not executed\nand all changes to <b>persistent</b> dynamic predicates\nmade in this transaction are ignored.\n\nabortTransaction should only be used in a transaction.\nAlthough the execution of abortTransaction always fails\n(basically, it writes an abort record in log files, unlock them\nand then fails), the failure is handled inside <code>transaction</code>.\n" False UnknownFR)] [(TypeInfo "Dynamic" [] [] "Dynamic" "The general type of dynamic predicates.\n" False)])