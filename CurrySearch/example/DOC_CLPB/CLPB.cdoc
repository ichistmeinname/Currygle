(CurryInfo (ModuleInfo "CLPB" "Sebastian Fischer" "This library provides a Boolean Constraint Solver based on BDDs.\n\n") [(FunctionInfo "true" (TCons ("CLPB","Boolean") []) "CLPB" "The always satisfied constraint\n" False UnknownFR),(FunctionInfo "false" (TCons ("CLPB","Boolean") []) "CLPB" "The never satisfied constraint\n" False UnknownFR),(FunctionInfo "neg" (FuncType (TCons ("CLPB","Boolean") []) (TCons ("CLPB","Boolean") [])) "CLPB" "Result is true iff argument is false.\n" False KnownFlex),(FunctionInfo ".&&" (FuncType (TCons ("CLPB","Boolean") []) (FuncType (TCons ("CLPB","Boolean") []) (TCons ("CLPB","Boolean") []))) "CLPB" "Result is true iff both arguments are true.\n" False KnownFlex),(FunctionInfo ".||" (FuncType (TCons ("CLPB","Boolean") []) (FuncType (TCons ("CLPB","Boolean") []) (TCons ("CLPB","Boolean") []))) "CLPB" "Result is true iff at least one argument is true.\n" False KnownFlex),(FunctionInfo "./=" (FuncType (TCons ("CLPB","Boolean") []) (FuncType (TCons ("CLPB","Boolean") []) (TCons ("CLPB","Boolean") []))) "CLPB" "Result is true iff exactly one argument is true.\n" False KnownFlex),(FunctionInfo ".==" (FuncType (TCons ("CLPB","Boolean") []) (FuncType (TCons ("CLPB","Boolean") []) (TCons ("CLPB","Boolean") []))) "CLPB" "Result is true iff both arguments are equal.\n" False UnknownFR),(FunctionInfo ".<=" (FuncType (TCons ("CLPB","Boolean") []) (FuncType (TCons ("CLPB","Boolean") []) (TCons ("CLPB","Boolean") []))) "CLPB" "Result is true iff the first argument implies the second.\n" False UnknownFR),(FunctionInfo ".>=" (FuncType (TCons ("CLPB","Boolean") []) (FuncType (TCons ("CLPB","Boolean") []) (TCons ("CLPB","Boolean") []))) "CLPB" "Result is true iff the second argument implies the first.\n" False UnknownFR),(FunctionInfo ".<" (FuncType (TCons ("CLPB","Boolean") []) (FuncType (TCons ("CLPB","Boolean") []) (TCons ("CLPB","Boolean") []))) "CLPB" "Result is true iff the first argument is false and the second is true.\n" False UnknownFR),(FunctionInfo ".>" (FuncType (TCons ("CLPB","Boolean") []) (FuncType (TCons ("CLPB","Boolean") []) (TCons ("CLPB","Boolean") []))) "CLPB" "Result is true iff the first argument is true and the second is false.\n" False UnknownFR),(FunctionInfo "count" (FuncType (TCons ("Prelude","[]") [(TCons ("CLPB","Boolean") [])]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])]) (TCons ("CLPB","Boolean") []))) "CLPB" "Result is true iff the count of valid constraints in the first list\nis an element of the second list.\n" False UnknownFR),(FunctionInfo "exists" (FuncType (TCons ("CLPB","Boolean") []) (FuncType (TCons ("CLPB","Boolean") []) (TCons ("CLPB","Boolean") []))) "CLPB" "Result is true, if the first argument is a variable which can be\ninstantiated such that the second argument is true.\n" False KnownFlex),(FunctionInfo "satisfied" (FuncType (TCons ("CLPB","Boolean") []) (TCons ("Prelude","Success") [])) "CLPB" "Checks the consistency of the constraint with regard to the accumulated\nconstraints, and, if the check succeeds, tells the constraint.\n" False KnownFlex),(FunctionInfo "check" (FuncType (TCons ("CLPB","Boolean") []) (TCons ("Prelude","Bool") [])) "CLPB" "Asks whether the argument (or its negation) is now entailed by the\naccumulated constraints. Fails if it is not. \n" False KnownFlex),(FunctionInfo "bound" (FuncType (TCons ("Prelude","[]") [(TCons ("CLPB","Boolean") [])]) (TCons ("Prelude","Success") [])) "CLPB" "Instantiates given variables with regard to the accumulated constraints.\n" False UnknownFR),(FunctionInfo "simplify" (FuncType (TCons ("CLPB","Boolean") []) (TCons ("CLPB","Boolean") [])) "CLPB" "Simplifies the argument with regard to the accumulated constraints.\n" False UnknownFR),(FunctionInfo "evaluate" (FuncType (TCons ("CLPB","Boolean") []) (TCons ("Prelude","Bool") [])) "CLPB" "Evaluates the argument with regard to the accumulated constraints.\n" False UnknownFR)] [(TypeInfo "Boolean" [] [] "CLPB" [] False)])