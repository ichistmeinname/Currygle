(CurryInfo (ModuleInfo "SetRBT0" "Johannes Koj, Michael Hanus" "OLD (OBSOLETE) Version of a\nlibrary with an implementation of sets as red-black trees.\n<P>\nAll the operations on sets are generic, i.e., one has to provide\nan explicit order predicate (\"<CODE>cmp</CODE>\" below) on elements.\n\n") [(FunctionInfo "emptySetRBT" (TCons ("SetRBT0","SetRBT") [(TVar 0)]) "SetRBT0" "Returns an empty set, i.e., an empty red-black tree.\n" False UnknownFR),(FunctionInfo "elemRBT" (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (TVar 0) (FuncType (TCons ("SetRBT0","SetRBT") [(TVar 0)]) (TCons ("Prelude","Bool") [])))) "SetRBT0" "Returns true if an element is contained in a (red-black tree) set.\n" False ConflictFR),(FunctionInfo "insertRBT" (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (TVar 0) (FuncType (TCons ("SetRBT0","SetRBT") [(TVar 0)]) (TCons ("SetRBT0","SetRBT") [(TVar 0)])))) "SetRBT0" "Inserts an element into a set if it is not already there.\nThe first argument is the order on elements.\n" False UnknownFR),(FunctionInfo "insertMultiRBT" (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (TVar 0) (FuncType (TCons ("SetRBT0","SetRBT") [(TVar 0)]) (TCons ("SetRBT0","SetRBT") [(TVar 0)])))) "SetRBT0" "Inserts an element into a multiset.\nThus, the same element can have several occurrences in the multiset.\n" False UnknownFR),(FunctionInfo "setRBT2list" (FuncType (TCons ("SetRBT0","SetRBT") [(TVar 0)]) (TCons ("Prelude","[]") [(TVar 0)])) "SetRBT0" "Transforms a (red-black tree) set into an ordered list of its elements.\n" False UnknownFR),(FunctionInfo "unionRBT" (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (TCons ("SetRBT0","SetRBT") [(TVar 0)]) (FuncType (TCons ("SetRBT0","SetRBT") [(TVar 0)]) (TCons ("SetRBT0","SetRBT") [(TVar 0)])))) "SetRBT0" "Computes the union of two (red-black tree) sets.\nThis is done by inserting all elements of the first set into the\nsecond set.\n" False UnknownFR),(FunctionInfo "intersectRBT" (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (TCons ("SetRBT0","SetRBT") [(TVar 0)]) (FuncType (TCons ("SetRBT0","SetRBT") [(TVar 0)]) (TCons ("SetRBT0","SetRBT") [(TVar 0)])))) "SetRBT0" "Computes the intersection of two (red-black tree) sets.\nThis is done by inserting all elements of the first set\ncontained into the second set into a new set.\n" False UnknownFR),(FunctionInfo "sortRBT" (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","[]") [(TVar 0)]))) "SetRBT0" "Generic sort based on insertion into red-black trees.\n" False UnknownFR)] [(TypeInfo "SetRBT" [] [0] "SetRBT0" "The structure of red-black trees.\n" False)])