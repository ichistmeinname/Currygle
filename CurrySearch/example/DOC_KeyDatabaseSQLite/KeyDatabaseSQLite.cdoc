(CurryInfo (ModuleInfo "KeyDatabaseSQLite" "Sebastian Fischer with changes by Michael Hanus" "This module provides a general interface for databases (persistent\npredicates) where each entry consists of a key and an info\npart. The key is an integer and the info is arbitrary. All\nfunctions are parameterized with a dynamic predicate that takes an\ninteger key as a first parameter.\n\nThis module reimplements the interface of the module\n`KeyDatabase` based on the\n[SQLite](http://sqlite.org/) database engine.\nIn order to use it you need to have `sqlite3` in your\n`PATH` environment variable or adjust the value of the\nconstant `path'to'sqlite3`.\n\nPrograms that use the `KeyDatabase` module can be adjusted\nto use this module instead by replacing the imports of\n`Dynamic`, `Database`, and\n`KeyDatabase` with this module and changing the declarations\nof database predicates to use the function `persistentSQLite`\ninstead of `dynamic` or `persistent`.\nThis module redefines the types `Dynamic`,\n`Query`, and `Transaction` and although both\nimplementations can be used in the same program (by importing modules\nqualified) they cannot be mixed.\n\nCompared with the interface of `KeyDatabase`, this module\nlacks definitions for `index`, `sortByIndex`,\n`groupByIndex`, and `runTNA` and adds the\nfunctions `deleteDBEntries` and `closeDBHandles`.\n\n") [(FunctionInfo "runQ" (FuncType (TCons ("KeyDatabaseSQLite","Query") [(TVar 0)]) (TCons ("Prelude","IO") [(TVar 0)])) "KeyDatabaseSQLite" "Runs a database query in the IO monad.\n" False KnownFlex),(FunctionInfo "transformQ" (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (TCons ("KeyDatabaseSQLite","Query") [(TVar 0)]) (TCons ("KeyDatabaseSQLite","Query") [(TVar 1)]))) "KeyDatabaseSQLite" "Applies a function to the result of a database query.\n" False UnknownFR),(FunctionInfo "runT" (FuncType (TCons ("KeyDatabaseSQLite","Transaction") [(TVar 0)]) (TCons ("Prelude","IO") [(TCons ("Prelude","Either") [(TVar 0),(TCons ("KeyDatabaseSQLite","TError") [])])])) "KeyDatabaseSQLite" "Runs a transaction atomically in the IO monad.\n\nTransactions are <em>immediate</em>, which means that locks are\nacquired on all databases as soon as the transaction is\nstarted. After one transaction is started, no other database\nconnection will be able to write to the database or start a\ntransaction. Other connections <em>can</em> read the database\nduring a transaction of another process.\n\nThe choice to use immediate rather than deferred transactions is\nconservative. It might also be possible to allow multiple\nsimultaneous transactions that lock tables on the first database\naccess (which is the default in SQLite). However this leads to\nunpredictable order in which locks are taken when multiple\ndatabases are involved. The current implementation fixes the\nlocking order by sorting databases by their name and locking them\nin order immediately when a transaction begins.\n\nMore information on \n<a href=\"http://sqlite.org/lang_transaction.html\">transactions</a>\nin SQLite is available online.\n" False UnknownFR),(FunctionInfo "runJustT" (FuncType (TCons ("KeyDatabaseSQLite","Transaction") [(TVar 0)]) (TCons ("Prelude","IO") [(TVar 0)])) "KeyDatabaseSQLite" "Executes a possibly composed transaction on the current state\nof dynamic predicates as a single transaction.\nSimilar to <code>runT</code> but a run-time error is raised\nif the execution of the transaction fails.\n" False UnknownFR),(FunctionInfo "getDB" (FuncType (TCons ("KeyDatabaseSQLite","Query") [(TVar 0)]) (TCons ("KeyDatabaseSQLite","Transaction") [(TVar 0)])) "KeyDatabaseSQLite" "Lifts a database query to the transaction type such that it can be\ncomposed with other transactions. Run-time errors that occur\nduring the execution of the given query are transformed into\ntransaction errors.\n" False UnknownFR),(FunctionInfo "returnT" (FuncType (TVar 0) (TCons ("KeyDatabaseSQLite","Transaction") [(TVar 0)])) "KeyDatabaseSQLite" "Returns the given value in a transaction that does not access the\ndatabase.\n" False UnknownFR),(FunctionInfo "doneT" (TCons ("KeyDatabaseSQLite","Transaction") [(TCons ("Prelude","()") [])]) "KeyDatabaseSQLite" "Returns the unit value in a transaction that does not access the\ndatabase. Useful to ignore results when composing transactions.\n" False UnknownFR),(FunctionInfo "errorT" (FuncType (TCons ("KeyDatabaseSQLite","TError") []) (TCons ("KeyDatabaseSQLite","Transaction") [(TVar 0)])) "KeyDatabaseSQLite" "Aborts a transaction with an error.\n" False UnknownFR),(FunctionInfo "failT" (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("KeyDatabaseSQLite","Transaction") [(TVar 0)])) "KeyDatabaseSQLite" "Aborts a transaction with a user-defined error message.\n" False UnknownFR),(FunctionInfo "|>>=" (FuncType (TCons ("KeyDatabaseSQLite","Transaction") [(TVar 0)]) (FuncType (FuncType (TVar 0) (TCons ("KeyDatabaseSQLite","Transaction") [(TVar 1)])) (TCons ("KeyDatabaseSQLite","Transaction") [(TVar 1)]))) "KeyDatabaseSQLite" "Combines two transactions into a single transaction that executes\nboth in sequence. The first transaction is executed, its result\npassed to the function which computes the second transaction,\nwhich is then executed to compute the final result.\n\nIf the first transaction is aborted with an error, the second\ntransaction is not executed.\n" False KnownFlex),(FunctionInfo "|>>" (FuncType (TCons ("KeyDatabaseSQLite","Transaction") [(TVar 0)]) (FuncType (TCons ("KeyDatabaseSQLite","Transaction") [(TVar 1)]) (TCons ("KeyDatabaseSQLite","Transaction") [(TVar 1)]))) "KeyDatabaseSQLite" "Combines two transactions to execute them in sequence. The result of\nthe first transaction is ignored.\n" False UnknownFR),(FunctionInfo "sequenceT" (FuncType (TCons ("Prelude","[]") [(TCons ("KeyDatabaseSQLite","Transaction") [(TVar 0)])]) (TCons ("KeyDatabaseSQLite","Transaction") [(TCons ("Prelude","[]") [(TVar 0)])])) "KeyDatabaseSQLite" "Executes a list of transactions sequentially and computes a list\nof all results.\n" False UnknownFR),(FunctionInfo "sequenceT_" (FuncType (TCons ("Prelude","[]") [(TCons ("KeyDatabaseSQLite","Transaction") [(TVar 0)])]) (TCons ("KeyDatabaseSQLite","Transaction") [(TCons ("Prelude","()") [])])) "KeyDatabaseSQLite" "Executes a list of transactions sequentially, ignoring their\nresults.\n" False UnknownFR),(FunctionInfo "mapT" (FuncType (FuncType (TVar 0) (TCons ("KeyDatabaseSQLite","Transaction") [(TVar 1)])) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("KeyDatabaseSQLite","Transaction") [(TCons ("Prelude","[]") [(TVar 1)])]))) "KeyDatabaseSQLite" "Applies a function that yields transactions to all elements of a\nlist, executes the transaction sequentially, and collects their\nresults.\n" False UnknownFR),(FunctionInfo "mapT_" (FuncType (FuncType (TVar 0) (TCons ("KeyDatabaseSQLite","Transaction") [(TVar 1)])) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("KeyDatabaseSQLite","Transaction") [(TCons ("Prelude","()") [])]))) "KeyDatabaseSQLite" "Applies a function that yields transactions to all elements of a\nlist, executes the transactions sequentially, and ignores their\nresults.\n" False UnknownFR),(FunctionInfo "persistentSQLite" (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("KeyDatabaseSQLite","Dynamic") [])))))) "KeyDatabaseSQLite" "This function is used instead of <code>dynamic</code> or\n<code>persistent</code> to declare predicates whose facts are stored\nin an SQLite database.\n\nIf the provided database or the table do not exist they are created\nautomatically when the declared predicate is accessed for the first time.\n\nMultiple column names can be provided if the second argument of\nthe predicate is a tuple with a matching arity. Other record types\nare not supported. If no column names are provided a table with a\nsingle column called <code>info</code> is created. Columns of name\n<code>_rowid_</code> are not supported and lead to a run-time\nerror.\n\n" False KnownRigid),(FunctionInfo "existsDBKey" (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("KeyDatabaseSQLite","Dynamic") []))) (FuncType (TCons ("Prelude","Int") []) (TCons ("KeyDatabaseSQLite","Query") [(TCons ("Prelude","Bool") [])]))) "KeyDatabaseSQLite" "Checks whether the predicate has an entry with the given key.\n" False UnknownFR),(FunctionInfo "allDBKeys" (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("KeyDatabaseSQLite","Dynamic") []))) (TCons ("KeyDatabaseSQLite","Query") [(TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])])])) "KeyDatabaseSQLite" "Returns a list of all stored keys. Do not use this function unless\nthe database is small.\n" False UnknownFR),(FunctionInfo "allDBInfos" (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("KeyDatabaseSQLite","Dynamic") []))) (TCons ("KeyDatabaseSQLite","Query") [(TCons ("Prelude","[]") [(TVar 0)])])) "KeyDatabaseSQLite" "Returns a list of all info parts of stored entries. Do not use this\nfunction unless the database is small.\n" False UnknownFR),(FunctionInfo "allDBKeyInfos" (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("KeyDatabaseSQLite","Dynamic") []))) (TCons ("KeyDatabaseSQLite","Query") [(TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","Int") []),(TVar 0)])])])) "KeyDatabaseSQLite" "Returns a list of all stored entries. Do not use this function\nunless the database is small.\n" False UnknownFR),(FunctionInfo "@=" (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("KeyDatabaseSQLite","ColVal") []))) "KeyDatabaseSQLite" "Constructs a value restriction for the column given as first argument\n" False UnknownFR),(FunctionInfo "someDBKeys" (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("KeyDatabaseSQLite","Dynamic") []))) (FuncType (TCons ("Prelude","[]") [(TCons ("KeyDatabaseSQLite","ColVal") [])]) (TCons ("KeyDatabaseSQLite","Query") [(TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])])]))) "KeyDatabaseSQLite" "Returns a list of those stored keys where the corresponding info\npart matches the gioven value restriction. Safe to use even on\nlarge databases if the number of results is small.\n" False UnknownFR),(FunctionInfo "someDBInfos" (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("KeyDatabaseSQLite","Dynamic") []))) (FuncType (TCons ("Prelude","[]") [(TCons ("KeyDatabaseSQLite","ColVal") [])]) (TCons ("KeyDatabaseSQLite","Query") [(TCons ("Prelude","[]") [(TVar 0)])]))) "KeyDatabaseSQLite" "Returns a list of those info parts of stored entries that match\nthe given value restrictions for columns. Safe to use even on\nlarge databases if the number of results is small.\n" False UnknownFR),(FunctionInfo "someDBKeyInfos" (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("KeyDatabaseSQLite","Dynamic") []))) (FuncType (TCons ("Prelude","[]") [(TCons ("KeyDatabaseSQLite","ColVal") [])]) (TCons ("KeyDatabaseSQLite","Query") [(TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","Int") []),(TVar 0)])])]))) "KeyDatabaseSQLite" "Returns a list of those entries that match the given value\nrestrictions for columns. Safe to use even on large databases if\nthe number of results is small.\n" False UnknownFR),(FunctionInfo "someDBKeyProjections" (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("KeyDatabaseSQLite","Dynamic") []))) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])]) (FuncType (TCons ("Prelude","[]") [(TCons ("KeyDatabaseSQLite","ColVal") [])]) (TCons ("KeyDatabaseSQLite","Query") [(TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","Int") []),(TVar 1)])])])))) "KeyDatabaseSQLite" "Returns a list of column projections on\nthose entries that match the given value\nrestrictions for columns. Safe to use even on large databases if\nthe number of results is small.\n" False UnknownFR),(FunctionInfo "getDBInfo" (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("KeyDatabaseSQLite","Dynamic") []))) (FuncType (TCons ("Prelude","Int") []) (TCons ("KeyDatabaseSQLite","Query") [(TCons ("Prelude","Maybe") [(TVar 0)])]))) "KeyDatabaseSQLite" "Queries the information stored under the given key. Yields\n<code>Nothing</code> if the given key is not present.\n" False UnknownFR),(FunctionInfo "getDBInfos" (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("KeyDatabaseSQLite","Dynamic") []))) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])]) (TCons ("KeyDatabaseSQLite","Query") [(TCons ("Prelude","Maybe") [(TCons ("Prelude","[]") [(TVar 0)])])]))) "KeyDatabaseSQLite" "Queries the information stored under the given keys. Yields\n<code>Nothing</code> if a given key is not present.\n" False UnknownFR),(FunctionInfo "deleteDBEntry" (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("KeyDatabaseSQLite","Dynamic") []))) (FuncType (TCons ("Prelude","Int") []) (TCons ("KeyDatabaseSQLite","Transaction") [(TCons ("Prelude","()") [])]))) "KeyDatabaseSQLite" "Deletes the information stored under the given key. If the given\nkey does not exist this transaction is silently ignored and no\nerror is raised.\n" False UnknownFR),(FunctionInfo "deleteDBEntries" (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("KeyDatabaseSQLite","Dynamic") []))) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])]) (TCons ("KeyDatabaseSQLite","Transaction") [(TCons ("Prelude","()") [])]))) "KeyDatabaseSQLite" "Deletes the information stored under the given keys. No error is\nraised if (some of) the keys do not exist.\n" False UnknownFR),(FunctionInfo "updateDBEntry" (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("KeyDatabaseSQLite","Dynamic") []))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("KeyDatabaseSQLite","Transaction") [(TCons ("Prelude","()") [])])))) "KeyDatabaseSQLite" "Updates the information stored under the given key. The\ntransaction is aborted with a <code>KeyNotExistsError</code> if\nthe given key is not present in the database.\n" False UnknownFR),(FunctionInfo "newDBEntry" (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("KeyDatabaseSQLite","Dynamic") []))) (FuncType (TVar 0) (TCons ("KeyDatabaseSQLite","Transaction") [(TCons ("Prelude","Int") [])]))) "KeyDatabaseSQLite" "Stores new information in the database and yields the newly\ngenerated key.\n" False UnknownFR),(FunctionInfo "newDBKeyEntry" (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("KeyDatabaseSQLite","Dynamic") []))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("KeyDatabaseSQLite","Transaction") [(TCons ("Prelude","()") [])])))) "KeyDatabaseSQLite" "Stores a new entry in the database under a given key.\nThe transaction fails if the key already exists.\n" False UnknownFR),(FunctionInfo "cleanDB" (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("KeyDatabaseSQLite","Dynamic") []))) (TCons ("KeyDatabaseSQLite","Transaction") [(TCons ("Prelude","()") [])])) "KeyDatabaseSQLite" "Deletes all entries from the database associated with a predicate.\n" False UnknownFR),(FunctionInfo "closeDBHandles" (TCons ("Prelude","IO") [(TCons ("Prelude","()") [])]) "KeyDatabaseSQLite" "Closes all database connections. Should be called when no more\ndatabase access will be necessary.\n" False UnknownFR),(FunctionInfo "showTError" (FuncType (TCons ("KeyDatabaseSQLite","TError") []) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])) "KeyDatabaseSQLite" "Transforms a transaction error into a string.\n" False KnownFlex)] [(TypeInfo "Query" [] [0] "KeyDatabaseSQLite" "Queries can read but not write to the database.\n" False),(TypeInfo "Transaction" [] [0] "KeyDatabaseSQLite" "Transactions can modify the database and are executed\natomically.\n" False),(TypeInfo "Dynamic" [] [] "KeyDatabaseSQLite" "Result type of database predicates.\n" False),(TypeInfo "ColVal" [] [] "KeyDatabaseSQLite" "Abstract type for value restrictions\n" False),(TypeInfo "TError" [(("KeyDatabaseSQLite","TError"),[(TCons ("KeyDatabaseSQLite","TErrorKind") []),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])] [] "KeyDatabaseSQLite" "The type of errors that might occur during a transaction.\n" False),(TypeInfo "TErrorKind" [(("KeyDatabaseSQLite","KeyNotExistsError"),[]),(("KeyDatabaseSQLite","NoRelationshipError"),[]),(("KeyDatabaseSQLite","DuplicateKeyError"),[]),(("KeyDatabaseSQLite","KeyRequiredError"),[]),(("KeyDatabaseSQLite","UniqueError"),[]),(("KeyDatabaseSQLite","MinError"),[]),(("KeyDatabaseSQLite","MaxError"),[]),(("KeyDatabaseSQLite","UserDefinedError"),[]),(("KeyDatabaseSQLite","ExecutionError"),[])] [] "KeyDatabaseSQLite" "The various kinds of transaction errors.\n" False)])