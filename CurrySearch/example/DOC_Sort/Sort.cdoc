(CurryInfo (ModuleInfo "Sort" "Michael Hanus" "A collection of useful functions for sorting and comparing\ncharacters, strings, and lists.\n\n") [(FunctionInfo "quickSort" (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","[]") [(TVar 0)]))) "Sort" "Quicksort.\n" False KnownFlex),(FunctionInfo "mergeSort" (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","[]") [(TVar 0)]))) "Sort" "Bottom-up mergesort.\n" False UnknownFR),(FunctionInfo "leqList" (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","Bool") [])))) "Sort" "Less-or-equal on lists.\n" False ConflictFR),(FunctionInfo "cmpList" (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Ordering") []))) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","Ordering") [])))) "Sort" "Comparison of lists.\n" False ConflictFR),(FunctionInfo "leqChar" (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") []))) "Sort" "Less-or-equal on characters (deprecated, use 'Prelude.<=').\n" False UnknownFR),(FunctionInfo "cmpChar" (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Ordering") []))) "Sort" "Comparison of characters (deprecated, use 'Prelude.compare').\n" False UnknownFR),(FunctionInfo "leqCharIgnoreCase" (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") []))) "Sort" "Less-or-equal on characters ignoring case considerations.\n" False UnknownFR),(FunctionInfo "leqString" (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","Bool") []))) "Sort" "Less-or-equal on strings (deprecated, use 'Prelude.<=').\n" False UnknownFR),(FunctionInfo "cmpString" (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","Ordering") []))) "Sort" "Comparison of strings (deprecated, use 'Prelude.compare').\n" False UnknownFR),(FunctionInfo "leqStringIgnoreCase" (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","Bool") []))) "Sort" "Less-or-equal on strings ignoring case considerations.\n" False UnknownFR),(FunctionInfo "leqLexGerman" (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","Bool") []))) "Sort" "Lexicographical ordering on German strings.\nThus, upper/lowercase are not distinguished and Umlauts are sorted\nas vocals.\n" False ConflictFR)] [])