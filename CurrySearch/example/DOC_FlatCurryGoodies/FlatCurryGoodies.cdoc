(CurryInfo (ModuleInfo "FlatCurryGoodies" "Sebastian Fischer" "This library provides selector functions, test and update operations \nas well as some useful auxiliary functions for FlatCurry data terms.\nMost of the provided functions are based on general transformation\nfunctions that replace constructors with user-defined\nfunctions. For recursive datatypes the transformations are defined\ninductively over the term structure. This is quite usual for\ntransformations on FlatCurry terms,\nso the provided functions can be used to implement specific transformations\nwithout having to explicitly state the recursion. Essentially, the tedious\npart of such transformations - descend in fairly complex term structures - \nis abstracted away, which hopefully makes the code more clear and brief.\n\n") [(FunctionInfo "trProg" (FuncType (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (FuncType (TCons ("Prelude","[]") [(TCons ("FlatCurry","TypeDecl") [])]) (FuncType (TCons ("Prelude","[]") [(TCons ("FlatCurry","FuncDecl") [])]) (FuncType (TCons ("Prelude","[]") [(TCons ("FlatCurry","OpDecl") [])]) (TVar 0)))))) (FuncType (TCons ("FlatCurry","Prog") []) (TVar 0))) "FlatCurryGoodies" "transform program\n" False KnownFlex),(FunctionInfo "progName" (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])) "FlatCurryGoodies" "get name from program\n" False UnknownFR),(FunctionInfo "progImports" (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("Prelude","[]") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])) "FlatCurryGoodies" "get imports from program\n" False UnknownFR),(FunctionInfo "progTypes" (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("Prelude","[]") [(TCons ("FlatCurry","TypeDecl") [])])) "FlatCurryGoodies" "get type declarations from program\n" False UnknownFR),(FunctionInfo "progFuncs" (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("Prelude","[]") [(TCons ("FlatCurry","FuncDecl") [])])) "FlatCurryGoodies" "get functions from program\n" False UnknownFR),(FunctionInfo "progOps" (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("Prelude","[]") [(TCons ("FlatCurry","OpDecl") [])])) "FlatCurryGoodies" "get infix operators from program\n" False UnknownFR),(FunctionInfo "updProg" (FuncType (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])) (FuncType (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (TCons ("Prelude","[]") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])) (FuncType (FuncType (TCons ("Prelude","[]") [(TCons ("FlatCurry","TypeDecl") [])]) (TCons ("Prelude","[]") [(TCons ("FlatCurry","TypeDecl") [])])) (FuncType (FuncType (TCons ("Prelude","[]") [(TCons ("FlatCurry","FuncDecl") [])]) (TCons ("Prelude","[]") [(TCons ("FlatCurry","FuncDecl") [])])) (FuncType (FuncType (TCons ("Prelude","[]") [(TCons ("FlatCurry","OpDecl") [])]) (TCons ("Prelude","[]") [(TCons ("FlatCurry","OpDecl") [])])) (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("FlatCurry","Prog") []))))))) "FlatCurryGoodies" "update program\n" False UnknownFR),(FunctionInfo "updProgName" (FuncType (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])) (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("FlatCurry","Prog") []))) "FlatCurryGoodies" "update name of program\n" False UnknownFR),(FunctionInfo "updProgImports" (FuncType (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (TCons ("Prelude","[]") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])) (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("FlatCurry","Prog") []))) "FlatCurryGoodies" "update imports of program\n" False UnknownFR),(FunctionInfo "updProgTypes" (FuncType (FuncType (TCons ("Prelude","[]") [(TCons ("FlatCurry","TypeDecl") [])]) (TCons ("Prelude","[]") [(TCons ("FlatCurry","TypeDecl") [])])) (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("FlatCurry","Prog") []))) "FlatCurryGoodies" "update type declarations of program\n" False UnknownFR),(FunctionInfo "updProgFuncs" (FuncType (FuncType (TCons ("Prelude","[]") [(TCons ("FlatCurry","FuncDecl") [])]) (TCons ("Prelude","[]") [(TCons ("FlatCurry","FuncDecl") [])])) (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("FlatCurry","Prog") []))) "FlatCurryGoodies" "update functions of program\n" False UnknownFR),(FunctionInfo "updProgOps" (FuncType (FuncType (TCons ("Prelude","[]") [(TCons ("FlatCurry","OpDecl") [])]) (TCons ("Prelude","[]") [(TCons ("FlatCurry","OpDecl") [])])) (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("FlatCurry","Prog") []))) "FlatCurryGoodies" "update infix operators of program\n" False UnknownFR),(FunctionInfo "allVarsInProg" (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])])) "FlatCurryGoodies" "get all program variables (also from patterns)\n" False UnknownFR),(FunctionInfo "updProgExps" (FuncType (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("FlatCurry","Expr") [])) (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("FlatCurry","Prog") []))) "FlatCurryGoodies" "lift transformation on expressions to program\n" False UnknownFR),(FunctionInfo "rnmAllVarsInProg" (FuncType (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("FlatCurry","Prog") []))) "FlatCurryGoodies" "rename programs variables\n" False UnknownFR),(FunctionInfo "updQNamesInProg" (FuncType (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])) (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("FlatCurry","Prog") []))) "FlatCurryGoodies" "update all qualified names in program\n" False UnknownFR),(FunctionInfo "rnmProg" (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (FuncType (TCons ("FlatCurry","Prog") []) (TCons ("FlatCurry","Prog") []))) "FlatCurryGoodies" "rename program (update name of and all qualified names in program)\n" False UnknownFR),(FunctionInfo "trType" (FuncType (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (FuncType (TCons ("FlatCurry","Visibility") []) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])]) (FuncType (TCons ("Prelude","[]") [(TCons ("FlatCurry","ConsDecl") [])]) (TVar 0))))) (FuncType (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (FuncType (TCons ("FlatCurry","Visibility") []) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])]) (FuncType (TCons ("FlatCurry","TypeExpr") []) (TVar 0))))) (FuncType (TCons ("FlatCurry","TypeDecl") []) (TVar 0)))) "FlatCurryGoodies" "transform type declaration\n" False KnownFlex),(FunctionInfo "typeName" (FuncType (TCons ("FlatCurry","TypeDecl") []) (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])) "FlatCurryGoodies" "get name of type declaration\n" False UnknownFR),(FunctionInfo "typeVisibility" (FuncType (TCons ("FlatCurry","TypeDecl") []) (TCons ("FlatCurry","Visibility") [])) "FlatCurryGoodies" "get visibility of type declaration\n" False UnknownFR),(FunctionInfo "typeParams" (FuncType (TCons ("FlatCurry","TypeDecl") []) (TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])])) "FlatCurryGoodies" "get type parameters of type declaration\n" False UnknownFR),(FunctionInfo "typeConsDecls" (FuncType (TCons ("FlatCurry","TypeDecl") []) (TCons ("Prelude","[]") [(TCons ("FlatCurry","ConsDecl") [])])) "FlatCurryGoodies" "get constructor declarations from type declaration\n" False UnknownFR),(FunctionInfo "typeSyn" (FuncType (TCons ("FlatCurry","TypeDecl") []) (TCons ("FlatCurry","TypeExpr") [])) "FlatCurryGoodies" "get synonym of type declaration\n" False UnknownFR),(FunctionInfo "isTypeSyn" (FuncType (TCons ("FlatCurry","TypeDecl") []) (TCons ("Prelude","Bool") [])) "FlatCurryGoodies" "is type declaration a type synonym?\n" False UnknownFR),(FunctionInfo "updType" (FuncType (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])) (FuncType (FuncType (TCons ("FlatCurry","Visibility") []) (TCons ("FlatCurry","Visibility") [])) (FuncType (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])])) (FuncType (FuncType (TCons ("Prelude","[]") [(TCons ("FlatCurry","ConsDecl") [])]) (TCons ("Prelude","[]") [(TCons ("FlatCurry","ConsDecl") [])])) (FuncType (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("FlatCurry","TypeExpr") [])) (FuncType (TCons ("FlatCurry","TypeDecl") []) (TCons ("FlatCurry","TypeDecl") []))))))) "FlatCurryGoodies" "update type declaration\n" False UnknownFR),(FunctionInfo "updTypeName" (FuncType (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])) (FuncType (TCons ("FlatCurry","TypeDecl") []) (TCons ("FlatCurry","TypeDecl") []))) "FlatCurryGoodies" "update name of type declaration\n" False UnknownFR),(FunctionInfo "updTypeVisibility" (FuncType (FuncType (TCons ("FlatCurry","Visibility") []) (TCons ("FlatCurry","Visibility") [])) (FuncType (TCons ("FlatCurry","TypeDecl") []) (TCons ("FlatCurry","TypeDecl") []))) "FlatCurryGoodies" "update visibility of type declaration\n" False UnknownFR),(FunctionInfo "updTypeParams" (FuncType (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])])) (FuncType (TCons ("FlatCurry","TypeDecl") []) (TCons ("FlatCurry","TypeDecl") []))) "FlatCurryGoodies" "update type parameters of type declaration\n" False UnknownFR),(FunctionInfo "updTypeConsDecls" (FuncType (FuncType (TCons ("Prelude","[]") [(TCons ("FlatCurry","ConsDecl") [])]) (TCons ("Prelude","[]") [(TCons ("FlatCurry","ConsDecl") [])])) (FuncType (TCons ("FlatCurry","TypeDecl") []) (TCons ("FlatCurry","TypeDecl") []))) "FlatCurryGoodies" "update constructor declarations of type declaration\n" False UnknownFR),(FunctionInfo "updTypeSynonym" (FuncType (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("FlatCurry","TypeExpr") [])) (FuncType (TCons ("FlatCurry","TypeDecl") []) (TCons ("FlatCurry","TypeDecl") []))) "FlatCurryGoodies" "update synonym of type declaration\n" False UnknownFR),(FunctionInfo "updQNamesInType" (FuncType (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])) (FuncType (TCons ("FlatCurry","TypeDecl") []) (TCons ("FlatCurry","TypeDecl") []))) "FlatCurryGoodies" "update all qualified names in type declaration\n" False UnknownFR),(FunctionInfo "trCons" (FuncType (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("FlatCurry","Visibility") []) (FuncType (TCons ("Prelude","[]") [(TCons ("FlatCurry","TypeExpr") [])]) (TVar 0))))) (FuncType (TCons ("FlatCurry","ConsDecl") []) (TVar 0))) "FlatCurryGoodies" "transform constructor declaration\n" False KnownFlex),(FunctionInfo "consName" (FuncType (TCons ("FlatCurry","ConsDecl") []) (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])) "FlatCurryGoodies" "get name of constructor declaration\n" False UnknownFR),(FunctionInfo "consArity" (FuncType (TCons ("FlatCurry","ConsDecl") []) (TCons ("Prelude","Int") [])) "FlatCurryGoodies" "get arity of constructor declaration\n" False UnknownFR),(FunctionInfo "consVisibility" (FuncType (TCons ("FlatCurry","ConsDecl") []) (TCons ("FlatCurry","Visibility") [])) "FlatCurryGoodies" "get visibility of constructor declaration\n" False UnknownFR),(FunctionInfo "consArgs" (FuncType (TCons ("FlatCurry","ConsDecl") []) (TCons ("Prelude","[]") [(TCons ("FlatCurry","TypeExpr") [])])) "FlatCurryGoodies" "get arguments of constructor declaration\n" False UnknownFR),(FunctionInfo "updCons" (FuncType (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])) (FuncType (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (FuncType (FuncType (TCons ("FlatCurry","Visibility") []) (TCons ("FlatCurry","Visibility") [])) (FuncType (FuncType (TCons ("Prelude","[]") [(TCons ("FlatCurry","TypeExpr") [])]) (TCons ("Prelude","[]") [(TCons ("FlatCurry","TypeExpr") [])])) (FuncType (TCons ("FlatCurry","ConsDecl") []) (TCons ("FlatCurry","ConsDecl") [])))))) "FlatCurryGoodies" "update constructor declaration\n" False UnknownFR),(FunctionInfo "updConsName" (FuncType (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])) (FuncType (TCons ("FlatCurry","ConsDecl") []) (TCons ("FlatCurry","ConsDecl") []))) "FlatCurryGoodies" "update name of constructor declaration\n" False UnknownFR),(FunctionInfo "updConsArity" (FuncType (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (FuncType (TCons ("FlatCurry","ConsDecl") []) (TCons ("FlatCurry","ConsDecl") []))) "FlatCurryGoodies" "update arity of constructor declaration\n" False UnknownFR),(FunctionInfo "updConsVisibility" (FuncType (FuncType (TCons ("FlatCurry","Visibility") []) (TCons ("FlatCurry","Visibility") [])) (FuncType (TCons ("FlatCurry","ConsDecl") []) (TCons ("FlatCurry","ConsDecl") []))) "FlatCurryGoodies" "update visibility of constructor declaration\n" False UnknownFR),(FunctionInfo "updConsArgs" (FuncType (FuncType (TCons ("Prelude","[]") [(TCons ("FlatCurry","TypeExpr") [])]) (TCons ("Prelude","[]") [(TCons ("FlatCurry","TypeExpr") [])])) (FuncType (TCons ("FlatCurry","ConsDecl") []) (TCons ("FlatCurry","ConsDecl") []))) "FlatCurryGoodies" "update arguments of constructor declaration\n" False UnknownFR),(FunctionInfo "updQNamesInConsDecl" (FuncType (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])) (FuncType (TCons ("FlatCurry","ConsDecl") []) (TCons ("FlatCurry","ConsDecl") []))) "FlatCurryGoodies" "update all qualified names in constructor declaration\n" False UnknownFR),(FunctionInfo "tVarIndex" (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("Prelude","Int") [])) "FlatCurryGoodies" "get index from type variable\n" False KnownFlex),(FunctionInfo "domain" (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("FlatCurry","TypeExpr") [])) "FlatCurryGoodies" "get domain from functional type\n" False KnownFlex),(FunctionInfo "range" (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("FlatCurry","TypeExpr") [])) "FlatCurryGoodies" "get range from functional type\n" False KnownFlex),(FunctionInfo "tConsName" (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])) "FlatCurryGoodies" "get name from constructed type\n" False KnownFlex),(FunctionInfo "tConsArgs" (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("Prelude","[]") [(TCons ("FlatCurry","TypeExpr") [])])) "FlatCurryGoodies" "get arguments from constructed type\n" False KnownFlex),(FunctionInfo "trTypeExpr" (FuncType (FuncType (TCons ("Prelude","Int") []) (TVar 0)) (FuncType (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TVar 0))) (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))) (FuncType (TCons ("FlatCurry","TypeExpr") []) (TVar 0))))) "FlatCurryGoodies" "transform type expression\n" False KnownFlex),(FunctionInfo "isTVar" (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("Prelude","Bool") [])) "FlatCurryGoodies" "is type expression a type variable?\n" False UnknownFR),(FunctionInfo "isTCons" (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("Prelude","Bool") [])) "FlatCurryGoodies" "is type declaration a constructed type?\n" False UnknownFR),(FunctionInfo "isFuncType" (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("Prelude","Bool") [])) "FlatCurryGoodies" "is type declaration a functional type?\n" False UnknownFR),(FunctionInfo "updTVars" (FuncType (FuncType (TCons ("Prelude","Int") []) (TCons ("FlatCurry","TypeExpr") [])) (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("FlatCurry","TypeExpr") []))) "FlatCurryGoodies" "update all type variables\n" False UnknownFR),(FunctionInfo "updTCons" (FuncType (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (FuncType (TCons ("Prelude","[]") [(TCons ("FlatCurry","TypeExpr") [])]) (TCons ("FlatCurry","TypeExpr") []))) (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("FlatCurry","TypeExpr") []))) "FlatCurryGoodies" "update all type constructors\n" False UnknownFR),(FunctionInfo "updFuncTypes" (FuncType (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("FlatCurry","TypeExpr") []))) (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("FlatCurry","TypeExpr") []))) "FlatCurryGoodies" "update all functional types\n" False UnknownFR),(FunctionInfo "argTypes" (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("Prelude","[]") [(TCons ("FlatCurry","TypeExpr") [])])) "FlatCurryGoodies" "get argument types from functional type\n" False KnownFlex),(FunctionInfo "resultType" (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("FlatCurry","TypeExpr") [])) "FlatCurryGoodies" "get result type from (nested) functional type\n" False KnownFlex),(FunctionInfo "rnmAllVarsInTypeExpr" (FuncType (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("FlatCurry","TypeExpr") []))) "FlatCurryGoodies" "rename variables in type expression\n" False UnknownFR),(FunctionInfo "updQNamesInTypeExpr" (FuncType (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])) (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("FlatCurry","TypeExpr") []))) "FlatCurryGoodies" "update all qualified names in type expression\n" False UnknownFR),(FunctionInfo "trOp" (FuncType (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (FuncType (TCons ("FlatCurry","Fixity") []) (FuncType (TCons ("Prelude","Int") []) (TVar 0)))) (FuncType (TCons ("FlatCurry","OpDecl") []) (TVar 0))) "FlatCurryGoodies" "transform operator declaration\n" False KnownFlex),(FunctionInfo "opName" (FuncType (TCons ("FlatCurry","OpDecl") []) (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])) "FlatCurryGoodies" "get name from operator declaration\n" False UnknownFR),(FunctionInfo "opFixity" (FuncType (TCons ("FlatCurry","OpDecl") []) (TCons ("FlatCurry","Fixity") [])) "FlatCurryGoodies" "get fixity of operator declaration\n" False UnknownFR),(FunctionInfo "opPrecedence" (FuncType (TCons ("FlatCurry","OpDecl") []) (TCons ("Prelude","Int") [])) "FlatCurryGoodies" "get precedence of operator declaration\n" False UnknownFR),(FunctionInfo "updOp" (FuncType (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])) (FuncType (FuncType (TCons ("FlatCurry","Fixity") []) (TCons ("FlatCurry","Fixity") [])) (FuncType (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (FuncType (TCons ("FlatCurry","OpDecl") []) (TCons ("FlatCurry","OpDecl") []))))) "FlatCurryGoodies" "update operator declaration\n" False UnknownFR),(FunctionInfo "updOpName" (FuncType (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])) (FuncType (TCons ("FlatCurry","OpDecl") []) (TCons ("FlatCurry","OpDecl") []))) "FlatCurryGoodies" "update name of operator declaration\n" False UnknownFR),(FunctionInfo "updOpFixity" (FuncType (FuncType (TCons ("FlatCurry","Fixity") []) (TCons ("FlatCurry","Fixity") [])) (FuncType (TCons ("FlatCurry","OpDecl") []) (TCons ("FlatCurry","OpDecl") []))) "FlatCurryGoodies" "update fixity of operator declaration\n" False UnknownFR),(FunctionInfo "updOpPrecedence" (FuncType (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (FuncType (TCons ("FlatCurry","OpDecl") []) (TCons ("FlatCurry","OpDecl") []))) "FlatCurryGoodies" "update precedence of operator declaration\n" False UnknownFR),(FunctionInfo "trFunc" (FuncType (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("FlatCurry","Visibility") []) (FuncType (TCons ("FlatCurry","TypeExpr") []) (FuncType (TCons ("FlatCurry","Rule") []) (TVar 0)))))) (FuncType (TCons ("FlatCurry","FuncDecl") []) (TVar 0))) "FlatCurryGoodies" "transform function\n" False KnownFlex),(FunctionInfo "funcName" (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])) "FlatCurryGoodies" "get name of function\n" False UnknownFR),(FunctionInfo "funcArity" (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("Prelude","Int") [])) "FlatCurryGoodies" "get arity of function\n" False UnknownFR),(FunctionInfo "funcVisibility" (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("FlatCurry","Visibility") [])) "FlatCurryGoodies" "get visibility of function\n" False UnknownFR),(FunctionInfo "funcType" (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("FlatCurry","TypeExpr") [])) "FlatCurryGoodies" "get type of function\n" False UnknownFR),(FunctionInfo "funcRule" (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("FlatCurry","Rule") [])) "FlatCurryGoodies" "get rule of function\n" False UnknownFR),(FunctionInfo "updFunc" (FuncType (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])) (FuncType (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (FuncType (FuncType (TCons ("FlatCurry","Visibility") []) (TCons ("FlatCurry","Visibility") [])) (FuncType (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("FlatCurry","TypeExpr") [])) (FuncType (FuncType (TCons ("FlatCurry","Rule") []) (TCons ("FlatCurry","Rule") [])) (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("FlatCurry","FuncDecl") []))))))) "FlatCurryGoodies" "update function\n" False UnknownFR),(FunctionInfo "updFuncName" (FuncType (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])) (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("FlatCurry","FuncDecl") []))) "FlatCurryGoodies" "update name of function\n" False UnknownFR),(FunctionInfo "updFuncArity" (FuncType (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("FlatCurry","FuncDecl") []))) "FlatCurryGoodies" "update arity of function\n" False UnknownFR),(FunctionInfo "updFuncVisibility" (FuncType (FuncType (TCons ("FlatCurry","Visibility") []) (TCons ("FlatCurry","Visibility") [])) (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("FlatCurry","FuncDecl") []))) "FlatCurryGoodies" "update visibility of function\n" False UnknownFR),(FunctionInfo "updFuncType" (FuncType (FuncType (TCons ("FlatCurry","TypeExpr") []) (TCons ("FlatCurry","TypeExpr") [])) (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("FlatCurry","FuncDecl") []))) "FlatCurryGoodies" "update type of function\n" False UnknownFR),(FunctionInfo "updFuncRule" (FuncType (FuncType (TCons ("FlatCurry","Rule") []) (TCons ("FlatCurry","Rule") [])) (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("FlatCurry","FuncDecl") []))) "FlatCurryGoodies" "update rule of function\n" False UnknownFR),(FunctionInfo "isExternal" (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("Prelude","Bool") [])) "FlatCurryGoodies" "is function externally defined?\n" False UnknownFR),(FunctionInfo "allVarsInFunc" (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])])) "FlatCurryGoodies" "get variable names in a function declaration\n" False UnknownFR),(FunctionInfo "funcArgs" (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])])) "FlatCurryGoodies" "get arguments of function, if not externally defined\n" False UnknownFR),(FunctionInfo "funcBody" (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("FlatCurry","Expr") [])) "FlatCurryGoodies" "get body of function, if not externally defined\n" False UnknownFR),(FunctionInfo "funcRHS" (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("Prelude","[]") [(TCons ("FlatCurry","Expr") [])])) "FlatCurryGoodies" [] False KnownRigid),(FunctionInfo "rnmAllVarsInFunc" (FuncType (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("FlatCurry","FuncDecl") []))) "FlatCurryGoodies" "rename all variables in function\n" False UnknownFR),(FunctionInfo "updQNamesInFunc" (FuncType (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])) (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("FlatCurry","FuncDecl") []))) "FlatCurryGoodies" "update all qualified names in function\n" False UnknownFR),(FunctionInfo "updFuncArgs" (FuncType (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])])) (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("FlatCurry","FuncDecl") []))) "FlatCurryGoodies" "update arguments of function, if not externally defined\n" False UnknownFR),(FunctionInfo "updFuncBody" (FuncType (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("FlatCurry","Expr") [])) (FuncType (TCons ("FlatCurry","FuncDecl") []) (TCons ("FlatCurry","FuncDecl") []))) "FlatCurryGoodies" "update body of function, if not externally defined\n" False UnknownFR),(FunctionInfo "trRule" (FuncType (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])]) (FuncType (TCons ("FlatCurry","Expr") []) (TVar 0))) (FuncType (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TVar 0)) (FuncType (TCons ("FlatCurry","Rule") []) (TVar 0)))) "FlatCurryGoodies" "transform rule\n" False KnownFlex),(FunctionInfo "ruleArgs" (FuncType (TCons ("FlatCurry","Rule") []) (TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])])) "FlatCurryGoodies" "get rules arguments if it's not external\n" False UnknownFR),(FunctionInfo "ruleBody" (FuncType (TCons ("FlatCurry","Rule") []) (TCons ("FlatCurry","Expr") [])) "FlatCurryGoodies" "get rules body if it's not external\n" False UnknownFR),(FunctionInfo "ruleExtDecl" (FuncType (TCons ("FlatCurry","Rule") []) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])) "FlatCurryGoodies" "get rules external declaration\n" False UnknownFR),(FunctionInfo "isRuleExternal" (FuncType (TCons ("FlatCurry","Rule") []) (TCons ("Prelude","Bool") [])) "FlatCurryGoodies" "is rule external?\n" False UnknownFR),(FunctionInfo "updRule" (FuncType (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])])) (FuncType (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("FlatCurry","Expr") [])) (FuncType (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])) (FuncType (TCons ("FlatCurry","Rule") []) (TCons ("FlatCurry","Rule") []))))) "FlatCurryGoodies" "update rule\n" False UnknownFR),(FunctionInfo "updRuleArgs" (FuncType (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])])) (FuncType (TCons ("FlatCurry","Rule") []) (TCons ("FlatCurry","Rule") []))) "FlatCurryGoodies" "update rules arguments\n" False UnknownFR),(FunctionInfo "updRuleBody" (FuncType (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("FlatCurry","Expr") [])) (FuncType (TCons ("FlatCurry","Rule") []) (TCons ("FlatCurry","Rule") []))) "FlatCurryGoodies" "update rules body\n" False UnknownFR),(FunctionInfo "updRuleExtDecl" (FuncType (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])) (FuncType (TCons ("FlatCurry","Rule") []) (TCons ("FlatCurry","Rule") []))) "FlatCurryGoodies" "update rules external declaration\n" False UnknownFR),(FunctionInfo "allVarsInRule" (FuncType (TCons ("FlatCurry","Rule") []) (TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])])) "FlatCurryGoodies" "get variable names in a functions rule\n" False UnknownFR),(FunctionInfo "rnmAllVarsInRule" (FuncType (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (FuncType (TCons ("FlatCurry","Rule") []) (TCons ("FlatCurry","Rule") []))) "FlatCurryGoodies" "rename all variables in rule\n" False UnknownFR),(FunctionInfo "updQNamesInRule" (FuncType (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])) (FuncType (TCons ("FlatCurry","Rule") []) (TCons ("FlatCurry","Rule") []))) "FlatCurryGoodies" "update all qualified names in rule\n" False UnknownFR),(FunctionInfo "trCombType" (FuncType (TVar 0) (FuncType (FuncType (TCons ("Prelude","Int") []) (TVar 0)) (FuncType (TVar 0) (FuncType (FuncType (TCons ("Prelude","Int") []) (TVar 0)) (FuncType (TCons ("FlatCurry","CombType") []) (TVar 0)))))) "FlatCurryGoodies" "transform combination type\n" False KnownFlex),(FunctionInfo "isCombTypeFuncCall" (FuncType (TCons ("FlatCurry","CombType") []) (TCons ("Prelude","Bool") [])) "FlatCurryGoodies" "is type of combination FuncCall?\n" False UnknownFR),(FunctionInfo "isCombTypeFuncPartCall" (FuncType (TCons ("FlatCurry","CombType") []) (TCons ("Prelude","Bool") [])) "FlatCurryGoodies" "is type of combination FuncPartCall?\n" False UnknownFR),(FunctionInfo "isCombTypeConsCall" (FuncType (TCons ("FlatCurry","CombType") []) (TCons ("Prelude","Bool") [])) "FlatCurryGoodies" "is type of combination ConsCall?\n" False UnknownFR),(FunctionInfo "isCombTypeConsPartCall" (FuncType (TCons ("FlatCurry","CombType") []) (TCons ("Prelude","Bool") [])) "FlatCurryGoodies" "is type of combination ConsPartCall?\n" False UnknownFR),(FunctionInfo "missingArgs" (FuncType (TCons ("FlatCurry","CombType") []) (TCons ("Prelude","Int") [])) "FlatCurryGoodies" [] False UnknownFR),(FunctionInfo "varNr" (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("Prelude","Int") [])) "FlatCurryGoodies" "get internal number of variable\n" False KnownFlex),(FunctionInfo "literal" (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("FlatCurry","Literal") [])) "FlatCurryGoodies" "get literal if expression is literal expression\n" False KnownFlex),(FunctionInfo "combType" (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("FlatCurry","CombType") [])) "FlatCurryGoodies" "get combination type of a combined expression\n" False KnownFlex),(FunctionInfo "combName" (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])) "FlatCurryGoodies" "get name of a combined expression\n" False KnownFlex),(FunctionInfo "combArgs" (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("Prelude","[]") [(TCons ("FlatCurry","Expr") [])])) "FlatCurryGoodies" "get arguments of a combined expression\n" False KnownFlex),(FunctionInfo "missingCombArgs" (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("Prelude","Int") [])) "FlatCurryGoodies" "get number of missing arguments if expression is combined\n" False UnknownFR),(FunctionInfo "letBinds" (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","Int") []),(TCons ("FlatCurry","Expr") [])])])) "FlatCurryGoodies" "get indices of varoables in let declaration\n" False KnownFlex),(FunctionInfo "letBody" (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("FlatCurry","Expr") [])) "FlatCurryGoodies" "get body of let declaration\n" False KnownFlex),(FunctionInfo "freeVars" (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])])) "FlatCurryGoodies" "get variable indices from declaration of free variables\n" False KnownFlex),(FunctionInfo "freeExpr" (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("FlatCurry","Expr") [])) "FlatCurryGoodies" "get expression from declaration of free variables\n" False KnownFlex),(FunctionInfo "orExps" (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("Prelude","[]") [(TCons ("FlatCurry","Expr") [])])) "FlatCurryGoodies" "get expressions from or-expression\n" False KnownFlex),(FunctionInfo "caseType" (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("FlatCurry","CaseType") [])) "FlatCurryGoodies" "get case-type of case expression\n" False KnownFlex),(FunctionInfo "caseExpr" (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("FlatCurry","Expr") [])) "FlatCurryGoodies" "get scrutinee of case expression\n" False KnownFlex),(FunctionInfo "caseBranches" (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("Prelude","[]") [(TCons ("FlatCurry","BranchExpr") [])])) "FlatCurryGoodies" "get branch expressions from case expression\n" False KnownFlex),(FunctionInfo "isVar" (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("Prelude","Bool") [])) "FlatCurryGoodies" "is expression a variable?\n" False KnownRigid),(FunctionInfo "isLit" (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("Prelude","Bool") [])) "FlatCurryGoodies" "is expression a literal expression?\n" False KnownRigid),(FunctionInfo "isComb" (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("Prelude","Bool") [])) "FlatCurryGoodies" "is expression combined?\n" False KnownRigid),(FunctionInfo "isLet" (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("Prelude","Bool") [])) "FlatCurryGoodies" "is expression a let expression?\n" False KnownRigid),(FunctionInfo "isFree" (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("Prelude","Bool") [])) "FlatCurryGoodies" "is expression a declaration of free variables?\n" False KnownRigid),(FunctionInfo "isOr" (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("Prelude","Bool") [])) "FlatCurryGoodies" "is expression an or-expression?\n" False KnownRigid),(FunctionInfo "isCase" (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("Prelude","Bool") [])) "FlatCurryGoodies" "is expression a case expression?\n" False KnownRigid),(FunctionInfo "trExpr" (FuncType (FuncType (TCons ("Prelude","Int") []) (TVar 0)) (FuncType (FuncType (TCons ("FlatCurry","Literal") []) (TVar 0)) (FuncType (FuncType (TCons ("FlatCurry","CombType") []) (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TVar 0)))) (FuncType (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","Int") []),(TVar 0)])]) (FuncType (TVar 0) (TVar 0))) (FuncType (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])]) (FuncType (TVar 0) (TVar 0))) (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))) (FuncType (FuncType (TCons ("FlatCurry","CaseType") []) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [(TVar 1)]) (TVar 0)))) (FuncType (FuncType (TCons ("FlatCurry","Pattern") []) (FuncType (TVar 0) (TVar 1))) (FuncType (TCons ("FlatCurry","Expr") []) (TVar 0)))))))))) "FlatCurryGoodies" "transform expression\n" False KnownFlex),(FunctionInfo "updVars" (FuncType (FuncType (TCons ("Prelude","Int") []) (TCons ("FlatCurry","Expr") [])) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("FlatCurry","Expr") []))) "FlatCurryGoodies" "update all variables in given expression\n" False UnknownFR),(FunctionInfo "updLiterals" (FuncType (FuncType (TCons ("FlatCurry","Literal") []) (TCons ("FlatCurry","Expr") [])) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("FlatCurry","Expr") []))) "FlatCurryGoodies" "update all literals in given expression\n" False UnknownFR),(FunctionInfo "updCombs" (FuncType (FuncType (TCons ("FlatCurry","CombType") []) (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (FuncType (TCons ("Prelude","[]") [(TCons ("FlatCurry","Expr") [])]) (TCons ("FlatCurry","Expr") [])))) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("FlatCurry","Expr") []))) "FlatCurryGoodies" "update all combined expressions in given expression\n" False UnknownFR),(FunctionInfo "updLets" (FuncType (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","Int") []),(TCons ("FlatCurry","Expr") [])])]) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("FlatCurry","Expr") []))) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("FlatCurry","Expr") []))) "FlatCurryGoodies" "update all let expressions in given expression\n" False UnknownFR),(FunctionInfo "updFrees" (FuncType (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])]) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("FlatCurry","Expr") []))) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("FlatCurry","Expr") []))) "FlatCurryGoodies" "update all free declarations in given expression\n" False UnknownFR),(FunctionInfo "updOrs" (FuncType (FuncType (TCons ("FlatCurry","Expr") []) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("FlatCurry","Expr") []))) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("FlatCurry","Expr") []))) "FlatCurryGoodies" "update all or expressions in given expression\n" False UnknownFR),(FunctionInfo "updCases" (FuncType (FuncType (TCons ("FlatCurry","CaseType") []) (FuncType (TCons ("FlatCurry","Expr") []) (FuncType (TCons ("Prelude","[]") [(TCons ("FlatCurry","BranchExpr") [])]) (TCons ("FlatCurry","Expr") [])))) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("FlatCurry","Expr") []))) "FlatCurryGoodies" "update all case expressions in given expression\n" False UnknownFR),(FunctionInfo "updBranches" (FuncType (FuncType (TCons ("FlatCurry","Pattern") []) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("FlatCurry","BranchExpr") []))) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("FlatCurry","Expr") []))) "FlatCurryGoodies" "update all case branches in given expression\n" False UnknownFR),(FunctionInfo "isFuncCall" (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("Prelude","Bool") [])) "FlatCurryGoodies" "is expression a call of a function where all arguments are provided?\n" False UnknownFR),(FunctionInfo "isFuncPartCall" (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("Prelude","Bool") [])) "FlatCurryGoodies" "is expression a partial function call?\n" False UnknownFR),(FunctionInfo "isConsCall" (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("Prelude","Bool") [])) "FlatCurryGoodies" "is expression a call of a constructor?\n" False UnknownFR),(FunctionInfo "isConsPartCall" (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("Prelude","Bool") [])) "FlatCurryGoodies" "is expression a partial constructor call?\n" False UnknownFR),(FunctionInfo "isGround" (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("Prelude","Bool") [])) "FlatCurryGoodies" "is expression fully evaluated?\n" False KnownRigid),(FunctionInfo "allVars" (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])])) "FlatCurryGoodies" "get all variables (also pattern variables) in expression\n" False UnknownFR),(FunctionInfo "rnmAllVars" (FuncType (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("FlatCurry","Expr") []))) "FlatCurryGoodies" "rename all variables (also in patterns) in expression\n" False UnknownFR),(FunctionInfo "updQNames" (FuncType (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])) (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("FlatCurry","Expr") []))) "FlatCurryGoodies" "update all qualified names in expression\n" False UnknownFR),(FunctionInfo "trBranch" (FuncType (FuncType (TCons ("FlatCurry","Pattern") []) (FuncType (TCons ("FlatCurry","Expr") []) (TVar 0))) (FuncType (TCons ("FlatCurry","BranchExpr") []) (TVar 0))) "FlatCurryGoodies" "transform branch expression\n" False KnownFlex),(FunctionInfo "branchPattern" (FuncType (TCons ("FlatCurry","BranchExpr") []) (TCons ("FlatCurry","Pattern") [])) "FlatCurryGoodies" "get pattern from branch expression\n" False UnknownFR),(FunctionInfo "branchExpr" (FuncType (TCons ("FlatCurry","BranchExpr") []) (TCons ("FlatCurry","Expr") [])) "FlatCurryGoodies" "get expression from branch expression\n" False UnknownFR),(FunctionInfo "updBranch" (FuncType (FuncType (TCons ("FlatCurry","Pattern") []) (TCons ("FlatCurry","Pattern") [])) (FuncType (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("FlatCurry","Expr") [])) (FuncType (TCons ("FlatCurry","BranchExpr") []) (TCons ("FlatCurry","BranchExpr") [])))) "FlatCurryGoodies" "update branch expression\n" False UnknownFR),(FunctionInfo "updBranchPattern" (FuncType (FuncType (TCons ("FlatCurry","Pattern") []) (TCons ("FlatCurry","Pattern") [])) (FuncType (TCons ("FlatCurry","BranchExpr") []) (TCons ("FlatCurry","BranchExpr") []))) "FlatCurryGoodies" "update pattern of branch expression\n" False UnknownFR),(FunctionInfo "updBranchExpr" (FuncType (FuncType (TCons ("FlatCurry","Expr") []) (TCons ("FlatCurry","Expr") [])) (FuncType (TCons ("FlatCurry","BranchExpr") []) (TCons ("FlatCurry","BranchExpr") []))) "FlatCurryGoodies" "update expression of branch expression\n" False UnknownFR),(FunctionInfo "trPattern" (FuncType (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])]) (TVar 0))) (FuncType (FuncType (TCons ("FlatCurry","Literal") []) (TVar 0)) (FuncType (TCons ("FlatCurry","Pattern") []) (TVar 0)))) "FlatCurryGoodies" "transform pattern\n" False KnownFlex),(FunctionInfo "patCons" (FuncType (TCons ("FlatCurry","Pattern") []) (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])) "FlatCurryGoodies" "get name from constructor pattern\n" False UnknownFR),(FunctionInfo "patArgs" (FuncType (TCons ("FlatCurry","Pattern") []) (TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])])) "FlatCurryGoodies" "get arguments from constructor pattern\n" False UnknownFR),(FunctionInfo "patLiteral" (FuncType (TCons ("FlatCurry","Pattern") []) (TCons ("FlatCurry","Literal") [])) "FlatCurryGoodies" "get literal from literal pattern \n" False UnknownFR),(FunctionInfo "isConsPattern" (FuncType (TCons ("FlatCurry","Pattern") []) (TCons ("Prelude","Bool") [])) "FlatCurryGoodies" "is pattern a constructor pattern?\n" False UnknownFR),(FunctionInfo "updPattern" (FuncType (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])) (FuncType (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])])) (FuncType (FuncType (TCons ("FlatCurry","Literal") []) (TCons ("FlatCurry","Literal") [])) (FuncType (TCons ("FlatCurry","Pattern") []) (TCons ("FlatCurry","Pattern") []))))) "FlatCurryGoodies" "update pattern\n" False UnknownFR),(FunctionInfo "updPatCons" (FuncType (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])) (FuncType (TCons ("FlatCurry","Pattern") []) (TCons ("FlatCurry","Pattern") []))) "FlatCurryGoodies" "update constructors name of pattern\n" False UnknownFR),(FunctionInfo "updPatArgs" (FuncType (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])])) (FuncType (TCons ("FlatCurry","Pattern") []) (TCons ("FlatCurry","Pattern") []))) "FlatCurryGoodies" "update arguments of constructor pattern\n" False UnknownFR),(FunctionInfo "updPatLiteral" (FuncType (FuncType (TCons ("FlatCurry","Literal") []) (TCons ("FlatCurry","Literal") [])) (FuncType (TCons ("FlatCurry","Pattern") []) (TCons ("FlatCurry","Pattern") []))) "FlatCurryGoodies" "update literal of pattern\n" False UnknownFR),(FunctionInfo "patExpr" (FuncType (TCons ("FlatCurry","Pattern") []) (TCons ("FlatCurry","Expr") [])) "FlatCurryGoodies" "build expression from pattern\n" False UnknownFR)] [(TypeInfo "Update" [(("FlatCurryGoodies","Update"),[(FuncType (FuncType (TVar 1) (TVar 1)) (FuncType (TVar 0) (TVar 0)))])] [0,1] "FlatCurryGoodies" [] True)])