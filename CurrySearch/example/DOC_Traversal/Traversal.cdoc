(CurryInfo (ModuleInfo "Traversal" "Sebastian Fischer" "Library to support lightweight generic traversals\nthrough tree-structured data.\nSee <a href=\"http://www-ps.informatik.uni-kiel.de/~sebf/projects/traversal.html\">here</a>\nfor a description of the library.\n\n") [(FunctionInfo "noChildren" (FuncType (TVar 0) (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TVar 1)]),(FuncType (TCons ("Prelude","[]") [(TVar 1)]) (TVar 0))])) "Traversal" "Traversal function for constructors without children.\n" False UnknownFR),(FunctionInfo "children" (FuncType (FuncType (TVar 0) (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TVar 1)]),(FuncType (TCons ("Prelude","[]") [(TVar 1)]) (TVar 0))])) (FuncType (TVar 0) (TCons ("Prelude","[]") [(TVar 1)]))) "Traversal" "Yields the children of a value.\n" False UnknownFR),(FunctionInfo "replaceChildren" (FuncType (FuncType (TVar 0) (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TVar 1)]),(FuncType (TCons ("Prelude","[]") [(TVar 1)]) (TVar 0))])) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [(TVar 1)]) (TVar 0)))) "Traversal" "Replaces the children of a value.\n" False UnknownFR),(FunctionInfo "mapChildren" (FuncType (FuncType (TVar 0) (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TVar 1)]),(FuncType (TCons ("Prelude","[]") [(TVar 1)]) (TVar 0))])) (FuncType (FuncType (TVar 1) (TVar 1)) (FuncType (TVar 0) (TVar 0)))) "Traversal" "Applies the given function to each child of a value.\n" False UnknownFR),(FunctionInfo "family" (FuncType (FuncType (TVar 0) (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TVar 0)]),(FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TVar 0))])) (FuncType (TVar 0) (TCons ("Prelude","[]") [(TVar 0)]))) "Traversal" "Computes a list of the given value, its children, those children, etc.\n" False UnknownFR),(FunctionInfo "childFamilies" (FuncType (FuncType (TVar 0) (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TVar 1)]),(FuncType (TCons ("Prelude","[]") [(TVar 1)]) (TVar 0))])) (FuncType (FuncType (TVar 1) (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TVar 1)]),(FuncType (TCons ("Prelude","[]") [(TVar 1)]) (TVar 1))])) (FuncType (TVar 0) (TCons ("Prelude","[]") [(TVar 1)])))) "Traversal" "Computes a list of family members of the children of a value.\nThe value and its children can have different types.\n" False UnknownFR),(FunctionInfo "mapFamily" (FuncType (FuncType (TVar 0) (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TVar 0)]),(FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TVar 0))])) (FuncType (FuncType (TVar 0) (TVar 0)) (FuncType (TVar 0) (TVar 0)))) "Traversal" "Applies the given function to each member of the family of a value.\nProceeds bottom-up.\n" False UnknownFR),(FunctionInfo "mapChildFamilies" (FuncType (FuncType (TVar 0) (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TVar 1)]),(FuncType (TCons ("Prelude","[]") [(TVar 1)]) (TVar 0))])) (FuncType (FuncType (TVar 1) (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TVar 1)]),(FuncType (TCons ("Prelude","[]") [(TVar 1)]) (TVar 1))])) (FuncType (FuncType (TVar 1) (TVar 1)) (FuncType (TVar 0) (TVar 0))))) "Traversal" "Applies the given function to each member of the families of the children\nof a value. The value and its children can have different types.\nProceeds bottom-up.\n" False UnknownFR),(FunctionInfo "evalFamily" (FuncType (FuncType (TVar 0) (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TVar 0)]),(FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TVar 0))])) (FuncType (FuncType (TVar 0) (TCons ("Prelude","Maybe") [(TVar 0)])) (FuncType (TVar 0) (TVar 0)))) "Traversal" "Applies the given function to each member of the family of a value \nas long as possible. On each member of the family of the result the given\nfunction will yield <code>Nothing</code>.\nProceeds bottom-up.\n" False UnknownFR),(FunctionInfo "evalChildFamilies" (FuncType (FuncType (TVar 0) (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TVar 1)]),(FuncType (TCons ("Prelude","[]") [(TVar 1)]) (TVar 0))])) (FuncType (FuncType (TVar 1) (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TVar 1)]),(FuncType (TCons ("Prelude","[]") [(TVar 1)]) (TVar 1))])) (FuncType (FuncType (TVar 1) (TCons ("Prelude","Maybe") [(TVar 1)])) (FuncType (TVar 0) (TVar 0))))) "Traversal" "Applies the given function to each member of the families of the children\nof a value as long as possible.\nSimilar to 'evalFamily'.\n" False UnknownFR),(FunctionInfo "fold" (FuncType (FuncType (TVar 0) (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TVar 0)]),(FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TVar 0))])) (FuncType (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [(TVar 1)]) (TVar 1))) (FuncType (TVar 0) (TVar 1)))) "Traversal" "Implements a traversal similar to a fold with possible default cases.\n" False UnknownFR),(FunctionInfo "foldChildren" (FuncType (FuncType (TVar 0) (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TVar 1)]),(FuncType (TCons ("Prelude","[]") [(TVar 1)]) (TVar 0))])) (FuncType (FuncType (TVar 1) (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TVar 1)]),(FuncType (TCons ("Prelude","[]") [(TVar 1)]) (TVar 1))])) (FuncType (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [(TVar 2)]) (TVar 3))) (FuncType (FuncType (TVar 1) (FuncType (TCons ("Prelude","[]") [(TVar 2)]) (TVar 2))) (FuncType (TVar 0) (TVar 3)))))) "Traversal" "Fold the children and combine the results.\n" False UnknownFR),(FunctionInfo "replaceChildrenIO" (FuncType (FuncType (TVar 0) (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TVar 1)]),(FuncType (TCons ("Prelude","[]") [(TVar 1)]) (TVar 0))])) (FuncType (TVar 0) (FuncType (TCons ("Prelude","IO") [(TCons ("Prelude","[]") [(TVar 1)])]) (TCons ("Prelude","IO") [(TVar 0)])))) "Traversal" "IO version of replaceChildren\n" False UnknownFR),(FunctionInfo "mapChildrenIO" (FuncType (FuncType (TVar 0) (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TVar 1)]),(FuncType (TCons ("Prelude","[]") [(TVar 1)]) (TVar 0))])) (FuncType (FuncType (TVar 1) (TCons ("Prelude","IO") [(TVar 1)])) (FuncType (TVar 0) (TCons ("Prelude","IO") [(TVar 0)])))) "Traversal" "IO version of mapChildren\n" False UnknownFR),(FunctionInfo "mapFamilyIO" (FuncType (FuncType (TVar 0) (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TVar 0)]),(FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TVar 0))])) (FuncType (FuncType (TVar 0) (TCons ("Prelude","IO") [(TVar 0)])) (FuncType (TVar 0) (TCons ("Prelude","IO") [(TVar 0)])))) "Traversal" "IO version of mapFamily\n" False UnknownFR),(FunctionInfo "mapChildFamiliesIO" (FuncType (FuncType (TVar 0) (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TVar 1)]),(FuncType (TCons ("Prelude","[]") [(TVar 1)]) (TVar 0))])) (FuncType (FuncType (TVar 1) (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TVar 1)]),(FuncType (TCons ("Prelude","[]") [(TVar 1)]) (TVar 1))])) (FuncType (FuncType (TVar 1) (TCons ("Prelude","IO") [(TVar 1)])) (FuncType (TVar 0) (TCons ("Prelude","IO") [(TVar 0)]))))) "Traversal" "IO version of mapChildFamilies\n" False UnknownFR),(FunctionInfo "evalFamilyIO" (FuncType (FuncType (TVar 0) (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TVar 0)]),(FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TVar 0))])) (FuncType (FuncType (TVar 0) (TCons ("Prelude","IO") [(TCons ("Prelude","Maybe") [(TVar 0)])])) (FuncType (TVar 0) (TCons ("Prelude","IO") [(TVar 0)])))) "Traversal" "IO version of evalFamily\n" False UnknownFR),(FunctionInfo "evalChildFamiliesIO" (FuncType (FuncType (TVar 0) (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TVar 1)]),(FuncType (TCons ("Prelude","[]") [(TVar 1)]) (TVar 0))])) (FuncType (FuncType (TVar 1) (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TVar 1)]),(FuncType (TCons ("Prelude","[]") [(TVar 1)]) (TVar 1))])) (FuncType (FuncType (TVar 1) (TCons ("Prelude","IO") [(TCons ("Prelude","Maybe") [(TVar 1)])])) (FuncType (TVar 0) (TCons ("Prelude","IO") [(TVar 0)]))))) "Traversal" "IO version of evalChildFamilies\n" False UnknownFR)] [(TypeInfo "Traversable" [(("Traversal","Traversable"),[(FuncType (TVar 0) (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TVar 1)]),(FuncType (TCons ("Prelude","[]") [(TVar 1)]) (TVar 0))]))])] [0,1] "Traversal" "A datatype is <code>Traversable</code> if it defines a function\nthat can decompose a value into a list of children of the same type\nand recombine new children to a new value of the original type. \n" True)])