(CurryInfo (ModuleInfo "Assertion" "Michael Hanus" "This module defines the datatype and operations for the\nCurry module tester \"currytest\".\n\n") [(FunctionInfo "assertTrue" (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Assertion","Assertion") [(TCons ("Prelude","()") [])]))) "Assertion" "`(assertTrue s b)` asserts (with name `s`) that `b` must be true.\n" False UnknownFR),(FunctionInfo "assertEqual" (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Assertion","Assertion") [(TVar 0)])))) "Assertion" "`(assertEqual s e1 e2)` asserts (with name `s`) that `e1` and `e2`\nmust be equal (w.r.t. `==`).\n" False UnknownFR),(FunctionInfo "assertValues" (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Assertion","Assertion") [(TVar 0)])))) "Assertion" "`(assertValues s e vs)` asserts (with name `s`) that `vs` is the multiset\nof all values of `e`. All values of `e` are\ncompared with the elements in `vs` w.r.t. `==`.\n" False UnknownFR),(FunctionInfo "assertSolutions" (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (FuncType (FuncType (TVar 0) (TCons ("Prelude","Success") [])) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Assertion","Assertion") [(TVar 0)])))) "Assertion" "`(assertSolutions s c vs)` asserts (with name `s`) that constraint\nabstraction `c` has the multiset of solutions `vs`.\nThe solutions of `c` are compared with the elements in `vs` w.r.t. `==`.\n" False UnknownFR),(FunctionInfo "assertIO" (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (FuncType (TCons ("Prelude","IO") [(TVar 0)]) (FuncType (TVar 0) (TCons ("Assertion","Assertion") [(TVar 0)])))) "Assertion" "`(assertIO s a r)` asserts (with name `s`) that I/O action `a`\nyields the result value `r`.\n" False UnknownFR),(FunctionInfo "assertEqualIO" (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (FuncType (TCons ("Prelude","IO") [(TVar 0)]) (FuncType (TCons ("Prelude","IO") [(TVar 0)]) (TCons ("Assertion","Assertion") [(TVar 0)])))) "Assertion" "`(assertEqualIO s a1 a2)` asserts (with name `s`) that I/O actions `a1`\nand `a2` yield equal (w.r.t. `==`) results.\n" False UnknownFR),(FunctionInfo "seqStrActions" (FuncType (TCons ("Prelude","IO") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","Bool") [])])]) (FuncType (TCons ("Prelude","IO") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","Bool") [])])]) (TCons ("Prelude","IO") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","Bool") [])])]))) "Assertion" "Combines two actions and combines their results.\nUsed by the currytest tool.\n" False UnknownFR),(FunctionInfo "checkAssertion" (FuncType (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","Bool") [])]) (TCons ("Prelude","IO") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","Bool") [])])])) (FuncType (TCons ("Assertion","Assertion") [(TVar 0)]) (TCons ("Prelude","IO") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","Bool") [])])]))) "Assertion" "Executes and checks an assertion, and process the result\nby an I/O action.\nUsed by the currytest tool.\n" False KnownFlex),(FunctionInfo "writeAssertResult" (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","Bool") [])]) (TCons ("Prelude","IO") [(TCons ("Prelude","()") [])])) "Assertion" "Writes the results of assertion checking into a file and stdout,\nif the results are non-empty.\nUsed by the currytest tool.\n" False ConflictFR),(FunctionInfo "showTestMod" (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","IO") [(TCons ("Prelude","()") [])]))) "Assertion" "Sends message to GUI for showing test of a module.\nUsed by the currytest tool.\n" False UnknownFR),(FunctionInfo "showTestCase" (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","Bool") [])]) (TCons ("Prelude","IO") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","Bool") [])])]))) "Assertion" "Sends message to GUI for showing result of executing a test case.\nUsed by the currytest tool.\n" False KnownFlex),(FunctionInfo "showTestEnd" (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","IO") [(TCons ("Prelude","()") [])])) "Assertion" "Sends message to GUI for showing end of module test.\nUsed by the currytest tool.\n" False UnknownFR),(FunctionInfo "showTestCompileError" (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","IO") [(TCons ("Prelude","()") [])])) "Assertion" "Sends message to GUI for showing compilation errors in a module test.\nUsed by the currytest tool.\n" False UnknownFR)] [(TypeInfo "Assertion" [(("Assertion","AssertTrue"),[(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","Bool") [])]),(("Assertion","AssertEqual"),[(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TVar 0),(TVar 0)]),(("Assertion","AssertValues"),[(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TVar 0),(TCons ("Prelude","[]") [(TVar 0)])]),(("Assertion","AssertSolutions"),[(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(FuncType (TVar 0) (TCons ("Prelude","Success") [])),(TCons ("Prelude","[]") [(TVar 0)])]),(("Assertion","AssertIO"),[(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","IO") [(TVar 0)]),(TVar 0)]),(("Assertion","AssertEqualIO"),[(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","IO") [(TVar 0)]),(TCons ("Prelude","IO") [(TVar 0)])])] [0] "Assertion" "Datatype for defining test cases.\n" False),(TypeInfo "ProtocolMsg" [(("Assertion","TestModule"),[(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]),(("Assertion","TestCase"),[(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","Bool") [])]),(("Assertion","TestFinished"),[]),(("Assertion","TestCompileError"),[])] [] "Assertion" "The messages sent to the test GUI.\nUsed by the currytest tool.\n" False)])