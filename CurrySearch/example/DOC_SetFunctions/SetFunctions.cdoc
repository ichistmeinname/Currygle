(CurryInfo (ModuleInfo "SetFunctions" "Michael Hanus" "This module contains a prototypical implementation of\nset functions in PAKCS. The general idea of set functions\nis described in:\n\nS. Antoy, M. Hanus: Set Functions for Functional Logic Programming\nProc. 11th International Conference on Principles and Practice\nof Declarative Programming (PPDP'09), pp. 73-82, ACM Press, 2009\n\nIntuition: If f is an n-ary function, then (setn f) is a set-valued\nfunction that collects all non-determinism caused by f (but not\nthe non-determinism caused by evaluating arguments!) in a set.\nThus, (setn f a1 ... an) returns the set of all\nvalues of (f b1 ... bn) where b1,...,bn are values\nof the arguments a1,...,an (i.e., the arguments are\nevaluated \"outside\" this capsule so that the non-determinism\ncaused by evaluating these arguments is not captured in this capsule\nbut yields several results for (setn...).\nSimilarly, logical variables occuring in a1,...,an are not bound\ninside this capsule (but causes a suspension until they are bound).\nThe set of values returned by a set function is represented\nby an abstract type \"Values\" on which several operations are\ndefined in this module.\n\nRestrictions:\n1. The set is a multiset, i.e., it might contain multiple values.\n2. The multiset of values is completely evaluated when demanded.\n   Thus, if it is infinite, its evaluation will not terminate\n   even if only some elements (e.g., for a containment test)\n   are demanded. However, for the emptiness test, at most one\n   value will be computed\n3. The arguments of a set function are strictly evaluated before\n   the set functions itself will be evaluated.\n\nSince this implementation is restricted and prototypical,\nthe interface is not stable and might change.\n\n") [(FunctionInfo "set0" (FuncType (TVar 0) (TCons ("SetFunctions","Values") [(TVar 0)])) "SetFunctions" "Combinator to transform a 0-ary function into a corresponding set function.\n" False UnknownFR),(FunctionInfo "set1" (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (TVar 0) (TCons ("SetFunctions","Values") [(TVar 1)]))) "SetFunctions" "Combinator to transform a unary function into a corresponding set function.\n" False UnknownFR),(FunctionInfo "set2" (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (TVar 2))) (FuncType (TVar 0) (FuncType (TVar 1) (TCons ("SetFunctions","Values") [(TVar 2)])))) "SetFunctions" "Combinator to transform a binary function into a corresponding set function.\n" False UnknownFR),(FunctionInfo "set3" (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TVar 2) (TVar 3)))) (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TVar 2) (TCons ("SetFunctions","Values") [(TVar 3)]))))) "SetFunctions" "Combinator to transform a function of arity 3\ninto a corresponding set function.\n" False UnknownFR),(FunctionInfo "set4" (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TVar 2) (FuncType (TVar 3) (TVar 4))))) (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TVar 2) (FuncType (TVar 3) (TCons ("SetFunctions","Values") [(TVar 4)])))))) "SetFunctions" "Combinator to transform a function of arity 4\ninto a corresponding set function.\n" False UnknownFR),(FunctionInfo "set5" (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TVar 2) (FuncType (TVar 3) (FuncType (TVar 4) (TVar 5)))))) (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TVar 2) (FuncType (TVar 3) (FuncType (TVar 4) (TCons ("SetFunctions","Values") [(TVar 5)]))))))) "SetFunctions" "Combinator to transform a function of arity 5\ninto a corresponding set function.\n" False UnknownFR),(FunctionInfo "set6" (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TVar 2) (FuncType (TVar 3) (FuncType (TVar 4) (FuncType (TVar 5) (TVar 6))))))) (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TVar 2) (FuncType (TVar 3) (FuncType (TVar 4) (FuncType (TVar 5) (TCons ("SetFunctions","Values") [(TVar 6)])))))))) "SetFunctions" "Combinator to transform a function of arity 6\ninto a corresponding set function.\n" False UnknownFR),(FunctionInfo "set7" (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TVar 2) (FuncType (TVar 3) (FuncType (TVar 4) (FuncType (TVar 5) (FuncType (TVar 6) (TVar 7)))))))) (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TVar 2) (FuncType (TVar 3) (FuncType (TVar 4) (FuncType (TVar 5) (FuncType (TVar 6) (TCons ("SetFunctions","Values") [(TVar 7)]))))))))) "SetFunctions" "Combinator to transform a function of arity 7\ninto a corresponding set function.\n" False UnknownFR),(FunctionInfo "isEmpty" (FuncType (TCons ("SetFunctions","Values") [(TVar 0)]) (TCons ("Prelude","Bool") [])) "SetFunctions" "Is a multiset of values empty?\n" False KnownFlex),(FunctionInfo "valueOf" (FuncType (TVar 0) (FuncType (TCons ("SetFunctions","Values") [(TVar 0)]) (TCons ("Prelude","Bool") []))) "SetFunctions" "Is some value an element of a multiset of values?\n" False KnownFlex),(FunctionInfo "contains" (FuncType (TVar 0) (FuncType (TCons ("SetFunctions","Values") [(TVar 0)]) (TCons ("Prelude","Bool") []))) "SetFunctions" "Do not use. Use valueOf!\n" False UnknownFR),(FunctionInfo "mapValues" (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (TCons ("SetFunctions","Values") [(TVar 0)]) (TCons ("SetFunctions","Values") [(TVar 1)]))) "SetFunctions" "Accumulates all elements of a multiset of values by applying a binary\noperation. This is similarly to fold on lists, but the binary operation\nmust be <b>commutative</b> so that the result is independent of the order\nof applying this operation to all elements in the multiset.\n" False KnownFlex),(FunctionInfo "foldValues" (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))) (FuncType (TVar 0) (FuncType (TCons ("SetFunctions","Values") [(TVar 0)]) (TVar 0)))) "SetFunctions" "Accumulates all elements of a multiset of values by applying a binary\noperation. This is similarly to fold on lists, but the binary operation\nmust be <b>commutative</b> so that the result is independent of the order\nof applying this operation to all elements in the multiset.\n" False KnownFlex),(FunctionInfo "minValue" (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (TCons ("SetFunctions","Values") [(TVar 0)]) (TVar 0))) "SetFunctions" "Returns the minimal element of a non-empty multiset of values\nwith respect to a given total ordering on the elements.\n" False KnownFlex),(FunctionInfo "maxValue" (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (TCons ("SetFunctions","Values") [(TVar 0)]) (TVar 0))) "SetFunctions" "Returns the maximal element of a non-empty multiset of value\nwith respect to a given total ordering on the elements.\n" False KnownFlex),(FunctionInfo "values2list" (FuncType (TCons ("SetFunctions","Values") [(TVar 0)]) (TCons ("Prelude","IO") [(TCons ("Prelude","[]") [(TVar 0)])])) "SetFunctions" "Puts all elements of a multiset of values in a list.\nSince the order of the elements in the list might depend on\nthe time of the computation, this operation is an I/O action.\n" False KnownFlex),(FunctionInfo "printValues" (FuncType (TCons ("SetFunctions","Values") [(TVar 0)]) (TCons ("Prelude","IO") [(TCons ("Prelude","()") [])])) "SetFunctions" "Prints all elements of a multiset of values.\n" False UnknownFR),(FunctionInfo "sortValues" (FuncType (TCons ("SetFunctions","Values") [(TVar 0)]) (TCons ("Prelude","[]") [(TVar 0)])) "SetFunctions" "Transforms a multiset of values into a list sorted by\nthe standard term ordering. As a consequence, the multiset of values\nis completely evaluated.\n" False UnknownFR),(FunctionInfo "sortValuesBy" (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (TCons ("SetFunctions","Values") [(TVar 0)]) (TCons ("Prelude","[]") [(TVar 0)]))) "SetFunctions" "Transforms a multiset of values into a list sorted by a given ordering\non the values. As a consequence, the multiset of values\nis completely evaluated.\nIn order to ensure that the result of this operation is independent of the\nevaluation order, the given ordering must be a total order.\n" False KnownFlex)] [(TypeInfo "Values" [] [0] "SetFunctions" "Abstract type representing multisets of values.\n" False)])