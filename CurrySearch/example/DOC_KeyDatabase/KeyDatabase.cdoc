(CurryInfo (ModuleInfo "KeyDatabase" "Bernd Brassel, Michael Hanus" "This module provides a general interface for databases\n(persistent predicates) where each entry consists of a key and an info\npart. The key is an integer and the info is arbitrary.\nAll functions are parameterized with a dynamic predicate that\ntakes an integer key as a first parameter.\n\n") [(FunctionInfo "existsDBKey" (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("Dynamic","Dynamic") []))) (FuncType (TCons ("Prelude","Int") []) (TCons ("Database","Query") [(TCons ("Prelude","Bool") [])]))) "KeyDatabase" "Exists an entry with a given key in the database?\n" False UnknownFR),(FunctionInfo "allDBKeys" (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("Dynamic","Dynamic") []))) (TCons ("Database","Query") [(TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])])])) "KeyDatabase" "Query that returns all keys of entries in the database.\n" False UnknownFR),(FunctionInfo "allDBInfos" (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("Dynamic","Dynamic") []))) (TCons ("Database","Query") [(TCons ("Prelude","[]") [(TVar 0)])])) "KeyDatabase" "Query that returns all infos of entries in the database.\n" False UnknownFR),(FunctionInfo "allDBKeyInfos" (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("Dynamic","Dynamic") []))) (TCons ("Database","Query") [(TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","Int") []),(TVar 0)])])])) "KeyDatabase" "Query that returns all key/info pairs of the database.\n" False UnknownFR),(FunctionInfo "getDBInfo" (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("Dynamic","Dynamic") []))) (FuncType (TCons ("Prelude","Int") []) (TCons ("Database","Query") [(TCons ("Prelude","Maybe") [(TVar 0)])]))) "KeyDatabase" "Gets the information about an entry in the database.\n" False UnknownFR),(FunctionInfo "index" (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","Int") []))) "KeyDatabase" "compute the position of an entry in a list\nfail, if given entry is not an element.\n" False UnknownFR),(FunctionInfo "sortByIndex" (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","Int") []),(TVar 0)])]) (TCons ("Prelude","[]") [(TVar 0)])) "KeyDatabase" "Sorts a given list by associated index .\n" False UnknownFR),(FunctionInfo "groupByIndex" (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","Int") []),(TVar 0)])]) (TCons ("Prelude","[]") [(TCons ("Prelude","[]") [(TVar 0)])])) "KeyDatabase" "Sorts a given list by associated index and group for identical index.\nEmpty lists are added for missing indexes\n" False UnknownFR),(FunctionInfo "getDBInfos" (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("Dynamic","Dynamic") []))) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])]) (TCons ("Database","Query") [(TCons ("Prelude","Maybe") [(TCons ("Prelude","[]") [(TVar 0)])])]))) "KeyDatabase" "Gets the information about a list of entries in the database.\n" False UnknownFR),(FunctionInfo "deleteDBEntry" (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("Dynamic","Dynamic") []))) (FuncType (TCons ("Prelude","Int") []) (TCons ("Database","Transaction") [(TCons ("Prelude","()") [])]))) "KeyDatabase" "Deletes an entry with a given key in the database.\nNo error is raised if the given key does not exist.\n" False UnknownFR),(FunctionInfo "deleteDBEntries" (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("Dynamic","Dynamic") []))) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])]) (TCons ("Database","Transaction") [(TCons ("Prelude","()") [])]))) "KeyDatabase" "Deletes all entries with the given keys in the database.\nNo error is raised if some of the given keys does not exist.\n" False UnknownFR),(FunctionInfo "updateDBEntry" (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("Dynamic","Dynamic") []))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("Database","Transaction") [(TCons ("Prelude","()") [])])))) "KeyDatabase" "Overwrites an existing entry in the database.\n" False UnknownFR),(FunctionInfo "newDBEntry" (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("Dynamic","Dynamic") []))) (FuncType (TVar 0) (TCons ("Database","Transaction") [(TCons ("Prelude","Int") [])]))) "KeyDatabase" "Stores a new entry in the database and return the key of the new entry.\n" False UnknownFR),(FunctionInfo "newDBKeyEntry" (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("Dynamic","Dynamic") []))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("Database","Transaction") [(TCons ("Prelude","()") [])])))) "KeyDatabase" "Stores a new entry in the database under a given key.\nThe transaction fails if the key already exists.\n" False UnknownFR),(FunctionInfo "cleanDB" (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("Dynamic","Dynamic") []))) (TCons ("Database","Transaction") [(TCons ("Prelude","()") [])])) "KeyDatabase" "Deletes all entries in the database.\n" False UnknownFR)] [])