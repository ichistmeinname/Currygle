(CurryInfo (ModuleInfo "Database" "Michael Hanus" "Library for accessing and storing data in databases.\nThe contents of a database is represented in this library\nas dynamic predicates that are defined by facts than can change over\ntime and can be persistently stored.\nAll functions in this library distinguishes between <em>queries</em> that\naccess the database and <em>transactions</em> that manipulates data\nin the database. Transactions have a monadic structure.\nBoth queries and transactions can be executed as I/O actions.\nHowever, arbitrary I/O actions cannot be embedded in transactions.\n\nA dynamic predicate <code>p</code> with arguments of type\n<code>t1,...,tn</code> must be declared by:\n\n<code>p :: t1 -> ... -> tn -> Dynamic</code><br/>\n<code>p = dynamic</code>\n\n\nA dynamic predicate where all facts should be persistently stored\nin the directory <code>DIR</code> must be declared by:\n\n<code>p :: t1 -> ... -> tn -> Dynamic</code><br/>\n<code>p = persistent \"file:DIR\"</code>\n\n") [(FunctionInfo "queryAll" (FuncType (FuncType (TVar 0) (TCons ("Dynamic","Dynamic") [])) (TCons ("Database","Query") [(TCons ("Prelude","[]") [(TVar 0)])])) "Database" "A database query that returns all answers to an abstraction on a\ndynamic expression.\n" False UnknownFR),(FunctionInfo "queryOne" (FuncType (FuncType (TVar 0) (TCons ("Dynamic","Dynamic") [])) (TCons ("Database","Query") [(TCons ("Prelude","Maybe") [(TVar 0)])])) "Database" "A database query that returns a single answer to an abstraction on a\ndynamic expression. It returns Nothing if no answer exists.\n" False UnknownFR),(FunctionInfo "queryOneWithDefault" (FuncType (TVar 0) (FuncType (FuncType (TVar 0) (TCons ("Dynamic","Dynamic") [])) (TCons ("Database","Query") [(TVar 0)]))) "Database" "A database query that returns a single answer to an abstraction on a\ndynamic expression. It returns the first argument if no answer exists.\n" False UnknownFR),(FunctionInfo "queryJustOne" (FuncType (FuncType (TVar 0) (TCons ("Dynamic","Dynamic") [])) (TCons ("Database","Query") [(TVar 0)])) "Database" "A database query that returns a single answer to an abstraction on a\ndynamic expression. It fails if no answer exists.\n" False UnknownFR),(FunctionInfo "dynamicExists" (FuncType (TCons ("Dynamic","Dynamic") []) (TCons ("Database","Query") [(TCons ("Prelude","Bool") [])])) "Database" "A database query that returns True if there exists the argument facts\n(without free variables!) and False, otherwise.\n" False UnknownFR),(FunctionInfo "transformQ" (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (TCons ("Database","Query") [(TVar 0)]) (TCons ("Database","Query") [(TVar 1)]))) "Database" "Transforms a database query from one result type to another\naccording to a given mapping.\n" False KnownFlex),(FunctionInfo "runQ" (FuncType (TCons ("Database","Query") [(TVar 0)]) (TCons ("Prelude","IO") [(TVar 0)])) "Database" "Executes a database query on the current state of dynamic predicates.\nIf other processes made changes to persistent predicates,\nthese changes are read and made visible to the currently running program.\n" False KnownFlex),(FunctionInfo "showTError" (FuncType (TCons ("Database","TError") []) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])) "Database" "Transforms a transaction error into a string.\n" False KnownFlex),(FunctionInfo "addDB" (FuncType (TCons ("Dynamic","Dynamic") []) (TCons ("Database","Transaction") [(TCons ("Prelude","()") [])])) "Database" "Adds new facts (without free variables!) about dynamic predicates.\nConditional dynamics are added only if the condition holds.\n" False UnknownFR),(FunctionInfo "deleteDB" (FuncType (TCons ("Dynamic","Dynamic") []) (TCons ("Database","Transaction") [(TCons ("Prelude","()") [])])) "Database" "Deletes facts (without free variables!) about dynamic predicates.\nConditional dynamics are deleted only if the condition holds.\n" False UnknownFR),(FunctionInfo "getDB" (FuncType (TCons ("Database","Query") [(TVar 0)]) (TCons ("Database","Transaction") [(TVar 0)])) "Database" "Returns the result of a database query in a transaction.\n" False KnownFlex),(FunctionInfo "returnT" (FuncType (TVar 0) (TCons ("Database","Transaction") [(TVar 0)])) "Database" "The empty transaction that directly returns its argument.\n" False UnknownFR),(FunctionInfo "doneT" (TCons ("Database","Transaction") [(TCons ("Prelude","()") [])]) "Database" "The empty transaction that returns nothing.\n" False UnknownFR),(FunctionInfo "errorT" (FuncType (TCons ("Database","TError") []) (TCons ("Database","Transaction") [(TVar 0)])) "Database" "Abort a transaction with a specific transaction error.\n" False UnknownFR),(FunctionInfo "failT" (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Database","Transaction") [(TVar 0)])) "Database" "Abort a transaction with a general error message.\n" False UnknownFR),(FunctionInfo "|>>=" (FuncType (TCons ("Database","Transaction") [(TVar 0)]) (FuncType (FuncType (TVar 0) (TCons ("Database","Transaction") [(TVar 1)])) (TCons ("Database","Transaction") [(TVar 1)]))) "Database" "Sequential composition of transactions.\n" False KnownFlex),(FunctionInfo "|>>" (FuncType (TCons ("Database","Transaction") [(TVar 0)]) (FuncType (TCons ("Database","Transaction") [(TVar 1)]) (TCons ("Database","Transaction") [(TVar 1)]))) "Database" "Sequential composition of transactions.\n" False UnknownFR),(FunctionInfo "sequenceT" (FuncType (TCons ("Prelude","[]") [(TCons ("Database","Transaction") [(TVar 0)])]) (TCons ("Database","Transaction") [(TCons ("Prelude","[]") [(TVar 0)])])) "Database" "Executes a sequence of transactions and collects all results in a list.\n" False KnownFlex),(FunctionInfo "sequenceT_" (FuncType (TCons ("Prelude","[]") [(TCons ("Database","Transaction") [(TVar 0)])]) (TCons ("Database","Transaction") [(TCons ("Prelude","()") [])])) "Database" "Executes a sequence of transactions and ignores the results.\n" False UnknownFR),(FunctionInfo "mapT" (FuncType (FuncType (TVar 0) (TCons ("Database","Transaction") [(TVar 1)])) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Database","Transaction") [(TCons ("Prelude","[]") [(TVar 1)])]))) "Database" "Maps a transaction function on a list of elements.\nThe results of all transactions are collected in a list.\n" False UnknownFR),(FunctionInfo "mapT_" (FuncType (FuncType (TVar 0) (TCons ("Database","Transaction") [(TVar 1)])) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Database","Transaction") [(TCons ("Prelude","()") [])]))) "Database" "Maps a transaction function on a list of elements.\nThe results of all transactions are ignored.\n" False UnknownFR),(FunctionInfo "runT" (FuncType (TCons ("Database","Transaction") [(TVar 0)]) (TCons ("Prelude","IO") [(TCons ("Prelude","Either") [(TVar 0),(TCons ("Database","TError") [])])])) "Database" "Executes a possibly composed transaction on the current state\nof dynamic predicates as a single transaction.\n\nBefore the transaction is executed, the access to all persistent\npredicates is locked (i.e., no other process can perform a\ntransaction in parallel).\nAfter the successful transaction, the access is unlocked so that\nthe updates performed in this transaction become persistent and\nvisible to other processes.\nOtherwise (i.e., in case of a failure or abort of the transaction),\nthe changes of the transaction to persistent predicates are\nignored and Nothing is returned.\n\nIn general, a transaction should terminate and all failures inside\na transaction should be handled (execept for an explicit <code>failT</code>\nthat leads to an abort of the transaction).\nIf a transaction is externally interrupted (e.g., by killing the process),\nsome locks might never be removed. However, they\ncan be explicitly removed by deleting the corresponding lock files\nreported at startup time.\n" False UnknownFR),(FunctionInfo "runJustT" (FuncType (TCons ("Database","Transaction") [(TVar 0)]) (TCons ("Prelude","IO") [(TVar 0)])) "Database" "Executes a possibly composed transaction on the current state\nof dynamic predicates as a single transaction.\nSimilarly to <code>runT</code> but a run-time error is raised\nif the execution of the transaction fails.\n" False UnknownFR),(FunctionInfo "runTNA" (FuncType (TCons ("Database","Transaction") [(TVar 0)]) (TCons ("Prelude","IO") [(TCons ("Prelude","Either") [(TVar 0),(TCons ("Database","TError") [])])])) "Database" "Executes a possibly composed transaction as a Non-Atomic(!)\nsequence of its individual database updates.\nThus, the argument is not executed as a single transaction\nin contrast to <code>runT</code>, i.e., no predicates are\nlocked and individual updates are not undone in case of a\ntransaction error.\nThis operation could be applied to execute a composed transaction\nwithout the overhead caused by (the current implementation of)\ntransactions if one is sure that locking is not necessary\n(e.g., if the transaction contains only database reads and\ntransaction error raising).\n" False UnknownFR)] [(TypeInfo "Query" [] [0] "Database" "Abstract datatype to represent database queries.\n" False),(TypeInfo "TError" [(("Database","TError"),[(TCons ("Database","TErrorKind") []),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])] [] "Database" "The type of errors that might occur during a transaction.\n" False),(TypeInfo "TErrorKind" [(("Database","KeyNotExistsError"),[]),(("Database","NoRelationshipError"),[]),(("Database","DuplicateKeyError"),[]),(("Database","KeyRequiredError"),[]),(("Database","UniqueError"),[]),(("Database","MinError"),[]),(("Database","MaxError"),[]),(("Database","UserDefinedError"),[]),(("Database","ExecutionError"),[])] [] "Database" "The various kinds of transaction errors.\n" False),(TypeInfo "Transaction" [] [0] "Database" "Abstract datatype for representing transactions.\n" False)])