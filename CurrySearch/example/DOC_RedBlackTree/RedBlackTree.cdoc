(CurryInfo (ModuleInfo "RedBlackTree" "Johannes Koj, Michael Hanus, Bernd Brassel" "Library with an implementation of red-black trees:\n<P>\nServes as the base for both TableRBT and SetRBT\nAll the operations on trees are generic, i.e., one has to provide\ntwo explicit order predicates (\"<CODE>lessThan</CODE>\" and \"<CODE>eq</CODE>\"below) \non elements.\n\n") [(FunctionInfo "empty" (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (TCons ("RedBlackTree","RedBlackTree") [(TVar 0)])))) "RedBlackTree" "The three relations are inserted into the structure by function empty.\nReturns an empty tree, i.e., an empty red-black tree \naugmented with the order predicates.\n" False UnknownFR),(FunctionInfo "isEmpty" (FuncType (TCons ("RedBlackTree","RedBlackTree") [(TVar 0)]) (TCons ("Prelude","Bool") [])) "RedBlackTree" "Test on emptyness\n" False KnownFlex),(FunctionInfo "newTreeLike" (FuncType (TCons ("RedBlackTree","RedBlackTree") [(TVar 0)]) (TCons ("RedBlackTree","RedBlackTree") [(TVar 0)])) "RedBlackTree" "Creates a new empty red black tree from with the same ordering as a give one.\n" False KnownFlex),(FunctionInfo "lookup" (FuncType (TVar 0) (FuncType (TCons ("RedBlackTree","RedBlackTree") [(TVar 0)]) (TCons ("Prelude","Maybe") [(TVar 0)]))) "RedBlackTree" "Returns an element if it is contained in a red-black tree.\n" False KnownFlex),(FunctionInfo "update" (FuncType (TVar 0) (FuncType (TCons ("RedBlackTree","RedBlackTree") [(TVar 0)]) (TCons ("RedBlackTree","RedBlackTree") [(TVar 0)]))) "RedBlackTree" "Updates/inserts an element into a RedBlackTree.\n" False KnownFlex),(FunctionInfo "delete" (FuncType (TVar 0) (FuncType (TCons ("RedBlackTree","RedBlackTree") [(TVar 0)]) (TCons ("RedBlackTree","RedBlackTree") [(TVar 0)]))) "RedBlackTree" "Deletes entry from red black tree.\n" False KnownFlex),(FunctionInfo "tree2list" (FuncType (TCons ("RedBlackTree","RedBlackTree") [(TVar 0)]) (TCons ("Prelude","[]") [(TVar 0)])) "RedBlackTree" "Transforms a red-black tree into an ordered list of its elements.\n" False KnownFlex),(FunctionInfo "sort" (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","[]") [(TVar 0)]))) "RedBlackTree" "Generic sort based on insertion into red-black trees.\nThe first argument is the order for the elements.\n" False UnknownFR),(FunctionInfo "setInsertEquivalence" (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (TCons ("RedBlackTree","RedBlackTree") [(TVar 0)]) (TCons ("RedBlackTree","RedBlackTree") [(TVar 0)]))) "RedBlackTree" "For compatibility with old version only\n" False KnownFlex)] [(TypeInfo "RedBlackTree" [] [0] "RedBlackTree" "A red-black tree consists of a tree structure and three order predicates.\nThese predicates generalize the red black tree. They define\n1) equality when inserting into the tree<br>\n   eg for a set eqInsert is (==), \n      for a multiset it is (\\ _ _ -> False)\n      for a lookUp-table it is ((==) . fst) \n2) equality for looking up values \n   eg for a set eqLookUp is (==), \n      for a multiset it is (==)\n      for a lookUp-table it is ((==) . fst) \n3) the (less than) relation for the binary search tree\n" False)])