(CurryInfo (ModuleInfo "CLPR" [] "Library for constraint programming with arithmetic constraints over reals.\n") [(FunctionInfo "+." (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) "CLPR" "Addition on floats in arithmetic constraints.\n" False UnknownFR),(FunctionInfo "-." (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) "CLPR" "Subtraction on floats in arithmetic constraints.\n" False UnknownFR),(FunctionInfo "*." (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) "CLPR" "Multiplication on floats in arithmetic constraints.\n" False UnknownFR),(FunctionInfo "/." (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) "CLPR" "Division on floats in arithmetic constraints.\n" False UnknownFR),(FunctionInfo "<." (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Success") []))) "CLPR" "\"Less than\" constraint on floats.\n" False UnknownFR),(FunctionInfo ">." (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Success") []))) "CLPR" "\"Greater than\" constraint on floats.\n" False UnknownFR),(FunctionInfo "<=." (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Success") []))) "CLPR" "\"Less than or equal\" constraint on floats.\n" False UnknownFR),(FunctionInfo ">=." (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Success") []))) "CLPR" "\"Greater than or equal\" constraint on floats.\n" False UnknownFR),(FunctionInfo "i2f" (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Float") [])) "CLPR" "Conversion function from integers to floats.\nRigid in the first argument, i.e., suspends until the first argument\nis ground.\n" False UnknownFR),(FunctionInfo "minimumFor" (FuncType (FuncType (TVar 0) (TCons ("Prelude","Success") [])) (FuncType (FuncType (TVar 0) (TCons ("Prelude","Float") [])) (TVar 0))) "CLPR" "Computes the minimum with respect to a given constraint.\n(minimumFor g f) evaluates to x if (g x) is satisfied and\n(f x) is minimal. The evaluation fails if such a minimal value\ndoes not exist. The evaluation suspends if it contains\nunbound non-local variables.\n" False UnknownFR),(FunctionInfo "minimize" (FuncType (FuncType (TVar 0) (TCons ("Prelude","Success") [])) (FuncType (FuncType (TVar 0) (TCons ("Prelude","Float") [])) (FuncType (TVar 0) (TCons ("Prelude","Success") [])))) "CLPR" "Minimization constraint.\n(minimize g f x) is satisfied if (g x) is satisfied and\n(f x) is minimal. The evaluation suspends if it contains\nunbound non-local variables.\n" False UnknownFR),(FunctionInfo "maximumFor" (FuncType (FuncType (TVar 0) (TCons ("Prelude","Success") [])) (FuncType (FuncType (TVar 0) (TCons ("Prelude","Float") [])) (TVar 0))) "CLPR" "Computes the maximum with respect to a given constraint.\n(maximumFor g f) evaluates to x if (g x) is satisfied and\n(f x) is maximal. The evaluation fails if such a maximal value\ndoes not exist. The evaluation suspends if it contains\nunbound non-local variables.\n" False UnknownFR),(FunctionInfo "maximize" (FuncType (FuncType (TVar 0) (TCons ("Prelude","Success") [])) (FuncType (FuncType (TVar 0) (TCons ("Prelude","Float") [])) (FuncType (TVar 0) (TCons ("Prelude","Success") [])))) "CLPR" "Maximization constraint.\n(maximize g f x) is satisfied if (g x) is satisfied and\n(f x) is maximal. The evaluation suspends if it contains\nunbound non-local variables.\n" False UnknownFR)] [])