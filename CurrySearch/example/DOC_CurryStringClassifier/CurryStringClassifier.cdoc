(CurryInfo (ModuleInfo "CurryStringClassifier" "Bernd Brassel" "The Curry string classifier is a simple tool to process strings containing \nCurry source code. The source string is classified into the following\ncategories:\n\n  * moduleHead - module interface, imports, operators\n\n  * code - the part where the actual program is defined\n\n  * big comment - parts enclosed in {- ... -}\n\n  * small comment - from \"--\" to the end of a line\n\n  * text - a string, i.e. text enclosed in \"...\"\n\n  * letter - the given string is the representation of a character\n\n  * meta - containing information for meta programming\n\nFor an example to use the state scanner cf. addtypes, the tool \nto add function types to a given program.\n\n") [(FunctionInfo "isSmallComment" (FuncType (TCons ("CurryStringClassifier","Token") []) (TCons ("Prelude","Bool") [])) "CurryStringClassifier" "test for category \"SmallComment\"\n" False KnownRigid),(FunctionInfo "isBigComment" (FuncType (TCons ("CurryStringClassifier","Token") []) (TCons ("Prelude","Bool") [])) "CurryStringClassifier" "test for category \"BigComment\"\n" False KnownRigid),(FunctionInfo "isComment" (FuncType (TCons ("CurryStringClassifier","Token") []) (TCons ("Prelude","Bool") [])) "CurryStringClassifier" "test if given token is a comment (big or small)\n" False UnknownFR),(FunctionInfo "isText" (FuncType (TCons ("CurryStringClassifier","Token") []) (TCons ("Prelude","Bool") [])) "CurryStringClassifier" "test for category \"Text\" (String)\n" False KnownRigid),(FunctionInfo "isLetter" (FuncType (TCons ("CurryStringClassifier","Token") []) (TCons ("Prelude","Bool") [])) "CurryStringClassifier" "test for category \"Letter\" (Char)\n" False KnownRigid),(FunctionInfo "isCode" (FuncType (TCons ("CurryStringClassifier","Token") []) (TCons ("Prelude","Bool") [])) "CurryStringClassifier" "test for category \"Code\"\n" False KnownRigid),(FunctionInfo "isModuleHead" (FuncType (TCons ("CurryStringClassifier","Token") []) (TCons ("Prelude","Bool") [])) "CurryStringClassifier" "test for category \"ModuleHead\", ie imports and operator declarations\n" False KnownRigid),(FunctionInfo "isMeta" (FuncType (TCons ("CurryStringClassifier","Token") []) (TCons ("Prelude","Bool") [])) "CurryStringClassifier" "test for category \"Meta\", ie between {+ and +}\n" False KnownRigid),(FunctionInfo "scan" (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("CurryStringClassifier","Token") [])])) "CurryStringClassifier" "Divides the given string into the six categories.\nFor applications it is important to know whether a given part of\ncode is at the beginning of a line or in the middle. The state scanner\norganizes the code in such a way that every string categorized as \n\"Code\" <b>always</b> starts in the middle of a line.\n" False UnknownFR),(FunctionInfo "plainCode" (FuncType (TCons ("Prelude","[]") [(TCons ("CurryStringClassifier","Token") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])) "CurryStringClassifier" "Yields the program code without comments \n(but with the line breaks for small comments).\n" False ConflictFR),(FunctionInfo "unscan" (FuncType (TCons ("Prelude","[]") [(TCons ("CurryStringClassifier","Token") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])) "CurryStringClassifier" "Inverse function of scan, i.e., unscan (scan x) = x.\nunscan is used to yield a program after changing the list of tokens.\n" False ConflictFR),(FunctionInfo "readScan" (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","IO") [(TCons ("Prelude","[]") [(TCons ("CurryStringClassifier","Token") [])])])) "CurryStringClassifier" "return tokens for given filename\n" False UnknownFR),(FunctionInfo "testScan" (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","IO") [(TCons ("Prelude","()") [])])) "CurryStringClassifier" "test whether (unscan . scan) is identity\n" False UnknownFR)] [(TypeInfo "Tokens" [(("CurryStringClassifier","Tokens"),[(TCons ("Prelude","[]") [(TCons ("CurryStringClassifier","Token") [])])])] [] "CurryStringClassifier" [] True),(TypeInfo "Token" [(("CurryStringClassifier","SmallComment"),[(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]),(("CurryStringClassifier","BigComment"),[(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]),(("CurryStringClassifier","Text"),[(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]),(("CurryStringClassifier","Letter"),[(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]),(("CurryStringClassifier","Code"),[(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]),(("CurryStringClassifier","ModuleHead"),[(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]),(("CurryStringClassifier","Meta"),[(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])] [] "CurryStringClassifier" "The different categories to classify the source code.\n" False)])