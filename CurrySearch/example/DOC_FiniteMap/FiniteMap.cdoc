(CurryInfo (ModuleInfo "FiniteMap" "Frank Huch, Bernd Brassel" "A finite map is an efficient purely functional data structure \nto store a mapping from keys to values.\nIn order to store the mapping efficiently, an irreflexive(!) order predicate \nhas to be given, i.e., the order predicate <code>le</code> should not satisfy\n<code>(le x x)</code> for some key <code>x</code>.\n\nExample: To store a mapping from Int -&gt; String, the finite map needs\na Boolean predicate like (&lt;).\nThis version was ported from a corresponding Haskell library\n\n") [(FunctionInfo "emptyFM" (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (TCons ("FiniteMap","FM") [(TVar 0),(TVar 1)])) "FiniteMap" "The empty finite map.\n" False UnknownFR),(FunctionInfo "unitFM" (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (TVar 0) (FuncType (TVar 1) (TCons ("FiniteMap","FM") [(TVar 0),(TVar 1)])))) "FiniteMap" "Construct a finite map with only a single element.\n" False UnknownFR),(FunctionInfo "listToFM" (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TVar 0),(TVar 1)])]) (TCons ("FiniteMap","FM") [(TVar 0),(TVar 1)]))) "FiniteMap" "Builts a finite map from given list of tuples (key,element).\nFor multiple occurences of key, the last corresponding \nelement of the list is taken.\n" False UnknownFR),(FunctionInfo "addToFM" (FuncType (TCons ("FiniteMap","FM") [(TVar 0),(TVar 1)]) (FuncType (TVar 0) (FuncType (TVar 1) (TCons ("FiniteMap","FM") [(TVar 0),(TVar 1)])))) "FiniteMap" "Throws away any previous binding and stores the new one given.\n" False KnownFlex),(FunctionInfo "addListToFM" (FuncType (TCons ("FiniteMap","FM") [(TVar 0),(TVar 1)]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TVar 0),(TVar 1)])]) (TCons ("FiniteMap","FM") [(TVar 0),(TVar 1)]))) "FiniteMap" "Throws away any previous bindings and stores the new ones given.\nThe items are added starting with the first one in the list\n" False KnownFlex),(FunctionInfo "addToFM_C" (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))) (FuncType (TCons ("FiniteMap","FM") [(TVar 1),(TVar 0)]) (FuncType (TVar 1) (FuncType (TVar 0) (TCons ("FiniteMap","FM") [(TVar 1),(TVar 0)]))))) "FiniteMap" "Instead of throwing away the old binding, \naddToFM_C combines the new element with the old one.\n" False KnownFlex),(FunctionInfo "addListToFM_C" (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))) (FuncType (TCons ("FiniteMap","FM") [(TVar 1),(TVar 0)]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TVar 1),(TVar 0)])]) (TCons ("FiniteMap","FM") [(TVar 1),(TVar 0)])))) "FiniteMap" "Combine with a list of tuples (key,element), cf. addToFM_C\n" False KnownFlex),(FunctionInfo "delFromFM" (FuncType (TCons ("FiniteMap","FM") [(TVar 0),(TVar 1)]) (FuncType (TVar 0) (TCons ("FiniteMap","FM") [(TVar 0),(TVar 1)]))) "FiniteMap" "Deletes key from finite map.\nDeletion doesn't complain if you try to delete something\nwhich isn't there\n" False KnownFlex),(FunctionInfo "delListFromFM" (FuncType (TCons ("FiniteMap","FM") [(TVar 0),(TVar 1)]) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("FiniteMap","FM") [(TVar 0),(TVar 1)]))) "FiniteMap" "Deletes a list of keys from finite map.\nDeletion doesn't complain if you try to delete something\nwhich isn't there\n" False KnownFlex),(FunctionInfo "updFM" (FuncType (TCons ("FiniteMap","FM") [(TVar 0),(TVar 1)]) (FuncType (TVar 0) (FuncType (FuncType (TVar 1) (TVar 1)) (TCons ("FiniteMap","FM") [(TVar 0),(TVar 1)])))) "FiniteMap" "Applies a function to element bound to given key.\n" False KnownFlex),(FunctionInfo "splitFM" (FuncType (TCons ("FiniteMap","FM") [(TVar 0),(TVar 1)]) (FuncType (TVar 0) (TCons ("Prelude","Maybe") [(TCons ("Prelude","(,)") [(TCons ("FiniteMap","FM") [(TVar 0),(TVar 1)]),(TCons ("Prelude","(,)") [(TVar 0),(TVar 1)])])]))) "FiniteMap" "Combines delFrom and lookup.\n" False UnknownFR),(FunctionInfo "plusFM" (FuncType (TCons ("FiniteMap","FM") [(TVar 0),(TVar 1)]) (FuncType (TCons ("FiniteMap","FM") [(TVar 0),(TVar 1)]) (TCons ("FiniteMap","FM") [(TVar 0),(TVar 1)]))) "FiniteMap" "Efficiently add key/element mappings of two maps into a single one.\nBindings in right argument shadow those in the left\n" False KnownFlex),(FunctionInfo "plusFM_C" (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))) (FuncType (TCons ("FiniteMap","FM") [(TVar 1),(TVar 0)]) (FuncType (TCons ("FiniteMap","FM") [(TVar 1),(TVar 0)]) (TCons ("FiniteMap","FM") [(TVar 1),(TVar 0)])))) "FiniteMap" "Efficiently combine key/element mappings of two maps into a single one, \ncf. addToFM_C\n" False KnownFlex),(FunctionInfo "minusFM" (FuncType (TCons ("FiniteMap","FM") [(TVar 0),(TVar 1)]) (FuncType (TCons ("FiniteMap","FM") [(TVar 0),(TVar 1)]) (TCons ("FiniteMap","FM") [(TVar 0),(TVar 1)]))) "FiniteMap" "(minusFM a1 a2) deletes from a1 any bindings which are bound in a2\n" False KnownFlex),(FunctionInfo "intersectFM" (FuncType (TCons ("FiniteMap","FM") [(TVar 0),(TVar 1)]) (FuncType (TCons ("FiniteMap","FM") [(TVar 0),(TVar 1)]) (TCons ("FiniteMap","FM") [(TVar 0),(TVar 1)]))) "FiniteMap" "Filters only those keys that are bound in both of the given maps.\nThe elements will be taken from the second map.\n" False KnownFlex),(FunctionInfo "intersectFM_C" (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TVar 1))) (FuncType (TCons ("FiniteMap","FM") [(TVar 2),(TVar 0)]) (FuncType (TCons ("FiniteMap","FM") [(TVar 2),(TVar 0)]) (TCons ("FiniteMap","FM") [(TVar 2),(TVar 1)])))) "FiniteMap" "Filters only those keys that are bound in both of the given maps\nand combines the elements as in addToFM_C.\n" False KnownFlex),(FunctionInfo "foldFM" (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TVar 2) (TVar 2)))) (FuncType (TVar 2) (FuncType (TCons ("FiniteMap","FM") [(TVar 0),(TVar 1)]) (TVar 2)))) "FiniteMap" "Folds finite map by given function.\n" False KnownFlex),(FunctionInfo "mapFM" (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (TVar 2))) (FuncType (TCons ("FiniteMap","FM") [(TVar 0),(TVar 1)]) (TCons ("FiniteMap","FM") [(TVar 0),(TVar 2)]))) "FiniteMap" "Applies a given function on every element in the map.\n" False KnownFlex),(FunctionInfo "filterFM" (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (TCons ("Prelude","Bool") []))) (FuncType (TCons ("FiniteMap","FM") [(TVar 0),(TVar 1)]) (TCons ("FiniteMap","FM") [(TVar 0),(TVar 1)]))) "FiniteMap" "Yields a new finite map with only those key/element pairs matching the\ngiven predicate.\n" False KnownFlex),(FunctionInfo "sizeFM" (FuncType (TCons ("FiniteMap","FM") [(TVar 0),(TVar 1)]) (TCons ("Prelude","Int") [])) "FiniteMap" "How many elements does given map contain?\n" False KnownFlex),(FunctionInfo "eqFM" (FuncType (TCons ("FiniteMap","FM") [(TVar 0),(TVar 1)]) (FuncType (TCons ("FiniteMap","FM") [(TVar 0),(TVar 1)]) (TCons ("Prelude","Bool") []))) "FiniteMap" "Do two given maps contain the same key/element pairs?\n" False UnknownFR),(FunctionInfo "isEmptyFM" (FuncType (TCons ("FiniteMap","FM") [(TVar 0),(TVar 1)]) (TCons ("Prelude","Bool") [])) "FiniteMap" "Is the given finite map empty?\n" False UnknownFR),(FunctionInfo "elemFM" (FuncType (TVar 0) (FuncType (TCons ("FiniteMap","FM") [(TVar 0),(TVar 1)]) (TCons ("Prelude","Bool") []))) "FiniteMap" "Does given map contain given key?\n" False UnknownFR),(FunctionInfo "lookupFM" (FuncType (TCons ("FiniteMap","FM") [(TVar 0),(TVar 1)]) (FuncType (TVar 0) (TCons ("Prelude","Maybe") [(TVar 1)]))) "FiniteMap" "Retrieves element bound to given key\n" False KnownFlex),(FunctionInfo "lookupWithDefaultFM" (FuncType (TCons ("FiniteMap","FM") [(TVar 0),(TVar 1)]) (FuncType (TVar 1) (FuncType (TVar 0) (TVar 1)))) "FiniteMap" "Retrieves element bound to given key.\nIf the element is not contained in map, return \ndefault value.\n" False KnownRigid),(FunctionInfo "keyOrder" (FuncType (TCons ("FiniteMap","FM") [(TVar 0),(TVar 1)]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])))) "FiniteMap" "Retrieves the ordering on which the given finite map is built.\n" False KnownFlex),(FunctionInfo "minFM" (FuncType (TCons ("FiniteMap","FM") [(TVar 0),(TVar 1)]) (TCons ("Prelude","Maybe") [(TCons ("Prelude","(,)") [(TVar 0),(TVar 1)])])) "FiniteMap" "Retrieves the smallest key/element pair in the finite map \naccording to the basic key ordering.\n" False UnknownFR),(FunctionInfo "maxFM" (FuncType (TCons ("FiniteMap","FM") [(TVar 0),(TVar 1)]) (TCons ("Prelude","Maybe") [(TCons ("Prelude","(,)") [(TVar 0),(TVar 1)])])) "FiniteMap" "Retrieves the greatest key/element pair in the finite map \naccording to the basic key ordering.\n" False UnknownFR),(FunctionInfo "fmToList" (FuncType (TCons ("FiniteMap","FM") [(TVar 0),(TVar 1)]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TVar 0),(TVar 1)])])) "FiniteMap" "Builds a list of key/element pairs. The list is ordered \nby the initially given irreflexive order predicate on keys.\n" False UnknownFR),(FunctionInfo "keysFM" (FuncType (TCons ("FiniteMap","FM") [(TVar 0),(TVar 1)]) (TCons ("Prelude","[]") [(TVar 0)])) "FiniteMap" "Retrieves a list of keys contained in finite map. \nThe list is ordered \nby the initially given irreflexive order predicate on keys.\n" False UnknownFR),(FunctionInfo "eltsFM" (FuncType (TCons ("FiniteMap","FM") [(TVar 0),(TVar 1)]) (TCons ("Prelude","[]") [(TVar 1)])) "FiniteMap" "Retrieves a list of elements contained in finite map. \nThe list is ordered \nby the initially given irreflexive order predicate on keys.\n" False UnknownFR),(FunctionInfo "fmToListPreOrder" (FuncType (TCons ("FiniteMap","FM") [(TVar 0),(TVar 1)]) (TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TVar 0),(TVar 1)])])) "FiniteMap" "Retrieves list of key/element pairs in preorder of the internal tree.\nUseful for lists that will be retransformed into a tree or to match \nany elements regardless of basic order.\n" False KnownFlex),(FunctionInfo "fmSortBy" (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","[]") [(TVar 0)]))) "FiniteMap" "Sorts a given list by inserting and retrieving from finite map.\nDuplicates are deleted.\n" False UnknownFR)] [(TypeInfo "FM" [] [0,1] "FiniteMap" [] False)])