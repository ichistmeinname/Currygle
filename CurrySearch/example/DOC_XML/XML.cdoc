(CurryInfo (ModuleInfo "XML" "January 2011" "Michael Hanus" ["Char","Prelude","Read","List"] "Library for processing XML data.\n\nWarning: the structure of this library is not stable and\nmight be changed in the future!\n\n") [(FunctionInfo "tagOf" (("XML","tagOf"),(FuncType (TCons ("XML","XmlExp") []) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]))) "XML" "Returns the tag of an XML element (or empty for a textual element).\n" False KnownFlex),(FunctionInfo "elemsOf" (("XML","elemsOf"),(FuncType (TCons ("XML","XmlExp") []) (TCons ("Prelude","[]") [(TCons ("XML","XmlExp") [])]))) "XML" "Returns the child elements an XML element.\n" False KnownFlex),(FunctionInfo "textOf" (("XML","textOf"),(FuncType (TCons ("Prelude","[]") [(TCons ("XML","XmlExp") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]))) "XML" "Extracts the textual contents of a list of XML expressions.\nUseful auxiliary function when transforming XML expressions into\nother data structures.\n\nFor instance,\n<code>textOf [XText \"xy\", XElem \"a\" [] [], XText \"bc\"] == \"xy bc\"</code>\n" False UnknownFR),(FunctionInfo "textOfXml" (("XML","textOfXml"),(FuncType (TCons ("Prelude","[]") [(TCons ("XML","XmlExp") [])]) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]))) "XML" "Included for backward compatibility, better use <code>textOf</code>!\n" False UnknownFR),(FunctionInfo "xtxt" (("XML","xtxt"),(FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("XML","XmlExp") []))) "XML" "Basic text (maybe containing special XML chars).\n" False UnknownFR),(FunctionInfo "xml" (("XML","xml"),(FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (FuncType (TCons ("Prelude","[]") [(TCons ("XML","XmlExp") [])]) (TCons ("XML","XmlExp") [])))) "XML" "XML element without attributes.\n" False UnknownFR),(FunctionInfo "writeXmlFile" (("XML","writeXmlFile"),(FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (FuncType (TCons ("XML","XmlExp") []) (TCons ("Prelude","IO") [(TCons ("Prelude","()") [])])))) "XML" "Writes a file with a given XML document.\n" False UnknownFR),(FunctionInfo "writeXmlFileWithParams" (("XML","writeXmlFileWithParams"),(FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (FuncType (TCons ("Prelude","[]") [(TCons ("XML","XmlDocParams") [])]) (FuncType (TCons ("XML","XmlExp") []) (TCons ("Prelude","IO") [(TCons ("Prelude","()") [])]))))) "XML" "Writes a file with a given XML document and XML parameters.\n" False UnknownFR),(FunctionInfo "showXmlDoc" (("XML","showXmlDoc"),(FuncType (TCons ("XML","XmlExp") []) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]))) "XML" "Show an XML document in indented format as a string.\n" False UnknownFR),(FunctionInfo "showXmlDocWithParams" (("XML","showXmlDocWithParams"),(FuncType (TCons ("Prelude","[]") [(TCons ("XML","XmlDocParams") [])]) (FuncType (TCons ("XML","XmlExp") []) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])))) "XML" [] False ConflictFR),(FunctionInfo "readXmlFile" (("XML","readXmlFile"),(FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","IO") [(TCons ("XML","XmlExp") [])]))) "XML" "Reads a file with an XML document and returns\nthe corresponding XML expression.\n" False UnknownFR),(FunctionInfo "readUnsafeXmlFile" (("XML","readUnsafeXmlFile"),(FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","IO") [(TCons ("Prelude","Maybe") [(TCons ("XML","XmlExp") [])])]))) "XML" "Tries to read a file with an XML document and returns\nthe corresponding XML expression, if possible.\nIf file or parse errors occur, Nothing is returned.\n" False UnknownFR),(FunctionInfo "readFileWithXmlDocs" (("XML","readFileWithXmlDocs"),(FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","IO") [(TCons ("Prelude","[]") [(TCons ("XML","XmlExp") [])])]))) "XML" "Reads a file with an arbitrary sequence of XML documents and\nreturns the list of corresponding XML expressions.\n" False UnknownFR),(FunctionInfo "parseXmlString" (("XML","parseXmlString"),(FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","[]") [(TCons ("XML","XmlExp") [])]))) "XML" "Transforms an XML string into a list of XML expressions.\nIf the XML string is a well structured document, the list\nof XML expressions should contain exactly one element.\n" False UnknownFR),(FunctionInfo "updateXmlFile" (("XML","updateXmlFile"),(FuncType (FuncType (TCons ("XML","XmlExp") []) (TCons ("XML","XmlExp") [])) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Prelude","IO") [(TCons ("Prelude","()") [])])))) "XML" "An action that updates the contents of an XML file by some transformation\non the XML document.\n" False UnknownFR)] [(TypeInfo "XmlExp" [(("XML","XText"),[(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]),(("XML","XElem"),[(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])]),(TCons ("Prelude","[]") [(TCons ("XML","XmlExp") [])])])] [] "XML" "The data type for representing XML expressions.\n"),(TypeInfo "Encoding" [(("XML","StandardEnc"),[]),(("XML","Iso88591Enc"),[])] [] "XML" "The data type for encodings used in the XML document.\n"),(TypeInfo "XmlDocParams" [(("XML","Enc"),[(TCons ("XML","Encoding") [])]),(("XML","DtdUrl"),[(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])])] [] "XML" "The data type for XML document parameters.\n")])