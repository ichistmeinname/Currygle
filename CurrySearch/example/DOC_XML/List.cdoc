(CurryInfo (ModuleInfo "List" "Michael Hanus" "Library with some useful operations on lists.\n\n") [(FunctionInfo "elemIndex" (("List","elemIndex"),(FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","Maybe") [(TCons ("Prelude","Int") [])])))) "List" "Returns the index `i` of the first occurrence of an element in a list\nas `(Just i)`, otherwise `Nothing` is returned.\n" False UnknownFR),(FunctionInfo "elemIndices" (("List","elemIndices"),(FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])])))) "List" "Returns the list of indices of occurrences of an element in a list.\n" False UnknownFR),(FunctionInfo "find" (("List","find"),(FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","Maybe") [(TVar 0)])))) "List" "Returns the first element `e` of a list satisfying a predicate as `(Just e)`,\notherwise `Nothing` is returned.\n" False UnknownFR),(FunctionInfo "findIndex" (("List","findIndex"),(FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","Maybe") [(TCons ("Prelude","Int") [])])))) "List" "Returns the index `i` of the first occurrences of a list element\nsatisfying a predicate as `(Just i)`, otherwise `Nothing` is returned.\n" False UnknownFR),(FunctionInfo "findIndices" (("List","findIndices"),(FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])])))) "List" "Returns the list of indices of list elements satisfying a predicate.\n" False UnknownFR),(FunctionInfo "nub" (("List","nub"),(FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","[]") [(TVar 0)]))) "List" "Removes all duplicates in the argument list.\n" False UnknownFR),(FunctionInfo "nubBy" (("List","nubBy"),(FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","[]") [(TVar 0)])))) "List" "Removes all duplicates in the argument list according to an\nequivalence relation.\n" False KnownFlex),(FunctionInfo "delete" (("List","delete"),(FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","[]") [(TVar 0)])))) "List" "Deletes the first occurrence of an element in a list.\n" False UnknownFR),(FunctionInfo "deleteBy" (("List","deleteBy"),(FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","[]") [(TVar 0)]))))) "List" "Deletes the first occurrence of an element in a list\naccording to an equivalence relation.\n" False ConflictFR),(FunctionInfo "\\\\" (("List","\\\\"),(FuncType (TCons ("Prelude","[]") [(TVar 0)]) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","[]") [(TVar 0)])))) "List" "Computes the difference of two lists.\n" False UnknownFR),(FunctionInfo "union" (("List","union"),(FuncType (TCons ("Prelude","[]") [(TVar 0)]) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","[]") [(TVar 0)])))) "List" "Computes the union of two lists.\n" False ConflictFR),(FunctionInfo "intersect" (("List","intersect"),(FuncType (TCons ("Prelude","[]") [(TVar 0)]) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","[]") [(TVar 0)])))) "List" "Computes the intersection of two lists.\n" False ConflictFR),(FunctionInfo "intersperse" (("List","intersperse"),(FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","[]") [(TVar 0)])))) "List" "Puts a separator element between all elements in a list.\n\nExample: `(intersperse 9 [1,2,3,4]) = [1,9,2,9,3,9,4]`\n" False KnownFlex),(FunctionInfo "transpose" (("List","transpose"),(FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","[]") [(TVar 0)])]) (TCons ("Prelude","[]") [(TCons ("Prelude","[]") [(TVar 0)])]))) "List" "Transposes the rows and columns of the argument.\n\nExample: `(transpose [[1,2,3],[4,5,6]]) = [[1,4],[2,5],[3,6]]`\n" False KnownFlex),(FunctionInfo "partition" (("List","partition"),(FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TVar 0)]),(TCons ("Prelude","[]") [(TVar 0)])])))) "List" "Partitions a list into a pair of lists where the first list\ncontains those elements that satisfy the predicate argument\nand the second list contains the remaining arguments.\n\nExample: `(partition (<4) [8,1,5,2,4,3]) = ([1,2,3],[8,5,4])`\n" False UnknownFR),(FunctionInfo "group" (("List","group"),(FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","[]") [(TCons ("Prelude","[]") [(TVar 0)])]))) "List" "Splits the list argument into a list of lists of equal adjacent\nelements.\n\nExample: `(group [1,2,2,3,3,3,4]) = [[1],[2,2],[3,3,3],[4]]`\n" False UnknownFR),(FunctionInfo "groupBy" (("List","groupBy"),(FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","[]") [(TCons ("Prelude","[]") [(TVar 0)])])))) "List" "Splits the list argument into a list of lists of related adjacent\nelements.\n" False KnownFlex),(FunctionInfo "inits" (("List","inits"),(FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","[]") [(TCons ("Prelude","[]") [(TVar 0)])]))) "List" "Returns all initial segments of a list, starting with the shortest.\nExample: `inits [1,2,3] == [[],[1],[1,2],[1,2,3]]`\n" False KnownFlex),(FunctionInfo "tails" (("List","tails"),(FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","[]") [(TCons ("Prelude","[]") [(TVar 0)])]))) "List" "Returns all final segments of a list, starting with the longest.\nExample: `tails [1,2,3] == [[1,2,3],[2,3],[3],[]]`\n" False KnownFlex),(FunctionInfo "replace" (("List","replace"),(FuncType (TVar 0) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","[]") [(TVar 0)]))))) "List" "Replaces an element in a list.\n" False ConflictFR),(FunctionInfo "isPrefixOf" (("List","isPrefixOf"),(FuncType (TCons ("Prelude","[]") [(TVar 0)]) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","Bool") [])))) "List" "Checks whether a list is a prefix of another.\n" False KnownFlex),(FunctionInfo "isSuffixOf" (("List","isSuffixOf"),(FuncType (TCons ("Prelude","[]") [(TVar 0)]) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","Bool") [])))) "List" "Checks whether a list is a suffix of another. \n" False UnknownFR),(FunctionInfo "isInfixOf" (("List","isInfixOf"),(FuncType (TCons ("Prelude","[]") [(TVar 0)]) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","Bool") [])))) "List" "Checks whether a list is contained in another. \n" False UnknownFR),(FunctionInfo "sortBy" (("List","sortBy"),(FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","[]") [(TVar 0)])))) "List" "Sorts a list w.r.t. an ordering relation by the insertion method.\n" False UnknownFR),(FunctionInfo "insertBy" (("List","insertBy"),(FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","[]") [(TVar 0)]))))) "List" "Inserts an object into a list according to an ordering relation.\n" False ConflictFR),(FunctionInfo "last" (("List","last"),(FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TVar 0))) "List" "Returns the last element of a non-empty list.\n" False KnownFlex)] [])