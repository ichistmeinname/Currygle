(CurryInfo (ModuleInfo "Pretty" "Sebastian Fischer" "This library provides pretty printing combinators.\nThe interface is that of \n[Daan Leijen's library](<http://www.cs.uu.nl/~daan/download/pprint/pprint.html)\n(`fill`, `fillBreak` and `indent` are missing) with a\n[linear-time, bounded implementation](http://www.cs.kent.ac.uk/pubs/2006/2381/index.html)\n by Olaf Chitil.\n\n") [(FunctionInfo "empty" (TCons ("Pretty","Doc") []) "Pretty" "The empty document is, indeed, empty. Although empty has no content,\nit does have a 'height' of 1 and behaves exactly like `(text \"\")` \n(and is therefore not a unit of `&lt;$&gt;`).\n" False UnknownFR),(FunctionInfo "isEmpty" (FuncType (TCons ("Pretty","Doc") []) (TCons ("Prelude","Bool") [])) "Pretty" "Is the document empty?\n" False KnownFlex),(FunctionInfo "text" (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Pretty","Doc") [])) "Pretty" "The document `(text s)` contains the literal string `s`. \nThe string shouldn't contain any newline ('\\n') characters. \nIf the string contains newline characters, \nthe function `string` should be used.\n" False UnknownFR),(FunctionInfo "linesep" (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Pretty","Doc") [])) "Pretty" "The document `(linesep s)` advances to the next line and indents\nto the current nesting level. Document `(linesep s)`\nbehaves like `(text s)` if the line break is undone by group.\n" False UnknownFR),(FunctionInfo "line" (TCons ("Pretty","Doc") []) "Pretty" "The line document advances to the next line and indents to the current\nnesting level. Document line behaves like `(text \" \")` if the line break \nis undone by group.\n" False UnknownFR),(FunctionInfo "linebreak" (TCons ("Pretty","Doc") []) "Pretty" "The linebreak document advances to the next line and indents to \nthe current nesting level. Document linebreak behaves like empty \nif the line break is undone by group.\n" False UnknownFR),(FunctionInfo "softline" (TCons ("Pretty","Doc") []) "Pretty" "The document softline behaves like `space` if the resulting output \nfits the page, otherwise it behaves like `line`.<br><br>\n`softline  = group line`\n" False UnknownFR),(FunctionInfo "softbreak" (TCons ("Pretty","Doc") []) "Pretty" "The document softbreak behaves like `empty` if the resulting output \nfits the page, otherwise it behaves like `line`.<br><br>\n`softbreak  = group linebreak`\n" False UnknownFR),(FunctionInfo "group" (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") [])) "Pretty" "The group combinator is used to specify alternative layouts. \nThe document `(group x)` undoes all line breaks in document `x`. \nThe resulting line is added to the current line if that fits the page. \nOtherwise, the document x is rendered without any changes.\n" False UnknownFR),(FunctionInfo "nest" (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") []))) "Pretty" "The document `(nest i d)` renders document `d` with the current \nindentation level increased by `i` (See also `hang`, \n`align` and `indent`).\n\n    nest 2 (text \"hello\" <$> text \"world\") <$> text \"!\"\n\noutputs as:\n\n    hello\n      world\n    !\n\n" False UnknownFR),(FunctionInfo "hang" (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") []))) "Pretty" "The hang combinator implements hanging indentation. \nThe document `(hang i d)` renders document `d` with a nesting level set \nto the current column plus `i`. The following example uses hanging \nindentation for some text:\n\n    test = hang 4\n             (fillSep\n                (map text \n                     (words \"the hang combinator indents these words !\")))\n\nWhich lays out on a page with a width of 20 characters as:\n\n    the hang combinator\n        indents these\n        words !\n\nThe hang combinator is implemented as:\n\n    hang i x  = align (nest i x)\n\n" False UnknownFR),(FunctionInfo "align" (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") [])) "Pretty" "The document `(align d)` renders document `d with the nesting level \nset to the current column. It is used for example to implement hang.\n\nAs an example, we will put a document right above another one, \nregardless of the current nesting level:\n\n    x $$ y  = align (x <$> y)\n    test    = text \"hi\" <+> (text \"nice\" $$ text \"world\")\n\nwhich will be layed out as:\n\n    hi nice\n       world\n\n" False UnknownFR),(FunctionInfo "combine" (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") [])))) "Pretty" "The document `(combine x l r)` encloses document `x` between \ndocuments `l` and `r` using `(&lt;&gt;)`.\n\n    combine x l r   = l <> x <> r\n\n" False UnknownFR),(FunctionInfo "<>" (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") []))) "Pretty" "The document `(x &lt;&gt; y)` concatenates document `x` and document `y`. \nIt is an associative operation having empty as a left and right unit.\n" False UnknownFR),(FunctionInfo "<+>" (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") []))) "Pretty" "The document `(x &lt;+&gt; y)` concatenates document `x` and `y` with a \n`space` in between.\n" False UnknownFR),(FunctionInfo "<$>" (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") []))) "Pretty" "The document `(x &lt;$&gt; y)` concatenates document x and y with a \n`line` in between.\n" False UnknownFR),(FunctionInfo "</>" (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") []))) "Pretty" "The document (x &lt;/&gt; y) concatenates document x and y with \na `softline` in between. This effectively puts x and y either \nnext to each other (with a `space` in between) \nor underneath each other.\n" False UnknownFR),(FunctionInfo "<$$>" (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") []))) "Pretty" "The document (x &lt;$$&gt; y) concatenates document x and y with a \n`linebreak` in between.\n" False UnknownFR),(FunctionInfo "<//>" (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") []))) "Pretty" "The document (x &lt;//&gt; y) concatenates document x and y with a \n`softbreak` in between. This effectively puts x and y either \nright next to each other or underneath each other.\n" False UnknownFR),(FunctionInfo "compose" (FuncType (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") []))) (FuncType (TCons ("Prelude","[]") [(TCons ("Pretty","Doc") [])]) (TCons ("Pretty","Doc") []))) "Pretty" "The document (compose f xs) concatenates all documents xs with function f.\nFunction f should be like `(&lt;+&gt;)`, `(&lt;$&gt;)` and so on.\n" False KnownFlex),(FunctionInfo "hsep" (FuncType (TCons ("Prelude","[]") [(TCons ("Pretty","Doc") [])]) (TCons ("Pretty","Doc") [])) "Pretty" "The document (hsep xs) concatenates all documents xs \nhorizontally with `(&lt;+&gt;)`.\n" False UnknownFR),(FunctionInfo "vsep" (FuncType (TCons ("Prelude","[]") [(TCons ("Pretty","Doc") [])]) (TCons ("Pretty","Doc") [])) "Pretty" "The document `(vsep xs)` concatenates all documents `xs` vertically with \n`(&lt;$&gt;)`. If a group undoes the line breaks inserted by `vsep`, \nall documents are separated with a `space`.\n\n    someText = map text (words (\"text to lay out\"))\n    test     = text \"some\" <+> vsep someText\n\nThis is layed out as:\n\n    some text\n    to\n    lay\n    out\n\nThe `align` combinator can be used to align the documents\nunder their first element:\n\n    test     = text \"some\" <+> align (vsep someText)\n\nThis is printed as:\n\n    some text\n         to\n         lay\n         out\n\n" False UnknownFR),(FunctionInfo "fillSep" (FuncType (TCons ("Prelude","[]") [(TCons ("Pretty","Doc") [])]) (TCons ("Pretty","Doc") [])) "Pretty" "The document (fillSep xs) concatenates documents xs horizontally with \n`(&lt;+&gt;)` as long as its fits the page, than inserts a\n`line` and continues doing that for all documents in xs.<br><br>\n`fillSep xs  = foldr (&lt;/&gt;) empty xs`\n" False UnknownFR),(FunctionInfo "sep" (FuncType (TCons ("Prelude","[]") [(TCons ("Pretty","Doc") [])]) (TCons ("Pretty","Doc") [])) "Pretty" "The document (sep xs) concatenates all documents xs either horizontally \nwith `(&lt;+&gt;)`, if it fits the page, or vertically \nwith `(&lt;$&gt;)`.<br><br>\n`sep xs  = group (vsep xs)`\n" False UnknownFR),(FunctionInfo "hcat" (FuncType (TCons ("Prelude","[]") [(TCons ("Pretty","Doc") [])]) (TCons ("Pretty","Doc") [])) "Pretty" "The document (hcat xs) concatenates all documents xs horizontally \nwith `(&lt;&gt;)`.\n" False UnknownFR),(FunctionInfo "vcat" (FuncType (TCons ("Prelude","[]") [(TCons ("Pretty","Doc") [])]) (TCons ("Pretty","Doc") [])) "Pretty" "The document (vcat xs) concatenates all documents xs vertically \nwith `(&lt;$$&gt;)`. If a `group` undoes the line \nbreaks inserted by `vcat`, all documents are directly \nconcatenated.\n" False UnknownFR),(FunctionInfo "fillCat" (FuncType (TCons ("Prelude","[]") [(TCons ("Pretty","Doc") [])]) (TCons ("Pretty","Doc") [])) "Pretty" "The document (fillCat xs) concatenates documents xs horizontally \nwith `(&lt;&gt;)` as long as its fits the page, than inserts \na `linebreak` and continues doing that for all documents in xs.\n<br><br>\n`fillCat xs  = foldr (&lt;//&gt;) empty xs`\n" False UnknownFR),(FunctionInfo "cat" (FuncType (TCons ("Prelude","[]") [(TCons ("Pretty","Doc") [])]) (TCons ("Pretty","Doc") [])) "Pretty" "The document (cat xs) concatenates all documents xs either horizontally \nwith `(&lt;&gt;)`, if it fits the page, or vertically with \n`(&lt;$$&gt;)`.<br><br>\n`cat xs  = group (vcat xs)`\n" False UnknownFR),(FunctionInfo "punctuate" (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Prelude","[]") [(TCons ("Pretty","Doc") [])]) (TCons ("Prelude","[]") [(TCons ("Pretty","Doc") [])]))) "Pretty" "`(punctuate p xs)` concatenates all documents `xs` with document `p` except \nfor the last document.\n\n    someText = map text [\"words\",\"in\",\"a\",\"tuple\"]\n    test     = parens (align (cat (punctuate comma someText)))\n\nThis is layed out on a page width of 20 as:\n\n    (words,in,a,tuple)\n\nBut when the page width is 15, it is layed out as:\n\n    (words,\n     in,\n     a,\n     tuple)\n\n(If you want put the commas in front of their elements instead of at the\nend, you should use `tupled` or, in general, \n`encloseSep`.)\n" False KnownFlex),(FunctionInfo "encloseSep" (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Prelude","[]") [(TCons ("Pretty","Doc") [])]) (TCons ("Pretty","Doc") []))))) "Pretty" "The document (encloseSep l r sep xs) concatenates the documents xs \nseperated by sep and encloses the resulting document by l and r.<br>\nThe documents are rendered horizontally if that fits the page. Otherwise \nthey are aligned vertically. All seperators are put in front of the \nelements.\n\nFor example, the combinator `list` can be defined with `encloseSep`:\n\n    list xs  = encloseSep lbracket rbracket comma xs\n    test     = text \"list\" <+> (list (map int [10,200,3000]))\n\nWhich is layed out with a page width of 20 as:\n\n    list [10,200,3000]\n\nBut when the page width is 15, it is layed out as:\n\n    list [10\n         ,200\n         ,3000]\n\n" False KnownFlex),(FunctionInfo "hEncloseSep" (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Prelude","[]") [(TCons ("Pretty","Doc") [])]) (TCons ("Pretty","Doc") []))))) "Pretty" "The document `(hEncloseSep l r sep xs)` concatenates the documents `xs`\nseperated by `sep` and encloses the resulting document by `l` and `r`.\n\nThe documents are rendered horizontally.\n" False KnownFlex),(FunctionInfo "fillEncloseSep" (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Prelude","[]") [(TCons ("Pretty","Doc") [])]) (TCons ("Pretty","Doc") []))))) "Pretty" "The document `(hEncloseSep l r sep xs)` concatenates the documents `xs`\nseperated by `sep` and encloses the resulting document by `l` and `r`.\n\nThe documents are rendered horizontally if that fits the page. \nOtherwise they are aligned vertically. \nAll seperators are put in front of the elements.\n" False KnownFlex),(FunctionInfo "list" (FuncType (TCons ("Prelude","[]") [(TCons ("Pretty","Doc") [])]) (TCons ("Pretty","Doc") [])) "Pretty" "The document (list xs) comma seperates the documents xs and encloses \nthem in square brackets. The documents are rendered horizontally if \nthat fits the page. Otherwise they are aligned vertically. \nAll comma seperators are put in front of the elements.\n" False UnknownFR),(FunctionInfo "tupled" (FuncType (TCons ("Prelude","[]") [(TCons ("Pretty","Doc") [])]) (TCons ("Pretty","Doc") [])) "Pretty" "The document (tupled xs) comma seperates the documents xs and encloses\nthem in parenthesis. The documents are rendered horizontally if that fits \nthe page. Otherwise they are aligned vertically. \nAll comma seperators are put in front of the elements.\n" False UnknownFR),(FunctionInfo "semiBraces" (FuncType (TCons ("Prelude","[]") [(TCons ("Pretty","Doc") [])]) (TCons ("Pretty","Doc") [])) "Pretty" "The document (semiBraces xs) seperates the documents xs with semi colons\nand encloses them in braces. The documents are rendered horizontally \nif that fits the page. Otherwise they are aligned vertically. \nAll semi colons are put in front of the elements.\n" False UnknownFR),(FunctionInfo "enclose" (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") [])))) "Pretty" "The document (enclose l r x) encloses document x between \ndocuments l and r using (&lt;&gt;).<br><br>\n`enclose l r x   = l &lt;&gt; x &lt;&gt; r`\n" False UnknownFR),(FunctionInfo "squotes" (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") [])) "Pretty" "Document (squotes x) encloses document x with single quotes `\"'\"`.\n" False UnknownFR),(FunctionInfo "dquotes" (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") [])) "Pretty" "Document (dquotes x) encloses document x with double quotes `'\"'`.\n" False UnknownFR),(FunctionInfo "bquotes" (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") [])) "Pretty" "Document (bquotes x) encloses document x with `'`'` quotes.\n" False UnknownFR),(FunctionInfo "parens" (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") [])) "Pretty" "Document (parens x) encloses document x in parenthesis, \n`\"(\"` and `\")\"`.\n" False UnknownFR),(FunctionInfo "angles" (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") [])) "Pretty" "Document (angles x) encloses document x in angles, \n`\"<\"` and `\">\"`.\n" False UnknownFR),(FunctionInfo "braces" (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") [])) "Pretty" "Document (braces x) encloses document x in braces, \n`\"{\"` and `\"}\"`.\n" False UnknownFR),(FunctionInfo "brackets" (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") [])) "Pretty" "Document (brackets x) encloses document x in square brackets, \n`\"[\"` and `\"]\"`.\n" False UnknownFR),(FunctionInfo "char" (FuncType (TCons ("Prelude","Char") []) (TCons ("Pretty","Doc") [])) "Pretty" "The document (char c) contains the literal character c. \nThe character shouldn't be a newline ('\\n'), \nthe function `line` should be used for line breaks.\n" False UnknownFR),(FunctionInfo "string" (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Pretty","Doc") [])) "Pretty" "The document (string s) concatenates all characters in s using\n`line` for newline characters and `char` for all \nother characters. It is used instead of `text` whenever the \ntext contains newline characters.\n" False UnknownFR),(FunctionInfo "int" (FuncType (TCons ("Prelude","Int") []) (TCons ("Pretty","Doc") [])) "Pretty" "The document (int i) shows the literal integer i using `text`.\n" False UnknownFR),(FunctionInfo "float" (FuncType (TCons ("Prelude","Float") []) (TCons ("Pretty","Doc") [])) "Pretty" "The document (float f) shows the literal float f using `text`.\n" False UnknownFR),(FunctionInfo "lparen" (TCons ("Pretty","Doc") []) "Pretty" "The document lparen contains a left parenthesis, `\"(\"`.\n" False UnknownFR),(FunctionInfo "rparen" (TCons ("Pretty","Doc") []) "Pretty" "The document rparen contains a right parenthesis, `\")\"`.\n" False UnknownFR),(FunctionInfo "langle" (TCons ("Pretty","Doc") []) "Pretty" "The document langle contains a left angle, `\"<\"`.\n" False UnknownFR),(FunctionInfo "rangle" (TCons ("Pretty","Doc") []) "Pretty" "The document rangle contains a right angle, `\">\"`.\n" False UnknownFR),(FunctionInfo "lbrace" (TCons ("Pretty","Doc") []) "Pretty" "The document lbrace contains a left brace, `\"{\"`.\n" False UnknownFR),(FunctionInfo "rbrace" (TCons ("Pretty","Doc") []) "Pretty" "The document rbrace contains a right brace, `\"}\"`.\n" False UnknownFR),(FunctionInfo "lbracket" (TCons ("Pretty","Doc") []) "Pretty" "The document lbracket contains a left square bracket, `\"[\"`.\n" False UnknownFR),(FunctionInfo "rbracket" (TCons ("Pretty","Doc") []) "Pretty" "The document rbracket contains a right square bracket, `\"]\"`.\n" False UnknownFR),(FunctionInfo "squote" (TCons ("Pretty","Doc") []) "Pretty" "The document squote contains a single quote, `\"'\"`.\n" False UnknownFR),(FunctionInfo "dquote" (TCons ("Pretty","Doc") []) "Pretty" "The document dquote contains a double quote, `'\"'`.\n" False UnknownFR),(FunctionInfo "semi" (TCons ("Pretty","Doc") []) "Pretty" "The document semi contains a semi colon, `\";\"`.\n" False UnknownFR),(FunctionInfo "colon" (TCons ("Pretty","Doc") []) "Pretty" "The document colon contains a colon, `\":\"`.\n" False UnknownFR),(FunctionInfo "comma" (TCons ("Pretty","Doc") []) "Pretty" "The document comma contains a comma, `\",\"`.\n" False UnknownFR),(FunctionInfo "space" (TCons ("Pretty","Doc") []) "Pretty" "The document space contains a single space, `\" \"`.\n\n    x <+> y   = x <> space <> y\n\n" False UnknownFR),(FunctionInfo "dot" (TCons ("Pretty","Doc") []) "Pretty" "The document dot contains a single dot, `\".\"`.\n" False UnknownFR),(FunctionInfo "backslash" (TCons ("Pretty","Doc") []) "Pretty" "The document backslash contains a back slash, `\"\\\\\"`.\n" False UnknownFR),(FunctionInfo "equals" (TCons ("Pretty","Doc") []) "Pretty" "The document equals contains an equal sign, `\"=\"`.\n" False UnknownFR),(FunctionInfo "pretty" (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Pretty","Doc") []) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]))) "Pretty" "`(pretty w d)` pretty prints document `d` with a page width of `w` characters\n" False UnknownFR)] [(TypeInfo "Doc" [] [] "Pretty" "The abstract data type Doc represents pretty documents.\n" False)])