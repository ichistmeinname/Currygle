(CurryInfo (ModuleInfo "CLPFD" [] "Library for finite domain constraint solving.\n<p>\nThe general structure of a specification of an FD problem is as follows:\n\n<code>domain_constraint & fd_constraint & labeling</code>\n\nwhere:\n\n<code>domain_constraint</code>\nspecifies the possible range of the FD variables (see constraint <code>domain</code>)\n\n<code>fd_constraint</code>\nspecifies the constraint to be satisfied by a valid solution\n(see constraints #+, #-, allDifferent, etc below)\n\n<code>labeling</code>\nis a labeling function to search for a concrete solution.\n\nNote: This library is based on the corresponding library of Sicstus-Prolog\nbut does not implement the complete functionality of the\nSicstus-Prolog library.\nHowever, using the PAKCS interface for external functions, it is relatively\neasy to provide the complete functionality.\n") [(FunctionInfo "domain" (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Success") [])))) "CLPFD" "Constraint to specify the domain of all finite domain variables.\n" False UnknownFR),(FunctionInfo "+#" (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) "CLPFD" "Addition of FD variables.\n" False UnknownFR),(FunctionInfo "-#" (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) "CLPFD" "Subtraction of FD variables.\n" False UnknownFR),(FunctionInfo "*#" (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) "CLPFD" "Multiplication of FD variables.\n" False UnknownFR),(FunctionInfo "=#" (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Success") []))) "CLPFD" "Equality of FD variables.\n" False UnknownFR),(FunctionInfo "/=#" (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Success") []))) "CLPFD" "Disequality of FD variables.\n" False UnknownFR),(FunctionInfo "<#" (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Success") []))) "CLPFD" "\"Less than\" constraint on FD variables.\n" False UnknownFR),(FunctionInfo "<=#" (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Success") []))) "CLPFD" "\"Less than or equal\" constraint on FD variables.\n" False UnknownFR),(FunctionInfo ">#" (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Success") []))) "CLPFD" "\"Greater than\" constraint on FD variables.\n" False UnknownFR),(FunctionInfo ">=#" (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Success") []))) "CLPFD" "\"Greater than or equal\" constraint on FD variables.\n" False UnknownFR),(FunctionInfo "#=#" (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("CLPFD","Constraint") []))) "CLPFD" "Reifyable equality constraint on FD variables.\n" False UnknownFR),(FunctionInfo "#/=#" (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("CLPFD","Constraint") []))) "CLPFD" "Reifyable inequality constraint on FD variables.\n" False UnknownFR),(FunctionInfo "#<#" (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("CLPFD","Constraint") []))) "CLPFD" "Reifyable \"less than\" constraint on FD variables.\n" False UnknownFR),(FunctionInfo "#<=#" (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("CLPFD","Constraint") []))) "CLPFD" "Reifyable \"less than or equal\" constraint on FD variables.\n" False UnknownFR),(FunctionInfo "#>#" (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("CLPFD","Constraint") []))) "CLPFD" "Reifyable \"greater than\" constraint on FD variables.\n" False UnknownFR),(FunctionInfo "#>=#" (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("CLPFD","Constraint") []))) "CLPFD" "Reifyable \"greater than or equal\" constraint on FD variables.\n" False UnknownFR),(FunctionInfo "#=>#" (FuncType (TCons ("CLPFD","Constraint") []) (FuncType (TCons ("CLPFD","Constraint") []) (TCons ("CLPFD","Constraint") []))) "CLPFD" "The resulting constraint is satisfied if the first argument constraint\ndo not hold or both argument constraints are satisfied.\n" False UnknownFR),(FunctionInfo "#<=>#" (FuncType (TCons ("CLPFD","Constraint") []) (FuncType (TCons ("CLPFD","Constraint") []) (TCons ("CLPFD","Constraint") []))) "CLPFD" "The resulting constraint is satisfied if both argument constraint\nare either satisfied and do not hold.\n" False UnknownFR),(FunctionInfo "solve" (FuncType (TCons ("CLPFD","Constraint") []) (TCons ("Prelude","Success") [])) "CLPFD" "Solves a reified constraint.\n" False UnknownFR),(FunctionInfo "sum" (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])]) (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Success") []))) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Success") [])))) "CLPFD" "Relates the sum of FD variables with some integer of FD variable.\n" False UnknownFR),(FunctionInfo "scalarProduct" (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])]) (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Success") []))) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Success") []))))) "CLPFD" "(scalarProduct cs vs relop v) is satisfied if ((cs*vs) relop v) is satisfied.\nThe first argument must be a list of integers. The other arguments are as\nin <code>sum</code>.\n" False UnknownFR),(FunctionInfo "count" (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])]) (FuncType (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Success") []))) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Success") []))))) "CLPFD" "(count v vs relop c) is satisfied if (n relop c), where n is the number of\nelements in the list of FD variables vs that are equal to v, is satisfied.\nThe first argument must be an integer. The other arguments are as\nin <code>sum</code>.\n" False UnknownFR),(FunctionInfo "allDifferent" (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])]) (TCons ("Prelude","Success") [])) "CLPFD" "\"All different\" constraint on FD variables.\n" False UnknownFR),(FunctionInfo "all_different" (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])]) (TCons ("Prelude","Success") [])) "CLPFD" "For backward compatibility. Use <code>allDifferent</code>.\n" False UnknownFR),(FunctionInfo "indomain" (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Success") [])) "CLPFD" "Instantiate a single FD variable to its values in the specified domain.\n" False UnknownFR),(FunctionInfo "labeling" (FuncType (TCons ("Prelude","[]") [(TCons ("CLPFD","LabelingOption") [])]) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Int") [])]) (TCons ("Prelude","Success") []))) "CLPFD" "Instantiate FD variables to their values in the specified domain.\n" False UnknownFR)] [(TypeInfo "Constraint" [] [] "CLPFD" "A datatype to represent reifyable constraints.\n" False),(TypeInfo "LabelingOption" [(("CLPFD","LeftMost"),[]),(("CLPFD","FirstFail"),[]),(("CLPFD","FirstFailConstrained"),[]),(("CLPFD","Min"),[]),(("CLPFD","Max"),[]),(("CLPFD","Step"),[]),(("CLPFD","Enum"),[]),(("CLPFD","Bisect"),[]),(("CLPFD","Up"),[]),(("CLPFD","Down"),[]),(("CLPFD","All"),[]),(("CLPFD","Minimize"),[(TCons ("Prelude","Int") [])]),(("CLPFD","Maximize"),[(TCons ("Prelude","Int") [])]),(("CLPFD","Assumptions"),[(TCons ("Prelude","Int") [])])] [] "CLPFD" "This datatype contains all options to control the instantiated of FD variables\nwith the enumeration constraint <code>labeling</code>.\n" False)])