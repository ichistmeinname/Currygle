(CurryInfo (ModuleInfo "Parser" "Michael Hanus" "Library with functional logic parser combinators.\n\nAdapted from: Rafael Caballero and Francisco J. Lopez-Fraguas:\n              A Functional Logic Perspective of Parsing.\n              In Proc. FLOPS'99, Springer LNCS 1722, pp. 85-99, 1999\n\n") [(FunctionInfo "<|>" (FuncType (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","[]") [(TVar 0)])) (FuncType (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","[]") [(TVar 0)])) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","[]") [(TVar 0)])))) "Parser" "Combines two parsers without representation in an alternative manner.\n" True UnknownFR),(FunctionInfo "<||>" (FuncType (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [(TVar 1)]) (TCons ("Prelude","[]") [(TVar 1)]))) (FuncType (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [(TVar 1)]) (TCons ("Prelude","[]") [(TVar 1)]))) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [(TVar 1)]) (TCons ("Prelude","[]") [(TVar 1)]))))) "Parser" "Combines two parsers with representation in an alternative manner.\n" False UnknownFR),(FunctionInfo "<*>" (FuncType (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","[]") [(TVar 0)])) (FuncType (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","[]") [(TVar 0)])) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","[]") [(TVar 0)])))) "Parser" "Combines two parsers (with or without representation) in a\nsequential manner.\n" False UnknownFR),(FunctionInfo ">>>" (FuncType (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","[]") [(TVar 0)])) (FuncType (TVar 1) (FuncType (TVar 1) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","[]") [(TVar 0)]))))) "Parser" "Attaches a representation to a parser without representation.\n" False UnknownFR),(FunctionInfo "empty" (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","[]") [(TVar 0)])) "Parser" "The empty parser which recognizes the empty word.\n" False UnknownFR),(FunctionInfo "terminal" (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","[]") [(TVar 0)]))) "Parser" "A parser recognizing a particular terminal symbol.\n" False KnownFlex),(FunctionInfo "satisfy" (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","[]") [(TVar 0)])))) "Parser" "A parser (with representation) recognizing a terminal satisfying\na given predicate.\n" False KnownFlex),(FunctionInfo "star" (FuncType (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [(TVar 1)]) (TCons ("Prelude","[]") [(TVar 1)]))) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (FuncType (TCons ("Prelude","[]") [(TVar 1)]) (TCons ("Prelude","[]") [(TVar 1)])))) "Parser" "A star combinator for parsers. The returned parser\nrepeats zero or more times a parser p with representation and\nreturns the representation of all parsers in a list.\n" False UnknownFR),(FunctionInfo "some" (FuncType (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [(TVar 1)]) (TCons ("Prelude","[]") [(TVar 1)]))) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (FuncType (TCons ("Prelude","[]") [(TVar 1)]) (TCons ("Prelude","[]") [(TVar 1)])))) "Parser" "A some combinator for parsers. The returned parser\nrepeats the argument parser (with representation) at least once.\n" False UnknownFR)] [(TypeInfo "Parser" [(("Parser","Parser"),[(FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","[]") [(TVar 0)]))])] [0] "Parser" [] True),(TypeInfo "ParserRep" [(("Parser","ParserRep"),[(FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [(TVar 1)]) (TCons ("Prelude","[]") [(TVar 1)])))])] [0,1] "Parser" [] True)])