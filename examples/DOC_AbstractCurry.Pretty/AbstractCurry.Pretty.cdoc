(CurryInfo (ModuleInfo "AbstractCurry.Pretty" "Yannik Potdevin" "Pretty printing of AbstractCurry.\n\nThis library provides a pretty-printer for AbstractCurry modules.\n\n") [(FunctionInfo "defaultOptions" (TCons ("AbstractCurry.Pretty","Options") []) "AbstractCurry.Pretty" "`defaultOptions = options 78 2 Imports \"\"`\nTherefore use these options only with functions like 'prettyCurryProg' or\n'ppCurryProg', because they will overwrite the module name anyway.\n" False UnknownFR),(FunctionInfo "options" (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("AbstractCurry.Pretty","Qualification") []) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("AbstractCurry.Pretty","Options") []))))) "AbstractCurry.Pretty" "" False UnknownFR),(FunctionInfo "setPageWith" (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("AbstractCurry.Pretty","Options") []) (TCons ("AbstractCurry.Pretty","Options") []))) "AbstractCurry.Pretty" "Sets the page width of the pretty printer options.\n" False KnownFlex),(FunctionInfo "setIndentWith" (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("AbstractCurry.Pretty","Options") []) (TCons ("AbstractCurry.Pretty","Options") []))) "AbstractCurry.Pretty" "Sets the indentation width of the pretty printer options.\n" False KnownFlex),(FunctionInfo "setQualification" (FuncType (TCons ("AbstractCurry.Pretty","Qualification") []) (FuncType (TCons ("AbstractCurry.Pretty","Options") []) (TCons ("AbstractCurry.Pretty","Options") []))) "AbstractCurry.Pretty" "Sets the qualification method to be used by the pretty printer.\n" False KnownFlex),(FunctionInfo "setModName" (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (FuncType (TCons ("AbstractCurry.Pretty","Options") []) (TCons ("AbstractCurry.Pretty","Options") []))) "AbstractCurry.Pretty" "Sets the name of the current module in the pretty printer options.\n" False KnownFlex),(FunctionInfo "showCProg" (FuncType (TCons ("AbstractCurry.Types","CurryProg") []) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])) "AbstractCurry.Pretty" "Shows a pretty formatted version of an abstract Curry Program.\nThe options for pretty printing are the 'defaultOptions'.\n" False UnknownFR),(FunctionInfo "prettyCurryProg" (FuncType (TCons ("AbstractCurry.Pretty","Options") []) (FuncType (TCons ("AbstractCurry.Types","CurryProg") []) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]))) "AbstractCurry.Pretty" "pretty-print the document generated by 'ppCurryProg', using the page width\nspecified by given options.\n" False UnknownFR),(FunctionInfo "ppCurryProg" (FuncType (TCons ("AbstractCurry.Pretty","Options") []) (FuncType (TCons ("AbstractCurry.Types","CurryProg") []) (TCons ("Pretty","Doc") []))) "AbstractCurry.Pretty" "pretty-print a CurryProg (the representation of a program, written in curry,\nusing AbstractCurry) according to given options. This function will overwrite\nthe module name given by options with the name encapsulated in CurryProg.\n" False KnownFlex),(FunctionInfo "ppMName" (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Pretty","Doc") [])) "AbstractCurry.Pretty" "pretty-print a module name (just a string).\n" False UnknownFR),(FunctionInfo "ppExports" (FuncType (TCons ("AbstractCurry.Pretty","Options") []) (FuncType (TCons ("Prelude","[]") [(TCons ("AbstractCurry.Types","CTypeDecl") [])]) (FuncType (TCons ("Prelude","[]") [(TCons ("AbstractCurry.Types","CFuncDecl") [])]) (TCons ("Pretty","Doc") [])))) "AbstractCurry.Pretty" "pretty-print exports, i.e. all type and function declarations which are\npublic.\nextract the type and function declarations which are public and gather their\nqualified names in a list.\n" False KnownRigid),(FunctionInfo "ppImports" (FuncType (TCons ("AbstractCurry.Pretty","Options") []) (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (TCons ("Pretty","Doc") []))) "AbstractCurry.Pretty" "pretty-print imports (list of module names) by prepending the word \"import\"\nto the module name.\n" False UnknownFR),(FunctionInfo "ppCOpDecl" (FuncType (TCons ("AbstractCurry.Pretty","Options") []) (FuncType (TCons ("AbstractCurry.Types","COpDecl") []) (TCons ("Pretty","Doc") []))) "AbstractCurry.Pretty" "pretty-print operator precedence declarations.\n" False KnownFlex),(FunctionInfo "ppCTypeDecl" (FuncType (TCons ("AbstractCurry.Pretty","Options") []) (FuncType (TCons ("AbstractCurry.Types","CTypeDecl") []) (TCons ("Pretty","Doc") []))) "AbstractCurry.Pretty" "pretty-print type declarations, like `data ... = ...`, `type ... = ...` or\n`newtype ... = ...`.\n" False ConflictFR),(FunctionInfo "ppCFuncDecl" (FuncType (TCons ("AbstractCurry.Pretty","Options") []) (FuncType (TCons ("AbstractCurry.Types","CFuncDecl") []) (TCons ("Pretty","Doc") []))) "AbstractCurry.Pretty" "pretty-print a function declaration.\n" False KnownFlex),(FunctionInfo "ppCFuncDeclWithoutSig" (FuncType (TCons ("AbstractCurry.Pretty","Options") []) (FuncType (TCons ("AbstractCurry.Types","CFuncDecl") []) (TCons ("Pretty","Doc") []))) "AbstractCurry.Pretty" "pretty-print a function declaration without signature.\n" False KnownFlex),(FunctionInfo "ppCFuncSignature" (FuncType (TCons ("AbstractCurry.Pretty","Options") []) (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (FuncType (TCons ("AbstractCurry.Types","CTypeExpr") []) (TCons ("Pretty","Doc") [])))) "AbstractCurry.Pretty" "pretty-print a function signature according to given options.\n" False KnownRigid),(FunctionInfo "ppCTypeExpr" (FuncType (TCons ("AbstractCurry.Pretty","Options") []) (FuncType (TCons ("AbstractCurry.Types","CTypeExpr") []) (TCons ("Pretty","Doc") []))) "AbstractCurry.Pretty" "pretty-print a type expression.\n" False UnknownFR),(FunctionInfo "ppCPattern" (FuncType (TCons ("AbstractCurry.Pretty","Options") []) (FuncType (TCons ("AbstractCurry.Types","CPattern") []) (TCons ("Pretty","Doc") []))) "AbstractCurry.Pretty" "pretty-print a pattern expression.\n" False UnknownFR),(FunctionInfo "ppCLiteral" (FuncType (TCons ("AbstractCurry.Pretty","Options") []) (FuncType (TCons ("AbstractCurry.Types","CLiteral") []) (TCons ("Pretty","Doc") []))) "AbstractCurry.Pretty" "pretty-print given literal (Int, Float, ...).\n" False KnownFlex),(FunctionInfo "ppCExpr" (FuncType (TCons ("AbstractCurry.Pretty","Options") []) (FuncType (TCons ("AbstractCurry.Types","CExpr") []) (TCons ("Pretty","Doc") []))) "AbstractCurry.Pretty" "pretty-print an expression.\n" False UnknownFR),(FunctionInfo "ppCStatement" (FuncType (TCons ("AbstractCurry.Pretty","Options") []) (FuncType (TCons ("AbstractCurry.Types","CStatement") []) (TCons ("Pretty","Doc") []))) "AbstractCurry.Pretty" "" False KnownFlex),(FunctionInfo "ppQName" (FuncType (TCons ("AbstractCurry.Pretty","Options") []) (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (TCons ("Pretty","Doc") []))) "AbstractCurry.Pretty" "pretty-print a QName qualified according to given options.\n" False UnknownFR),(FunctionInfo "ppName" (FuncType (TCons ("Prelude","(,)") [(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]),(TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])]) (TCons ("Pretty","Doc") [])) "AbstractCurry.Pretty" "pretty-print a QName non-qualified.\n" False UnknownFR)] [(TypeInfo "Qualification" [(("AbstractCurry.Pretty","Full"),[]),(("AbstractCurry.Pretty","Imports"),[]),(("AbstractCurry.Pretty","None"),[])] [] "AbstractCurry.Pretty" "" False),(TypeInfo "Options" [] [] "AbstractCurry.Pretty" "" False)])