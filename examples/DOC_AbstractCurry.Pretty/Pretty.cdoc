(CurryInfo (ModuleInfo "Pretty" "Sebastian Fischer, Bj\246rn Peem\246ller, Jan Tikovsky" "This library provides pretty printing combinators.\nThe interface is that of\n[Daan Leijen's library](<http://www.cs.uu.nl/~daan/download/pprint/pprint.html)\n[linear-time, bounded implementation](http://www.cs.kent.ac.uk/pubs/2006/2381/index.html)\n by Olaf Chitil.\nNote that the implementation of `fill` and `fillBreak` is not linear-time bounded\nSupport of ANSI escape codes for formatting and colorisation of documents\nin text terminals (see https://en.wikipedia.org/wiki/ANSI_escape_code)\n\n") [(FunctionInfo "pPrint" (FuncType (TCons ("Pretty","Doc") []) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])])) "Pretty" "Standard printing with a column length of 80.\n" False UnknownFR),(FunctionInfo "empty" (TCons ("Pretty","Doc") []) "Pretty" "The empty document\n" False UnknownFR),(FunctionInfo "isEmpty" (FuncType (TCons ("Pretty","Doc") []) (TCons ("Prelude","Bool") [])) "Pretty" "Is the document empty?\n" False KnownFlex),(FunctionInfo "text" (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Pretty","Doc") [])) "Pretty" "The document `(text s)` contains the literal string `s`.\nThe string shouldn't contain any newline ('\\n') characters.\nIf the string contains newline characters,\nthe function `string` should be used.\n" False UnknownFR),(FunctionInfo "linesep" (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Pretty","Doc") [])) "Pretty" "The document `(linesep s)` advances to the next line and indents\nto the current nesting level. Document `(linesep s)`\nbehaves like `(text s)` if the line break is undone by `group`.\n" False UnknownFR),(FunctionInfo "hardline" (TCons ("Pretty","Doc") []) "Pretty" "The document `hardline` advances to the next line and indents\nto the current nesting level. `hardline` cannot be undone by `group`.\n" False UnknownFR),(FunctionInfo "line" (TCons ("Pretty","Doc") []) "Pretty" "The document `line` advances to the next line and indents to the current\nnesting level. Document `line` behaves like `(text \" \")` if the line break\nis undone by `group`.\n" False UnknownFR),(FunctionInfo "linebreak" (TCons ("Pretty","Doc") []) "Pretty" "The document `linebreak` advances to the next line and indents to\nthe current nesting level. Document `linebreak` behaves like `(text \"\")`\nif the line break is undone by `group`.\n" False UnknownFR),(FunctionInfo "softline" (TCons ("Pretty","Doc") []) "Pretty" "The document `softline` behaves like `space` if the resulting output\nfits the page, otherwise it behaves like `line`.\n`softline  = group line`\n" False UnknownFR),(FunctionInfo "softbreak" (TCons ("Pretty","Doc") []) "Pretty" "The document `softbreak` behaves like `(text \"\")` if the resulting output\nfits the page, otherwise it behaves like `line`.\n`softbreak  = group linebreak`\n" False UnknownFR),(FunctionInfo "group" (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") [])) "Pretty" "The combinator `group` is used to specify alternative layouts.\nThe document `(group x)` undoes all line breaks in document `x`.\nThe resulting line is added to the current line if that fits the page.\nOtherwise, the document `x` is rendered without any changes.\n" False UnknownFR),(FunctionInfo "nest" (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") []))) "Pretty" "The document `(nest i d)` renders document `d` with the current\nindentation level increased by `i` (See also `hang`,\n`align` and `indent`).\n\n    nest 2 (text \"hello\" $$ text \"world\") $$ text \"!\"\n\noutputs as:\n\n    hello\n      world\n    !\n\n" False UnknownFR),(FunctionInfo "hang" (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") []))) "Pretty" "The combinator `hang` implements hanging indentation.\nThe document `(hang i d)` renders document `d` with a nesting level set\nto the current column plus `i`. The following example uses hanging\nindentation for some text:\n\n    test = hang 4\n             (fillSep\n                (map text\n                     (words \"the hang combinator indents these words !\")))\n\nWhich lays out on a page with a width of 20 characters as:\n\n    the hang combinator\n        indents these\n        words !\n\nThe hang combinator is implemented as:\n\n    hang i x  = align (nest i x)\n\n" False UnknownFR),(FunctionInfo "align" (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") [])) "Pretty" "The document `(align d)` renders document `d with the nesting level\nset to the current column. It is used for example to implement `hang`.\n\nAs an example, we will put a document right above another one,\nregardless of the current nesting level:\n\n    x $$ y  = align (x $$ y)\n    test    = text \"hi\" <+> (text \"nice\" $$ text \"world\")\n\nwhich will be layed out as:\n\n    hi nice\n       world\n\n" False UnknownFR),(FunctionInfo "indent" (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") []))) "Pretty" "The document `(indent i d)` indents document `d` with `i` spaces.\n\n    test  = indent 4 (fillSep (map text\n            (words \"the indent combinator indents these words !\")))\n\nWhich lays out with a page width of 20 as:\n\n    the indent\n    combinator\n    indents these\n    words !\n\n" False UnknownFR),(FunctionInfo "combine" (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") [])))) "Pretty" "The document `(combine c d1 d2)` combines document `d1` and `d2` with\ndocument `c` in between using `(<>)` with identity `empty`.\nThus, the following equations hold.\n\n    combine c d1    empty == d1\n    combine c empty d2    == d2\n    combine c d1    d2    == d1 <> c <> d2 if neither d1 nor d2 are empty\n\n" False KnownRigid),(FunctionInfo "<>" (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") []))) "Pretty" "The document `(x <> y)` concatenates document `x` and document `y`.\nIt is an associative operation having `empty` as a left and right unit.\n" False KnownRigid),(FunctionInfo "<+>" (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") []))) "Pretty" "The document `(x <+> y)` concatenates document `x` and `y` with a\n`space` in between with identity `empty`.\n" False UnknownFR),(FunctionInfo "$$" (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") []))) "Pretty" "The document `(x $$ y)` concatenates document x and y with a\n`line` in between with identity `empty`.\n" False UnknownFR),(FunctionInfo "<$+$>" (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") []))) "Pretty" "The document `(x <$+$> y)` concatenates document `x` and `y` with a\nblank line in between with identity `empty`.\n" False UnknownFR),(FunctionInfo "</>" (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") []))) "Pretty" "The document `(x </> y)` concatenates document `x` and `y` with\na `softline` in between with identity `empty`.\nThis effectively puts `x` and `y` either next to each other\n(with a `space` in between) or underneath each other.\n" False UnknownFR),(FunctionInfo "<$$>" (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") []))) "Pretty" "The document `(x <$$> y)` concatenates document `x` and `y` with a\n`linebreak` in between with identity `empty`.\n" False UnknownFR),(FunctionInfo "<//>" (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") []))) "Pretty" "The document `(x <//> y)` concatenates document `x` and `y` with a\n`softbreak` in between with identity `empty`.\nThis effectively puts `x` and `y` either right next to each other\nor underneath each other.\n" False UnknownFR),(FunctionInfo "<$!$>" (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") []))) "Pretty" "The document `(x <$!$> y)` concatenates document `x` and `y` with a\n`hardline` in between with identity `empty`.\nThis effectively puts `x` and `y` underneath each other.\n" False UnknownFR),(FunctionInfo "compose" (FuncType (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") []))) (FuncType (TCons ("Prelude","[]") [(TCons ("Pretty","Doc") [])]) (TCons ("Pretty","Doc") []))) "Pretty" "The document `(compose f xs)` concatenates all documents `xs`\nwith function `f`.\nFunction `f` should be like `(<+>)`, `($$)` and so on.\n" False KnownFlex),(FunctionInfo "hsep" (FuncType (TCons ("Prelude","[]") [(TCons ("Pretty","Doc") [])]) (TCons ("Pretty","Doc") [])) "Pretty" "The document `(hsep xs)` concatenates all documents `xs`\nhorizontally with `(<+>)`.\n" False UnknownFR),(FunctionInfo "vsep" (FuncType (TCons ("Prelude","[]") [(TCons ("Pretty","Doc") [])]) (TCons ("Pretty","Doc") [])) "Pretty" "The document `(vsep xs)` concatenates all documents `xs` vertically with\n`($$)`. If a group undoes the line breaks inserted by `vsep`,\nall documents are separated with a `space`.\n\n    someText = map text (words (\"text to lay out\"))\n    test     = text \"some\" <+> vsep someText\n\nThis is layed out as:\n\n    some text\n    to\n    lay\n    out\n\nThe `align` combinator can be used to align the documents\nunder their first element:\n\n    test     = text \"some\" <+> align (vsep someText)\n\nThis is printed as:\n\n    some text\n         to\n         lay\n         out\n\n" False UnknownFR),(FunctionInfo "vsepBlank" (FuncType (TCons ("Prelude","[]") [(TCons ("Pretty","Doc") [])]) (TCons ("Pretty","Doc") [])) "Pretty" "The document `vsep xs` concatenates all documents `xs` vertically with\n`(<$+$>)`. If a group undoes the line breaks inserted by `vsepBlank`,\nall documents are separated with a `space`.\n" False UnknownFR),(FunctionInfo "fillSep" (FuncType (TCons ("Prelude","[]") [(TCons ("Pretty","Doc") [])]) (TCons ("Pretty","Doc") [])) "Pretty" "The document `(fillSep xs)` concatenates documents `xs` horizontally with\n`(</>)` as long as its fits the page, than inserts a\n`line` and continues doing that for all documents in `xs`.\n`fillSep xs  = foldr (</>) empty xs`\n" False UnknownFR),(FunctionInfo "sep" (FuncType (TCons ("Prelude","[]") [(TCons ("Pretty","Doc") [])]) (TCons ("Pretty","Doc") [])) "Pretty" "The document `(sep xs)` concatenates all documents `xs` either horizontally\nwith `(<+>)`, if it fits the page, or vertically\nwith `($$)`.\n`sep xs  = group (vsep xs)`\n" False UnknownFR),(FunctionInfo "hcat" (FuncType (TCons ("Prelude","[]") [(TCons ("Pretty","Doc") [])]) (TCons ("Pretty","Doc") [])) "Pretty" "The document `(hcat xs)` concatenates all documents `xs` horizontally\nwith `(<>)`.\n" False UnknownFR),(FunctionInfo "vcat" (FuncType (TCons ("Prelude","[]") [(TCons ("Pretty","Doc") [])]) (TCons ("Pretty","Doc") [])) "Pretty" "The document `(vcat xs)` concatenates all documents `xs` vertically\nwith `(<$$>)`. If a `group` undoes the line breaks inserted by `vcat`,\nall documents are directly concatenated.\n" False UnknownFR),(FunctionInfo "fillCat" (FuncType (TCons ("Prelude","[]") [(TCons ("Pretty","Doc") [])]) (TCons ("Pretty","Doc") [])) "Pretty" "The document `(fillCat xs)` concatenates documents `xs` horizontally\nwith `(<//>)` as long as its fits the page, than inserts a `linebreak`\nand continues doing that for all documents in `xs`.\n`fillCat xs  = foldr (<//>) empty xs`\n" False UnknownFR),(FunctionInfo "cat" (FuncType (TCons ("Prelude","[]") [(TCons ("Pretty","Doc") [])]) (TCons ("Pretty","Doc") [])) "Pretty" "The document `(cat xs)` concatenates all documents `xs` either horizontally\nwith `(<>)`, if it fits the page, or vertically with\n`(<$$>)`.\n`cat xs  = group (vcat xs)`\n" False UnknownFR),(FunctionInfo "punctuate" (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Prelude","[]") [(TCons ("Pretty","Doc") [])]) (TCons ("Prelude","[]") [(TCons ("Pretty","Doc") [])]))) "Pretty" "`(punctuate p xs)` concatenates all documents `xs` with document `p` except\nfor the last document.\n\n    someText = map text [\"words\",\"in\",\"a\",\"tuple\"]\n    test     = parens (align (cat (punctuate comma someText)))\n\nThis is layed out on a page width of 20 as:\n\n    (words,in,a,tuple)\n\nBut when the page width is 15, it is layed out as:\n\n    (words,\n     in,\n     a,\n     tuple)\n\n(If you want put the commas in front of their elements instead of at the\nend, you should use `tupled` or, in general, `encloseSep`.)\n" False UnknownFR),(FunctionInfo "encloseSep" (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Prelude","[]") [(TCons ("Pretty","Doc") [])]) (TCons ("Pretty","Doc") []))))) "Pretty" "The document `(encloseSep l r s xs)` concatenates the documents `xs`\nseperated by `s` and encloses the resulting document by `l` and `r`.\nThe documents are rendered horizontally if that fits the page. Otherwise\nthey are aligned vertically. All seperators are put in front of the\nelements.\n\nFor example, the combinator `list` can be defined with `encloseSep`:\n\n    list xs  = encloseSep lbracket rbracket comma xs\n    test     = text \"list\" <+> (list (map int [10,200,3000]))\n\nWhich is layed out with a page width of 20 as:\n\n    list [10,200,3000]\n\nBut when the page width is 15, it is layed out as:\n\n    list [10\n         ,200\n         ,3000]\n\n" False KnownFlex),(FunctionInfo "hEncloseSep" (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Prelude","[]") [(TCons ("Pretty","Doc") [])]) (TCons ("Pretty","Doc") []))))) "Pretty" "The document `(hEncloseSep l r s xs)` concatenates the documents `xs`\nseperated by `s` and encloses the resulting document by `l` and `r`.\n\nThe documents are rendered horizontally.\n" False KnownFlex),(FunctionInfo "fillEncloseSep" (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Prelude","[]") [(TCons ("Pretty","Doc") [])]) (TCons ("Pretty","Doc") []))))) "Pretty" "The document `(fillEncloseSep l r s xs)` concatenates the documents `xs`\nseperated by `s` and encloses the resulting document by `l` and `r`.\n\nThe documents are rendered horizontally if that fits the page.\nOtherwise they are aligned vertically.\nAll seperators are put in front of the elements.\n" False KnownFlex),(FunctionInfo "fillEncloseSepSpaced" (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Prelude","[]") [(TCons ("Pretty","Doc") [])]) (TCons ("Pretty","Doc") []))))) "Pretty" "The document `(fillEncloseSepSpaced l r s xs)` concatenates the documents\n`xs` seperated by `s` and encloses the resulting document by `l` and `r`.\nIn addition, after each occurrence of `s`, after `l`, and before `r`,\na `space` is inserted.\n\nThe documents are rendered horizontally if that fits the page.\nOtherwise, they are aligned vertically.\nAll seperators are put in front of the elements.\n" False UnknownFR),(FunctionInfo "list" (FuncType (TCons ("Prelude","[]") [(TCons ("Pretty","Doc") [])]) (TCons ("Pretty","Doc") [])) "Pretty" "The document `(list xs)` comma seperates the documents `xs` and encloses\nthem in square brackets. The documents are rendered horizontally if\nthat fits the page. Otherwise they are aligned vertically.\nAll comma seperators are put in front of the elements.\n" False UnknownFR),(FunctionInfo "listSpaced" (FuncType (TCons ("Prelude","[]") [(TCons ("Pretty","Doc") [])]) (TCons ("Pretty","Doc") [])) "Pretty" "Spaced version of `list`\n" False UnknownFR),(FunctionInfo "set" (FuncType (TCons ("Prelude","[]") [(TCons ("Pretty","Doc") [])]) (TCons ("Pretty","Doc") [])) "Pretty" "The document `(set xs)` comma seperates the documents `xs` and encloses\nthem in braces. The documents are rendered horizontally if\nthat fits the page. Otherwise they are aligned vertically.\nAll comma seperators are put in front of the elements.\n" False UnknownFR),(FunctionInfo "setSpaced" (FuncType (TCons ("Prelude","[]") [(TCons ("Pretty","Doc") [])]) (TCons ("Pretty","Doc") [])) "Pretty" "Spaced version of `set`\n" False UnknownFR),(FunctionInfo "tupled" (FuncType (TCons ("Prelude","[]") [(TCons ("Pretty","Doc") [])]) (TCons ("Pretty","Doc") [])) "Pretty" "The document `(tupled xs)` comma seperates the documents `xs` and encloses\nthem in parenthesis. The documents are rendered horizontally if that fits\nthe page. Otherwise they are aligned vertically.\nAll comma seperators are put in front of the elements.\n" False UnknownFR),(FunctionInfo "tupledSpaced" (FuncType (TCons ("Prelude","[]") [(TCons ("Pretty","Doc") [])]) (TCons ("Pretty","Doc") [])) "Pretty" "Spaced version of `tupled`\n" False UnknownFR),(FunctionInfo "semiBraces" (FuncType (TCons ("Prelude","[]") [(TCons ("Pretty","Doc") [])]) (TCons ("Pretty","Doc") [])) "Pretty" "The document `(semiBraces xs)` seperates the documents `xs` with semi colons\nand encloses them in braces. The documents are rendered horizontally\nif that fits the page. Otherwise they are aligned vertically.\nAll semi colons are put in front of the elements.\n" False UnknownFR),(FunctionInfo "semiBracesSpaced" (FuncType (TCons ("Prelude","[]") [(TCons ("Pretty","Doc") [])]) (TCons ("Pretty","Doc") [])) "Pretty" "Spaced version of `semiBraces`\n" False UnknownFR),(FunctionInfo "enclose" (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Pretty","Doc") []) (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") [])))) "Pretty" "The document `(enclose l r x)` encloses document `x` between\ndocuments `l` and `r` using `(<>)`.\n`enclose l r x   = l <> x <> r`\n" False UnknownFR),(FunctionInfo "squotes" (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") [])) "Pretty" "Document `(squotes x)` encloses document `x` with single quotes `\"'\"`.\n" False UnknownFR),(FunctionInfo "dquotes" (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") [])) "Pretty" "Document `(dquotes x)` encloses document `x` with double quotes.\n" False UnknownFR),(FunctionInfo "bquotes" (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") [])) "Pretty" "Document `(bquotes x)` encloses document `x` with back quotes `\"\\`\"`.\n" False UnknownFR),(FunctionInfo "parens" (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") [])) "Pretty" "Document `(parens x)` encloses document `x` in parenthesis,\n`\"(\"` and `\")\"`.\n" False UnknownFR),(FunctionInfo "parensIf" (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") []))) "Pretty" "Document `(parensIf x)` encloses document `x` in parenthesis,`\"(\"` and `\")\"`,\niff the condition is true.\n" False KnownRigid),(FunctionInfo "angles" (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") [])) "Pretty" "Document `(angles x)` encloses document `x` in angles, `\"<\"` and `\">\"`.\n" False UnknownFR),(FunctionInfo "braces" (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") [])) "Pretty" "Document `(braces x)` encloses document `x` in braces, `\"{\"` and `\"}\"`.\n" False UnknownFR),(FunctionInfo "brackets" (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") [])) "Pretty" "Document `(brackets x)` encloses document `x` in square brackets,\n`\"[\"` and `\"]\"`.\n" False UnknownFR),(FunctionInfo "char" (FuncType (TCons ("Prelude","Char") []) (TCons ("Pretty","Doc") [])) "Pretty" "The document `(char c)` contains the literal character `c`.\nThe character should not be a newline (`\\n`),\nthe function `line` should be used for line breaks.\n" False UnknownFR),(FunctionInfo "string" (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]) (TCons ("Pretty","Doc") [])) "Pretty" "The document `(string s)` concatenates all characters in `s` using\n`line` for newline characters and `char` for all other characters.\nIt is used instead of `text` whenever the text contains newline characters.\n" False UnknownFR),(FunctionInfo "int" (FuncType (TCons ("Prelude","Int") []) (TCons ("Pretty","Doc") [])) "Pretty" "The document `(int i)` shows the literal integer `i` using `text`.\n" False UnknownFR),(FunctionInfo "float" (FuncType (TCons ("Prelude","Float") []) (TCons ("Pretty","Doc") [])) "Pretty" "The document `(float f)` shows the literal float `f` using `text`.\n" False UnknownFR),(FunctionInfo "lparen" (TCons ("Pretty","Doc") []) "Pretty" "The document `lparen` contains a left parenthesis, `\"(\"`.\n" False UnknownFR),(FunctionInfo "rparen" (TCons ("Pretty","Doc") []) "Pretty" "The document `rparen` contains a right parenthesis, `\")\"`.\n" False UnknownFR),(FunctionInfo "langle" (TCons ("Pretty","Doc") []) "Pretty" "The document `langle` contains a left angle, `\"<\"`.\n" False UnknownFR),(FunctionInfo "rangle" (TCons ("Pretty","Doc") []) "Pretty" "The document `rangle` contains a right angle, `\">\"`.\n" False UnknownFR),(FunctionInfo "lbrace" (TCons ("Pretty","Doc") []) "Pretty" "The document `lbrace` contains a left brace, `\"{\"`.\n" False UnknownFR),(FunctionInfo "rbrace" (TCons ("Pretty","Doc") []) "Pretty" "The document `rbrace` contains a right brace, `\"}\"`.\n" False UnknownFR),(FunctionInfo "lbracket" (TCons ("Pretty","Doc") []) "Pretty" "The document `lbracket` contains a left square bracket, `\"[\"`.\n" False UnknownFR),(FunctionInfo "rbracket" (TCons ("Pretty","Doc") []) "Pretty" "The document `rbracket` contains a right square bracket, `\"]\"`.\n" False UnknownFR),(FunctionInfo "squote" (TCons ("Pretty","Doc") []) "Pretty" "The document `squote` contains a single quote, `\"'\"`.\n" False UnknownFR),(FunctionInfo "dquote" (TCons ("Pretty","Doc") []) "Pretty" "The document `dquote` contains a double quote.\n" False UnknownFR),(FunctionInfo "semi" (TCons ("Pretty","Doc") []) "Pretty" "The document `semi` contains a semi colon, `\";\"`.\n" False UnknownFR),(FunctionInfo "colon" (TCons ("Pretty","Doc") []) "Pretty" "The document `colon` contains a colon, `\":\"`.\n" False UnknownFR),(FunctionInfo "comma" (TCons ("Pretty","Doc") []) "Pretty" "The document `comma` contains a comma, `\",\"`.\n" False UnknownFR),(FunctionInfo "space" (TCons ("Pretty","Doc") []) "Pretty" "The document `space` contains a single space, `\" \"`.\n\n    x <+> y   = x <> space <> y\n\n" False UnknownFR),(FunctionInfo "dot" (TCons ("Pretty","Doc") []) "Pretty" "The document `dot` contains a single dot, `\".\"`.\n" False UnknownFR),(FunctionInfo "backslash" (TCons ("Pretty","Doc") []) "Pretty" "The document `backslash` contains a back slash, `\"\\\\\"`.\n" False UnknownFR),(FunctionInfo "equals" (TCons ("Pretty","Doc") []) "Pretty" "The document `equals` contains an equal sign, `\"=\"`.\n" False UnknownFR),(FunctionInfo "larrow" (TCons ("Pretty","Doc") []) "Pretty" "The document `larrow` contains a left arrow sign, `\"<-\"`.\n" False UnknownFR),(FunctionInfo "rarrow" (TCons ("Pretty","Doc") []) "Pretty" "The document `rarrow` contains a right arrow sign, `\"->\"`.\n" False UnknownFR),(FunctionInfo "doubleArrow" (TCons ("Pretty","Doc") []) "Pretty" "The document `doubleArrow` contains an double arrow sign, `\"=>\"`.\n" False UnknownFR),(FunctionInfo "doubleColon" (TCons ("Pretty","Doc") []) "Pretty" "The document `doubleColon` contains a double colon sign, `\"::\"`.\n" False UnknownFR),(FunctionInfo "bar" (TCons ("Pretty","Doc") []) "Pretty" "The document `bar` contains a vertical bar sign, `\"|\"`.\n" False UnknownFR),(FunctionInfo "at" (TCons ("Pretty","Doc") []) "Pretty" "The document `at` contains an at sign, `\"@\"`.\n" False UnknownFR),(FunctionInfo "tilde" (TCons ("Pretty","Doc") []) "Pretty" "The document `tilde` contains a tilde sign, `\"~\"`.\n" False UnknownFR),(FunctionInfo "fill" (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") []))) "Pretty" "The document `(fill i d)` renders document `d`. It than appends\n`space`s until the width is equal to `i`. If the width of `d` is\nalready larger, nothing is appended. This combinator is quite\nuseful in practice to output a list of bindings. The following\nexample demonstrates this.\n\n    types  = [(\"empty\",\"Doc\")\n             ,(\"nest\",\"Int -> Doc -> Doc\")\n             ,(\"linebreak\",\"Doc\")]\n\n    ptype (name,tp)\n           = fill 6 (text name) <+> text \"::\" <+> text tp\n\n    test   = text \"let\" <+> align (vcat (map ptype types))\n\nWhich is layed out as:\n\n    let empty  :: Doc\n        nest   :: Int -> Doc -> Doc\n        linebreak :: Doc\n\nNote that `fill` is not guaranteed to be linear-time bounded since it has to\ncompute the width of a document before pretty printing it\n" False UnknownFR),(FunctionInfo "fillBreak" (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") []))) "Pretty" "The document `(fillBreak i d)` first renders document `d`. It\nthan appends `space`s until the width is equal to `i`. If the\nwidth of `d` is already larger than `i`, the nesting level is\nincreased by `i` and a `line` is appended. When we redefine `ptype`\nin the previous example to use `fillBreak`, we get a useful\nvariation of the previous output:\n\n    ptype (name,tp)\n         = fillBreak 6 (text name) <+> text \"::\" <+> text tp\n\nThe output will now be:\n\n    let empty  :: Doc\n        nest   :: Int -> Doc -> Doc\n        linebreak\n               :: Doc\n\nNote that `fillBreak` is not guaranteed to be linear-time bounded since it\nhas to compute the width of a document before pretty printing it\n" False UnknownFR),(FunctionInfo "bold" (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") [])) "Pretty" "The document `(bold d)` displays document `d` with bold text\n" False UnknownFR),(FunctionInfo "faint" (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") [])) "Pretty" "The document `(faint d)` displays document `d` with faint text\n" False UnknownFR),(FunctionInfo "blinkSlow" (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") [])) "Pretty" "The document `(blinkSlow d)` displays document `d` with slowly blinking text\n(rarely supported)\n" False UnknownFR),(FunctionInfo "blinkRapid" (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") [])) "Pretty" "The document `(blinkRapid d)` displays document `d` with rapidly blinking\ntext (rarely supported)\n" False UnknownFR),(FunctionInfo "italic" (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") [])) "Pretty" "The document `(italic d)` displays document `d` with italicized text\n(rarely supported)\n" False UnknownFR),(FunctionInfo "underline" (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") [])) "Pretty" "The document `(underline d)` displays document `d` with underlined text\n" False UnknownFR),(FunctionInfo "crossout" (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") [])) "Pretty" "The document `(crossout d)` displays document `d` with crossed out text\n" False UnknownFR),(FunctionInfo "inverse" (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") [])) "Pretty" "The document `(inverse d)` displays document `d` with inversed coloring,\ni.e. use text color of `d` as background color and background color of `d`\nas text color\n" False UnknownFR),(FunctionInfo "black" (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") [])) "Pretty" "The document `(black d)` displays document `d` with black text color\n" False UnknownFR),(FunctionInfo "red" (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") [])) "Pretty" "The document `(red d)` displays document `d` with red text color\n" False UnknownFR),(FunctionInfo "green" (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") [])) "Pretty" "The document `(green d)` displays document `d` with green text color\n" False UnknownFR),(FunctionInfo "yellow" (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") [])) "Pretty" "The document `(yellow d)` displays document `d` with yellow text color\n" False UnknownFR),(FunctionInfo "blue" (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") [])) "Pretty" "The document `(blue d)` displays document `d` with blue text color\n" False UnknownFR),(FunctionInfo "magenta" (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") [])) "Pretty" "The document `(magenta d)` displays document `d` with magenta text color\n" False UnknownFR),(FunctionInfo "cyan" (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") [])) "Pretty" "The document `(cyan d)` displays document `d` with cyan text color\n" False UnknownFR),(FunctionInfo "white" (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") [])) "Pretty" "The document `(white d)` displays document `d` with white text color\n" False UnknownFR),(FunctionInfo "bgBlack" (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") [])) "Pretty" "The document `(bgBlack d)` displays document `d` with black background color\n" False UnknownFR),(FunctionInfo "bgRed" (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") [])) "Pretty" "The document `(bgRed d)` displays document `d` with red background color\n" False UnknownFR),(FunctionInfo "bgGreen" (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") [])) "Pretty" "The document `(bgGreen d)` displays document `d` with green background color\n" False UnknownFR),(FunctionInfo "bgYellow" (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") [])) "Pretty" "The document `(bgYellow d)` displays document `d` with yellow background\ncolor\n" False UnknownFR),(FunctionInfo "bgBlue" (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") [])) "Pretty" "The document `(bgBlue d)` displays document `d` with blue background color\n" False UnknownFR),(FunctionInfo "bgMagenta" (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") [])) "Pretty" "The document `(bgMagenta d)` displays document `d` with magenta background\ncolor\n" False UnknownFR),(FunctionInfo "bgCyan" (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") [])) "Pretty" "The document `(bgCyan d)` displays document `d` with cyan background color\n" False UnknownFR),(FunctionInfo "bgWhite" (FuncType (TCons ("Pretty","Doc") []) (TCons ("Pretty","Doc") [])) "Pretty" "The document `(bgWhite d)` displays document `d` with white background color\n" False UnknownFR),(FunctionInfo "pretty" (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Pretty","Doc") []) (TCons ("Prelude","[]") [(TCons ("Prelude","Char") [])]))) "Pretty" "`(pretty w d)` pretty prints document `d` with a page width of `w` characters\n" False UnknownFR)] [(TypeInfo "Doc" [] [] "Pretty" "The abstract data type Doc represents pretty documents.\n" False)])