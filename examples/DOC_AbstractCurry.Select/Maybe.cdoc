(CurryInfo (ModuleInfo "Maybe" "Frank Huch, Bernd Brassel, Bj\246rn Peem\246ller" "Library with some useful functions on the `Maybe` datatype.\n\n") [(FunctionInfo "isJust" (FuncType (TCons ("Prelude","Maybe") [(TVar 0)]) (TCons ("Prelude","Bool") [])) "Maybe" "Return `True` iff the argument is of the form `Just _`.\n" False KnownFlex),(FunctionInfo "isNothing" (FuncType (TCons ("Prelude","Maybe") [(TVar 0)]) (TCons ("Prelude","Bool") [])) "Maybe" "Return `True` iff the argument is of the form `Nothing`.\n" False KnownFlex),(FunctionInfo "fromJust" (FuncType (TCons ("Prelude","Maybe") [(TVar 0)]) (TVar 0)) "Maybe" "Extract the argument from the `Just` constructor and throw an error\nif the argument is `Nothing`.\n" False KnownFlex),(FunctionInfo "fromMaybe" (FuncType (TVar 0) (FuncType (TCons ("Prelude","Maybe") [(TVar 0)]) (TVar 0))) "Maybe" "Extract the argument from the `Just` constructor or return the provided\ndefault value if the argument is `Nothing`.\n" False KnownFlex),(FunctionInfo "listToMaybe" (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","Maybe") [(TVar 0)])) "Maybe" "Return `Nothing` on an empty list or `Just x` where `x` is the first\nlist element.\n" False KnownFlex),(FunctionInfo "maybeToList" (FuncType (TCons ("Prelude","Maybe") [(TVar 0)]) (TCons ("Prelude","[]") [(TVar 0)])) "Maybe" "Return an empty list for `Nothing` or a singleton list for `Just x`.\n" False KnownFlex),(FunctionInfo "catMaybes" (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Maybe") [(TVar 0)])]) (TCons ("Prelude","[]") [(TVar 0)])) "Maybe" "Return the list of all `Just` values.\n" False UnknownFR),(FunctionInfo "mapMaybe" (FuncType (FuncType (TVar 0) (TCons ("Prelude","Maybe") [(TVar 1)])) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","[]") [(TVar 1)]))) "Maybe" "Apply a function which may throw out elements using the `Nothing`\nconstructor to a list of elements.\n" False UnknownFR),(FunctionInfo ">>-" (FuncType (TCons ("Prelude","Maybe") [(TVar 0)]) (FuncType (FuncType (TVar 0) (TCons ("Prelude","Maybe") [(TVar 1)])) (TCons ("Prelude","Maybe") [(TVar 1)]))) "Maybe" "Monadic bind for Maybe.\nMaybe can be interpreted as a monad where Nothing is interpreted\nas the error case by this monadic binding.\n" False KnownFlex),(FunctionInfo "sequenceMaybe" (FuncType (TCons ("Prelude","[]") [(TCons ("Prelude","Maybe") [(TVar 0)])]) (TCons ("Prelude","Maybe") [(TCons ("Prelude","[]") [(TVar 0)])])) "Maybe" "Monadic `sequence` for `Maybe`.\n" False KnownFlex),(FunctionInfo "mapMMaybe" (FuncType (FuncType (TVar 0) (TCons ("Prelude","Maybe") [(TVar 1)])) (FuncType (TCons ("Prelude","[]") [(TVar 0)]) (TCons ("Prelude","Maybe") [(TCons ("Prelude","[]") [(TVar 1)])]))) "Maybe" "Monadic `map` for `Maybe`.\n" False UnknownFR),(FunctionInfo "mplus" (FuncType (TCons ("Prelude","Maybe") [(TVar 0)]) (FuncType (TCons ("Prelude","Maybe") [(TVar 0)]) (TCons ("Prelude","Maybe") [(TVar 0)]))) "Maybe" "Combine two `Maybe`s, returning the first `Just` value, if any.\n" False KnownFlex)] [])